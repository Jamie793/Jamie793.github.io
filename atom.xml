<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamie793’ S Blog</title>
  
  <subtitle>Welecom</subtitle>
  <link href="https://blog.jamiexu.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.jamiexu.cn/"/>
  <updated>2025-01-09T16:52:00.851Z</updated>
  <id>https://blog.jamiexu.cn/</id>
  
  <author>
    <name>Jamie793</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.jamiexu.cn/2024/12/26/Untitled/"/>
    <id>https://blog.jamiexu.cn/2024/12/26/Untitled/</id>
    <published>2024-12-26T06:10:44.529Z</published>
    <updated>2025-01-09T16:52:00.851Z</updated>
    
    <content type="html"><![CDATA[<p>根据您提供的概率密度函数 ( f(x) )，这里是一个分段函数，定义如下：</p><p>[ f(x) = \begin{cases}<br>Ax &amp; \text{for } 0 \leq x \leq 1 \<br>0 &amp; \text{otherwise}<br>\end{cases} ]</p><p>我们需要求解以下问题：</p><h3 id="1-求-A"><a href="#1-求-A" class="headerlink" title="(1) 求 ( A )"></a>(1) 求 ( A )</h3><p>由于 ( f(x) ) 是概率密度函数，其在定义域上的积分必须等于 1：<br>[ \int_{0}^{1} Ax , dx = 1 ]<br>[ A \left[ \frac{x^2}{2} \right]_{0}^{1} = 1 ]<br>[ A \cdot \frac{1}{2} = 1 ]<br>[ A = 2 ]</p><h3 id="2-分布函数-F-x"><a href="#2-分布函数-F-x" class="headerlink" title="(2) 分布函数 ( F(x) )"></a>(2) 分布函数 ( F(x) )</h3><p>分布函数 ( F(x) ) 是概率密度函数 ( f(x) ) 的积分：<br>[ F(x) = \int_{-\infty}^{x} f(t) , dt ]<br>对于 ( 0 \leq x \leq 1 )：<br>[ F(x) = \int_{0}^{x} 2t , dt = 2 \left[ \frac{t^2}{2} \right]_{0}^{x} = x^2 ]<br>对于 ( x &lt; 0 ) 或 ( x &gt; 1 )，( F(x) ) 分别为 0 和 1。</p><h3 id="3-P-0-lt-X-lt-1"><a href="#3-P-0-lt-X-lt-1" class="headerlink" title="(3) ( P(0 &lt; X &lt; 1) )"></a>(3) ( P(0 &lt; X &lt; 1) )</h3><p>[ P(0 &lt; X &lt; 1) = \int_{0}^{1} 2x , dx = 2 \left[ \frac{x^2}{2} \right]_{0}^{1} = 1 ]</p><h3 id="4-数学期望-E-X"><a href="#4-数学期望-E-X" class="headerlink" title="(4) 数学期望 ( E(X) )"></a>(4) 数学期望 ( E(X) )</h3><p>[ E(X) = \int_{0}^{1} x \cdot 2x , dx = 2 \int_{0}^{1} x^2 , dx = 2 \left[ \frac{x^3}{3} \right]_{0}^{1} = \frac{2}{3} ]</p><h3 id="5-方差-D-X"><a href="#5-方差-D-X" class="headerlink" title="(5) 方差 ( D(X) )"></a>(5) 方差 ( D(X) )</h3><p>首先计算 ( E(X^2) )：<br>[ E(X^2) = \int_{0}^{1} x^2 \cdot 2x , dx = 2 \int_{0}^{1} x^3 , dx = 2 \left[ \frac{x^4}{4} \right]_{0}^{1} = \frac{1}{2} ]<br>然后计算方差：<br>[ D(X) = E(X^2) - [E(X)]^2 = \frac{1}{2} - \left(\frac{2}{3}\right)^2 = \frac{1}{2} - \frac{4}{9} = \frac{1}{18} ]</p><p>这些解答提供了每个问题的详细步骤和结果。如果您需要进一步的解释或有其他问题，请随时提问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据您提供的概率密度函数 ( f(x) )，这里是一个分段函数，定义如下：&lt;/p&gt;
&lt;p&gt;[ f(x) = \begin{cases}&lt;br&gt;Ax &amp;amp; \text{for } 0 \leq x \leq 1 \&lt;br&gt;0 &amp;amp; \text{otherwise}</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【单片机FreeRTOS】RTOS移植常见错误</title>
    <link href="https://blog.jamiexu.cn/2024/11/06/%E3%80%90%E5%8D%95%E7%89%87%E6%9C%BA&amp;FreeRTOS%E3%80%91RTOS%E7%A7%BB%E6%A4%8D%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>https://blog.jamiexu.cn/2024/11/06/%E3%80%90%E5%8D%95%E7%89%87%E6%9C%BA&amp;FreeRTOS%E3%80%91RTOS%E7%A7%BB%E6%A4%8D%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
    <published>2024-11-06T00:31:00.000Z</published>
    <updated>2024-11-06T01:29:47.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="触发任务调度异常xPortPendSVHandler后r14-LR-不为0xfffffffd"><a href="#触发任务调度异常xPortPendSVHandler后r14-LR-不为0xfffffffd" class="headerlink" title="触发任务调度异常xPortPendSVHandler后r14(LR)不为0xfffffffd"></a>触发任务调度异常<code>xPortPendSVHandler</code>后r14(LR)不为0xfffffffd</h3><ul><li>这种情况出现在直接在PendSV_Handler里面调用<code>xPortPendSVHandler</code>。当PendSVC触发时，<code>PendSV_Handler</code> 调用<code>xPortPendSVHandler</code>，此时LR寄存器所指向即为<code>PendSV_Handler</code>（出现这种情况后LR寄存器为上一个调用这个函数的值）只需要将中断的C文件中原来的<code>PendSV_Handler</code>删除并重新定义宏即可（原因未知）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void PendSV_Handler(void)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  xPortPendSVHandler();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br></pre></td></tr></table></figure></li><li>或者直接修改中断向量表所指向的Handler为FreeRTOS的即可![[20241106-1-1.png]]</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;触发任务调度异常xPortPendSVHandler后r14-LR-不为0xfffffffd&quot;&gt;&lt;a href=&quot;#触发任务调度异常xPortPendSVHandler后r14-LR-不为0xfffffffd&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://blog.jamiexu.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="单片机" scheme="https://blog.jamiexu.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="错误信息" scheme="https://blog.jamiexu.cn/tags/%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/"/>
    
    <category term="单片机" scheme="https://blog.jamiexu.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="FreeRTOS" scheme="https://blog.jamiexu.cn/tags/FreeRTOS/"/>
    
    <category term="RTOS" scheme="https://blog.jamiexu.cn/tags/RTOS/"/>
    
    <category term="移植" scheme="https://blog.jamiexu.cn/tags/%E7%A7%BB%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>【RTOS&amp;FreeRTOS&amp;嵌入式】基于STM32 的FreeRTOS内核剖析</title>
    <link href="https://blog.jamiexu.cn/2023/09/03/%E3%80%90RTOS&amp;FreeRTOS&amp;%E5%B5%8C%E5%85%A5%E5%BC%8F%E3%80%91%E5%9F%BA%E4%BA%8ESTM32%20%E7%9A%84FreeRTOS%E5%86%85%E6%A0%B8%E5%89%96%E6%9E%90/"/>
    <id>https://blog.jamiexu.cn/2023/09/03/%E3%80%90RTOS&amp;FreeRTOS&amp;%E5%B5%8C%E5%85%A5%E5%BC%8F%E3%80%91%E5%9F%BA%E4%BA%8ESTM32%20%E7%9A%84FreeRTOS%E5%86%85%E6%A0%B8%E5%89%96%E6%9E%90/</id>
    <published>2023-09-03T12:52:00.000Z</published>
    <updated>2023-12-30T04:20:21.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需要具备的前置知识"><a href="#需要具备的前置知识" class="headerlink" title="需要具备的前置知识"></a>需要具备的前置知识</h1><ul><li>C语言基础及其指针</li><li>数据结构与算法基础</li><li>汇编基础</li></ul><h1 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h1><h2 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h2><h3 id="堆栈初始化"><a href="#堆栈初始化" class="headerlink" title="堆栈初始化"></a>堆栈初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Stack_Size      EQU     <span class="number">0x400</span></span><br><span class="line"></span><br><span class="line">                AREA    STACK, NOINIT, READWRITE, ALIGN=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Stack_Mem       SPACE   Stack_Size</span><br><span class="line"></span><br><span class="line">__initial_sp</span><br><span class="line"></span><br><span class="line">Heap_Size      EQU     <span class="number">0x200</span></span><br><span class="line"></span><br><span class="line">                AREA    HEAP, NOINIT, READWRITE, ALIGN=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">__heap_base</span><br><span class="line"></span><br><span class="line">Heap_Mem        SPACE   Heap_Size</span><br><span class="line"></span><br><span class="line">__heap_limit</span><br><span class="line">                PRESERVE8</span><br><span class="line"></span><br><span class="line">                THUMB</span><br></pre></td></tr></table></figure><ul><li><code>EQU</code>是一个伪指令类似C的预编译指令define，给予常量一个符号名称</li><li><code>AREA</code> 指令用于</li></ul><h1 id="常用汇编指令"><a href="#常用汇编指令" class="headerlink" title="常用汇编指令"></a>常用汇编指令</h1><p>| 指令 | 作用 | </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需要具备的前置知识&quot;&gt;&lt;a href=&quot;#需要具备的前置知识&quot; class=&quot;headerlink&quot; title=&quot;需要具备的前置知识&quot;&gt;&lt;/a&gt;需要具备的前置知识&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;C语言基础及其指针&lt;/li&gt;
&lt;li&gt;数据结构与算法基础&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://blog.jamiexu.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="RTOS" scheme="https://blog.jamiexu.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/RTOS/"/>
    
    
    <category term="STM32" scheme="https://blog.jamiexu.cn/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>【STM32&amp;I2C(IIC)&amp;Proteus】基于STM32的Proteus下I2C仿真</title>
    <link href="https://blog.jamiexu.cn/2023/04/20/%E3%80%90STM32&amp;I2C(IIC)&amp;ROM&amp;RAM&amp;Proteus%E3%80%91IIC%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84Proteus%E4%B8%8BI2C%E4%BB%BF%E7%9C%9F/"/>
    <id>https://blog.jamiexu.cn/2023/04/20/%E3%80%90STM32&amp;I2C(IIC)&amp;ROM&amp;RAM&amp;Proteus%E3%80%91IIC%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84Proteus%E4%B8%8BI2C%E4%BB%BF%E7%9C%9F/</id>
    <published>2023-04-20T12:23:00.000Z</published>
    <updated>2023-04-21T16:19:57.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IIC协议的通讯过程"><a href="#IIC协议的通讯过程" class="headerlink" title="IIC协议的通讯过程"></a>IIC协议的通讯过程</h1><h2 id="IIC的介绍"><a href="#IIC的介绍" class="headerlink" title="IIC的介绍"></a>IIC的介绍</h2><ul><li>I2C 通讯协议(Inter－Integrated Circuit)是由 Phiilps 公司开发的，由于它引脚少，硬件，实现简单，可扩展性强，不需要 USART、 CAN 等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路(IC)间的通讯。IIC属于半双工通信协议，所以在通信的时候必须等待当前数据传输结束，方可进行下一次数据的传输。根据 IIC 协议的设计，从设备不能主动发起通信，只有主设备可以发起通信并请求从设备发送数据。</li></ul><h2 id="IIC的物理层"><a href="#IIC的物理层" class="headerlink" title="IIC的物理层"></a>IIC的物理层</h2><ul><li>IIC比USART，SPI等协议有着最大的优势就是他们不管有多少个从机设备，在建立通信时只需要两根总线就可以进行通讯。由于IIC采用的是同步半双工，所以不需要设置类似波特率的设置<ul><li>SDA：数据线，用于实现双向传输数据</li><li>SCL：时钟线，用于数据收发的同步<br><img src="https://blog.jamiexu.cn/img/20230422-.png"></li></ul></li><li>它的物理层有如下特点：<ol><li>它是一个支持设备的总线。“总线”指多个设备共用的信号线。在一个I2C通讯总线中， 可连接多个I2C通讯设备，支持多个通讯主机及多个通讯从机。</li><li>一个I2C总线只使用两条总线线路，一条双向串行数据线(SDA) ， 一条串行时钟线 (SCL)。数据线即用来表示数据，时钟线用于数据收发同步。</li><li>每个连接到总线的设备都有一个独立的地址， 主机可以利用这个地址进行不同设备之间的访问。</li><li>总线通过上拉电阻接到电源。当I2C设备空闲时，会输出高阻态， 而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平。</li><li>多个主机同时使用总线时，为了防止数据冲突， 会利用仲裁方式决定由哪个设备占用总线。</li><li>具有三种传输模式：标准模式传输速率为100kbit/s ，快速模式为400kbit/s ， 高速模式下可达 3.4Mbit/s，但目前大多I2C设备尚不支持高速模式。</li><li>连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制。</li></ol></li></ul><h2 id="IIC的协议层"><a href="#IIC的协议层" class="headerlink" title="IIC的协议层"></a>IIC的协议层</h2><ul><li><p>通讯的开始与停止，开始信号用于告诉从设备，主设备将要开始发送数据。在 IIC 通信中，开始信号是通过在 SDA 线上将数据从高电平切换到低电平来实现的。终止信号用于告诉从设备，主设备已经完成发送数据。在 IIC 通信中，终止信号是通过在 SDA 线上将数据从低电平切换到高电平来实现的。<br><img src="https://blog.jamiexu.cn/img/20230422-1-1.png"></p></li><li><p>数据的有效性，SCL高电平时数据有效。当SCL时低电平时数据无效，此时可变更数据位下一次需要传输的数据位的准备。SDA数据线在SCL的每个时钟周期传输一位数据。传输时，SCL为高电平的时候SDA表示的数据有效，即此时的SDA为高电平时表示数据“1”， 为低电平时表示数据“0”。当SCL为低电平时，SDA的数据无效，一般在这个时候SDA进行电平切换，为下一次表示数据做好准备。<br><img src="https://blog.jamiexu.cn/img/20230422-1-2.png"></p></li><li><p>应答响应，应答信号用于确认从设备已经成功接收到了主设备发送的数据。在 IIC 通信中，应答信号是由从设备在 SDA 线上拉低电平来实现的。<br><img src="https://blog.jamiexu.cn/img/20230422-1-3.png"></p></li></ul><h2 id="IIC的数据帧格式"><a href="#IIC的数据帧格式" class="headerlink" title="IIC的数据帧格式"></a>IIC的数据帧格式</h2><ul><li><p>在通讯的时候由于所有从机都连接到两根总线上，所以需要发送一个地址码（7Bit或10Bit）来选择从机设备进行通讯。首先发送一个开始信号，告诉所有从机我要开始发送地址广播了。地址广播就是将我需要通讯的地址发送给总线上的每个从机设备，当对应的从机收到地址判断是和自己的地址相等，说明当前连接是与自己通讯的，从机随后返回一个应答信号，当主机接收到应答信号后通讯开始建立。如果不是自己的将忽略后面的所有数据。地址在这里相当于一个使能，只有在接收到正确的地址码，从机的使能才会开启。否则从机的使能关闭，对后面的数据不做处理。</p></li><li><p>发送完地址码后紧跟着1Bit的操作指令，当此Bit为0时进行写操作，Bit为1时进行读操作。如果地址码是7Bit时，此操作指令Bit会和地址码放在一次当成一个字节一起发送出去。所以有时候读取数据需要发送两次地址码就是因为这个原因，第一次发送是写从机设备的寄存器地址，第二次是读取寄存器地址的值<br><img src="https://blog.jamiexu.cn/img/20230422-1-4.png"><br><img src="https://blog.jamiexu.cn/img/20230422-1-5.png"></p></li><li><p>在每个操作完成后都需要发送一个ACK/NACK（应答与非应答）告诉主机/从机是否接收到数据。如果不需要再接收数据发送NACK即可，如果需要继续接收数据发送ACK。</p></li><li><p>SR标志通常在IIC协议中的数据传输阶段使用，用于指示要发送一个新的数据传输请求。在IIC通信中，当主设备需要与从设备进行数据传输时，它会先发送一个起始信号，然后发送从设备地址，以及要读取或写入的数据。如果在数据传输过程中需要与另一个从设备进行通信，则可以使用SR标志发送重复的起始信号，而不必发送停止信号。这样可以减少通信的时间和复杂性，提高IIC通信的效率。</p></li><li><p>当所有数据帧都传输完毕如果不需要传输任何数据了，则将SDA拉高结束通讯发送一个停止标识符。<br><img src="https://blog.jamiexu.cn/img/20230422-1-6.png"></p></li></ul><h1 id="EEPROM的认识与介绍"><a href="#EEPROM的认识与介绍" class="headerlink" title="EEPROM的认识与介绍"></a>EEPROM的认识与介绍</h1><h2 id="存储器的认识"><a href="#存储器的认识" class="headerlink" title="存储器的认识"></a>存储器的认识</h2><p><img src="https://blog.jamiexu.cn/img/20230422-1-7.png"></p><ul><li><p>存储器的分类：</p><ol><li>易失性存储器是指在断电或者电源关闭的情况下会丢失数据的存储器，即当电源断电时，存储在其中的数据会立即消失。易失性存储器通常用于计算机的临时存储器，如随机存储器（RAM），它可以很快地读取和写入数据，但一旦电源关闭，存储在其中的数据就会被清除。</li><li>非易失性存储器则是在断电或电源关闭的情况下仍能保持数据的存储器。它们可以长期存储数据，如硬盘驱动器（HDD）和固态硬盘（SSD）等，这些存储器通常用于存储操作系统、应用程序和用户数据等重要信息</li></ol></li><li><p>由于一般易失性存储器存取速度快，而非易失性存储器可长期保存数据， 它们都在计算机中占据着重要角色</p></li></ul><h3 id="易失性存储器——RAM"><a href="#易失性存储器——RAM" class="headerlink" title="易失性存储器——RAM"></a>易失性存储器——RAM</h3><h4 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h4><ul><li><p>DRAM是动态随机存取存储器（Dynamic Random Access Memory）的缩写，是一种计算机内存技术。它是计算机中最常用的主存储器之一，用于存储CPU需要使用的数据和程序。DRAM是一种易失性存储器，这意味着它需要定期刷新以保持存储的数据，否则数据将会丢失。</p></li><li><p>DRAM的原理是通过电容器存储电荷来表示存储的数据。每个DRAM存储单元由一个电容器和一个开关构成。当电容器充电时，表示存储的数据为1，否则为0。为了读取存储的数据，DRAM需要将电荷从电容器中读取出来，这需要消耗一定的时间。</p></li><li><p>由于DRAM存储单元的电容器是易失性的，因此需要定期刷新以保持数据的完整性。DRAM芯片通常会有一个控制器，用于定期刷新存储单元中的电容器。此外，为了提高访问速度，DRAM存储单元通常会按行排列，以便可以一次性读取或写入一整行数据。<br><img src="https://blog.jamiexu.cn/img/20230422-1-8.png"></p></li><li><p>根据DRAM通讯方式又分同步与异步通讯。这两种通讯主要根据是否是时钟信号控制来区别。如果需要时钟信号上升沿的时候才能写入数据那么就是同步通讯，异步通信是不需要时钟线控制的。使用同步通讯的速度更快，所以更广泛使用，这种同步通讯DRAM被称为SDRAM（Synchronous Dynamic Random Access Memory）<br><img src="https://blog.jamiexu.cn/img/20230422-1-9.png"></p></li></ul><h4 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h4><ul><li>SRAM是静态随机存取器（Static Random Access Memory）的缩写。它和上面的的区别就是它不是使用电容来存储数据的，而是使用逻辑门组成的锁存器。这种电路不需要一直刷新也可以保存数据，但是掉电后数据依旧会丢失。<br><img src="https://blog.jamiexu.cn/img/20230422-1-10.png"></li></ul><h4 id="DDRAM"><a href="#DDRAM" class="headerlink" title="DDRAM"></a>DDRAM</h4><ul><li><p>DDRAM（Double Data Rate Random Access Memory）是SDRAM中的一种，他与SDRAM的区别是SDRAM只有在上升沿的时候才能读写，一个时钟周期只能读写一个Bit，而DDRAM可以在上升沿和下降沿都可以读写。也就是说一个时钟周期可以读写2Bit的数据是SRAM的双倍率</p></li><li><p>但其速度仍然无法满足高端计算机和服务器的需求。随着技术的不断发展，后续的DDR内存逐渐出现，包括DDR2，DDR3，DDR4和DDR5。这些内存有以下不同之处：</p><ol><li> 频率： DDR，DDR2，DDR3，DDR4和DDR5的频率逐渐提高，分别为400MHz，800MHz，1600MHz，3200MHz和4800MHz。随着频率的增加，内存的数据传输速度也随之提高。</li><li> 电压： DDR，DDR2和DDR3的工作电压分别为2.5V，1.8V和1.5V，而DDR4和DDR5则分别为1.2V和1.1V。随着电压的降低，内存的功耗也相应减少。</li><li> 带宽： DDR，DDR2，DDR3，DDR4和DDR5的带宽逐渐增加，分别为3.2GB/s，12.8GB/s，25.6GB/s，51.2GB/s和76.8GB/s。随着带宽的增加，内存的数据传输速度也相应提高。</li><li> 密度： 随着技术的进步，DDR，DDR2，DDR3，DDR4和DDR5的内存密度逐渐提高，可以存储更多的数据和程序。</li></ol></li></ul><h3 id="非易失性存储器——ROM"><a href="#非易失性存储器——ROM" class="headerlink" title="非易失性存储器——ROM"></a>非易失性存储器——ROM</h3><ul><li>ROM（Read Only Memory）意思是只读存储器。由于初代的存储器都是一次性的。不具备擦除的能力，所以叫只读存储器。但由于不断地发展至今，现在的存储器都具备擦写的功能但ROM的说法一直延续至今。当代的ROM基本上都是可擦除的</li></ul><h4 id="MASK-ROM"><a href="#MASK-ROM" class="headerlink" title="MASK ROM"></a>MASK ROM</h4><ul><li><p>MASK ROM就是一种真正意义上的ROM只能写入一次并且不能擦除。它的原理就是在制造时，在晶圆上通过光刻计数形成芯片上固定的数据存储格式被称为mask，时定义了一个数据格式的模板。木板上的而数据模式由芯片设计人员确定的，并且不可更改。类似于电路板印刷的过程，将电路通过曝光映射在铜板上面。</p></li><li><p>由于Mask ROM芯片在制造过程中的数据模式是固定的，因此它的数据内容无法被更改或擦除。由于不需要在运行时编程或擦除，因此Mask ROM在一些应用领域，如嵌入式系统中得到了广泛的应用。它的优点是可靠性高，寿命长，但生产成本高，因此仅适用于需要存储大量数据且不需要更改的应用。</p></li></ul><h4 id="PROM"><a href="#PROM" class="headerlink" title="PROM"></a>PROM</h4><ul><li><p>PROM（Programmable Read-Only Memory）是一种可编程的只读存储器，他是一种通用的数字电路元件。与Mask ROM不同的是它制造后才可以写，并且只可以通过编程可以写入一次数据后不可再写只可读。</p></li><li><p>PROM的原理是利用电学原理来编程。PROM内部由一个阵列组成，每个阵列由一个开关和一个存储单元组成。存储单元通常是一个双稳态存储单元（flip-flop），用于存储一个比特（0或1）。开关通常由一个热电偶或一个快速脉冲所驱动，开关状态的改变可以改变存储单元中的值。</p></li><li><p>PROM编程时，将电压应用于特定的引脚，使它们处于特定的状态，这会烧毁内部的保护栅极，从而允许电荷在存储单元中流动，并且改变存储单元的状态。这些特定的引脚由生产商预定义，在用户购买PROM时就已经确定。一旦PROM被编程，它的数据就不能再次更改。</p></li></ul><h5 id="OTPROM"><a href="#OTPROM" class="headerlink" title="OTPROM"></a>OTPROM</h5><ul><li><p>OTPROM是一种只读存储器，全称为One-Time Programmable Read-Only Memory，即一次性可编程只读存储器。其原理是将一次编程的信息写入存储器单元中，并且在之后无法再次进行编程或擦除，因此被称为“一次性可编程”。</p></li><li><p>OTPROM的存储单元由一对互补的MOS晶体管构成，其中一个MOS晶体管的栅极是与另一个晶体管的漏极相连的。这种构造被称为“互补翻转对（complementary pair）”，可用于实现非常简单的存储单元。</p></li><li><p>在OTPROM的编程过程中，利用特殊的编程电压将存储单元中的电荷累积到栅极和漏极之间，形成氧化层中的隧道电离。这些电子被“捕获”在漏极区域中，这样就可以保留存储单元的状态。一旦信息被编程到OTPROM中，就无法再次更改或擦除。</p></li><li><p>OTPROM与EPROM（可擦除可编程只读存储器）的区别在于EPROM可以被擦除并重新编程，而OTPROM只能被编程一次。这使得OTPROM在需要固化数据或程序的应用中非常有用，例如电子设备中的BOOTLOADER程序等。</p></li></ul><h4 id="EPROM"><a href="#EPROM" class="headerlink" title="EPROM"></a>EPROM</h4><ul><li><p>EPROM是可编程只读存储器（Erasable Programmable Read-Only Memory）的缩写。它是一种存储数据的电子芯片，具有只读存储器（ROM）的特性，但它可以被编程为存储新的数据。</p></li><li><p>EPROM的工作原理是使用一个特殊的设备称为EPROM编程器来编程。编程器通过在EPROM的芯片上施加高电压，将EPROM的存储单元中的电荷量改变为特定的状态，从而存储新的数据。这些数据在EPROM被编程之后可以被读取，但是不能被再次修改。</p></li><li><p>EPROM的另一个特点是它可以被擦除。擦除可以通过将芯片曝露在紫外线下进行，这将清除芯片中存储的所有数据。擦除后，EPROM可以被重新编程以存储新的数据。</p></li><li><p>EPROM被广泛应用于嵌入式系统中，例如控制器、计算机系统等。在这些系统中，EPROM可以存储程序代码和数据，以便系统启动时读取。由于EPROM不需要外部电源来保持存储的数据，它是一种非常可靠的存储器。然而，EPROM需要使用专门的设备进行编程和擦除，这限制了它的灵活性和可重写性。</p></li></ul><h4 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h4><ul><li><p>EEPROM是可擦写可编程只读存储器（Electrically Erasable Programmable Read-Only Memory）的缩写。它与EPROM非常相似，但是可以通过电子方式进行擦写，因此更加灵活。</p></li><li><p>EEPROM的工作原理是通过在芯片中施加电压来改变存储单元中的电荷量，从而存储数据。与EPROM不同的是，EEPROM的擦除是通过将电荷量逆转而不是使用紫外线进行的。EEPROM具有非常高的可重写性，因为它可以被多次擦写和编程，而无需任何外部设备。</p></li><li><p>EEPROM被广泛应用于存储数据和配置信息，例如BIOS设置和计算机外围设备的配置信息。由于EEPROM可以被多次擦写和编程，它非常适合需要频繁更新的应用程序。然而，EEPROM相对于其他存储器类型来说速度较慢，并且相对较昂贵。</p></li></ul><h3 id="非易失性存储器——FLASH"><a href="#非易失性存储器——FLASH" class="headerlink" title="非易失性存储器——FLASH"></a>非易失性存储器——FLASH</h3><ul><li><p>FLASH存储器又称为闪存，它也是可重复擦写的储器，部分书籍会把FLASH存储器称为FLASH ROM，但它的容量一般比EEPROM大得多， 且在擦除时，一般以多个字节为单位。如有的FLASH存储器以4096个字节为扇区，最小的擦除单位为一个扇区。根据存储单元电路的不同， FLASH存储器又分为NOR FLASH和NAND FLASH</p></li><li><p>NOR与NAND的共性是在数据写入前都需要有擦除操作，而擦除操作一般是以“扇区/块”为单位的。 而NOR与NAND特性的差别，主要是由于其内部“地址/数据线”是否分开导致的。</p></li></ul><p><img src="https://blog.jamiexu.cn/img/20230422-1-11.png"><br><img src="https://blog.jamiexu.cn/img/20230422-1-12.png">- 由于NOR的地址线和数据线分开，它可以按“字节”读写数据，符合CPU的指令译码执行要求，所以假如NOR上存储了代码指令， CPU给NOR一个地址，NOR就能向CPU返回一个数据让CPU执行，中间不需要额外的处理操作。</p><ul><li><p>而由于NAND的数据和地址线共用，只能按“块”来读写数据，假如NAND上存储了代码指令，CPU给NAND地址后， 它无法直接返回该地址的数据，所以不符合指令译码要求。 表 <a href="https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/storage.html#nor-flashnand-flash">NOR_FLASH与NAND_FLASH特性对比</a> 中的最后一项“是否支持XIP”描述的就是这种立即执行的特性(eXecute In Place)。</p></li><li><p>若代码存储在NAND上，可以把它先加载到RAM存储器上，再由CPU执行。所以在功能上可以认为NOR是一种断电后数据不丢失的RAM， 但它的擦除单位与RAM有区别，且读写速度比RAM要慢得多。</p></li><li><p>另外，FLASH的擦除次数都是有限的(现在普遍是10万次左右)，当它的使用接近寿命的时候，可能会出现写操作失败。 由于NAND通常是整块擦写，块内有一位失效整个块就会失效，这被称为坏块，而且由于擦写过程复杂，从整体来说NOR块块更少， 寿命更长。由于可能存在坏块，所以FLASH存储器需要“探测/错误更正(EDC/ECC)”算法来确保数据的正确性。</p></li><li><p>由于两种FLASH存储器特性的差异，NOR FLASH一般应用在代码存储的场合，如嵌入式控制器内部的程序存储空间。 而NAND FLASH一般应用在大数据量存储的场合，包括SD卡、U盘以及固态硬盘等，都是NAND FLASH类型的。</p></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="24C02C"><a href="#24C02C" class="headerlink" title="24C02C"></a>24C02C</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>24C02C是一个2K bit串行EEPROM，工作电压范围4.5V ~ 5.5V。单个数据块由256 x 8-bit组成，具有两根串行线。</li></ul><h3 id="管脚描述"><a href="#管脚描述" class="headerlink" title="管脚描述"></a>管脚描述</h3><p><img src="https://blog.jamiexu.cn/img/20230422-1-13.png"></p><ul><li>A0, A1, A2：用于设置设备的IIC地址，采用7Bit的地址，且MSB固定为1010，LSB可根据A0 ~ A2的设置决定</li><li><img src="https://blog.jamiexu.cn/img/20230422-1-14.png"></li><li>VSS：Groud</li><li>SDA：串行输入输出接口</li><li>SCL：串行时钟</li><li>WP：写保护输入，用于设置EEPROM的写入权限，当WP接入VCC（高电平）的时候可写，当WP接入VSS（低电平）的时候不可写。</li><li>VCC：供电电源，+4.5V ~ 5.5V</li></ul><h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h3><h4 id="字节读写"><a href="#字节读写" class="headerlink" title="字节读写"></a>字节读写</h4><ul><li>建立通讯后写入需要写数据的寄存器地址，随后将一个字节的数据写入。<br><img src="https://blog.jamiexu.cn/img/20230422-1-15.png"></li></ul><h4 id="页读写"><a href="#页读写" class="headerlink" title="页读写"></a>页读写</h4><ul><li>建立通讯后写入需要写数据的寄存器地址，随后将需要写入的数据连续写入即可完成页写入<br><img src="https://blog.jamiexu.cn/img/20230422-1-16.png"></li></ul><h2 id="Proteus仿真搭建。"><a href="#Proteus仿真搭建。" class="headerlink" title="Proteus仿真搭建。"></a>Proteus仿真搭建。</h2><p><img src="https://blog.jamiexu.cn/img/20230422-1-17.png"></p><h2 id="STM32实践"><a href="#STM32实践" class="headerlink" title="STM32实践"></a>STM32实践</h2><ul><li><p>通常情况下，使用STM32模拟I2C时序时，需要将SCL和SDA引脚设置为开漏输出。这是因为I2C总线是一个多主机系统，即多个主设备可以同时访问同一I2C总线。在这种情况下，如果一个主设备试图将I2C总线上的数据线拉低，而另一个主设备试图将数据线拉高，则会发生电平冲突。为了避免这种情况的发生，需要将SCL和SDA引脚设置为开漏输出，这意味着输出信号只能拉低，而不能拉高。</p></li><li><p>在STM32上，可以通过将GPIO引脚的输出模式设置为GPIO_MODE_AF_OD来将其配置为开漏输出。需要注意的是，开漏输出时需要使用外部上拉电阻来将引脚拉高。此外，还需要在初始化时设置GPIO的速度和GPIO的上拉电阻，以确保I2C总线的时序符合标准。</p></li><li><p>根据24C02C的数据手册知道，地址码MSB固定，LSB根据Proteus仿真图得知。那么设备地址当进行写操作的时候是10100000=0xA0，如果进行读操作就是10100001=0xA1</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCK(x) (x) ? (GPIOB-&gt;BSRR = GPIO_Pin_6) : (GPIOB-&gt;BRR = GPIO_Pin_6)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA(x) (x) ? (GPIOB-&gt;BSRR = GPIO_Pin_7) : (GPIOB-&gt;BRR = GPIO_Pin_7)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_READ GPIOB-&gt;IDR &amp; GPIO_Pin_7</span></span><br><span class="line"></span><br><span class="line">u8 LED_SEG[<span class="number">16</span>]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x7c</span>,<span class="number">0x39</span>,<span class="number">0x5e</span>,<span class="number">0x79</span>,<span class="number">0x71</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">GPIOx_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStr;</span><br><span class="line">    </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitStr.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">    GPIO_InitStr.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">    GPIO_InitStr.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStr);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitStr.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStr.GPIO_Pin = GPIO_Pin_All;</span><br><span class="line">    GPIO_InitStr.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_Ms</span><span class="params">(u32 ms)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(u32 i = <span class="number">0</span>;i&lt;ms;i++)</span><br><span class="line">        <span class="keyword">for</span>(u32 j = <span class="number">0</span>;j&lt;<span class="number">1000</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    SCK(<span class="number">1</span>);</span><br><span class="line">    SDA(<span class="number">1</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    SDA(<span class="number">0</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    SCK(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Write</span><span class="params">(u8 data)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (u8 i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp; <span class="number">0x80</span>)</span><br><span class="line">            SDA(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SDA(<span class="number">0</span>);</span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        SCK(<span class="number">1</span>);</span><br><span class="line">        Delay_Ms(<span class="number">1</span>);</span><br><span class="line">        SCK(<span class="number">0</span>);</span><br><span class="line">        Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">IIC_Read</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    u8 data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(u8 i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        SCK(<span class="number">1</span>);</span><br><span class="line">        Delay_Ms(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (SDA_READ)</span><br><span class="line">            data |= <span class="number">1</span>;</span><br><span class="line">        SCK(<span class="number">0</span>);</span><br><span class="line">        Delay_Ms(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_ACK_Write</span><span class="params">(u8 ack)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ack)</span><br><span class="line">        SDA(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        SDA(<span class="number">0</span>);</span><br><span class="line">    SCK(<span class="number">1</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    SCK(<span class="number">0</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">IIC_ACK_Read</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    u8 ack = <span class="number">0</span>;</span><br><span class="line">    SCK(<span class="number">1</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    ack = SDA_READ;</span><br><span class="line">    SCK(<span class="number">0</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ack ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    SDA(<span class="number">0</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    SCK(<span class="number">1</span>);</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">    SDA(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">M24C02C_Write</span><span class="params">(u8 addr, u8 data)</span>&#123;</span><br><span class="line">    IIC_Start();</span><br><span class="line">    IIC_Write(<span class="number">0xA0</span>);</span><br><span class="line">    <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">        IIC_Write(addr);</span><br><span class="line">        <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">            IIC_Write(data);</span><br><span class="line">            <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">                IIC_Stop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">M24C02C_Page_Write</span><span class="params">(u8 addr, u8 *data, u8 len)</span>&#123;</span><br><span class="line">    IIC_Start();</span><br><span class="line">    IIC_Write(<span class="number">0xA0</span>);</span><br><span class="line">    <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">        IIC_Write(addr);</span><br><span class="line">        <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (u8 i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">               IIC_Write(*data);</span><br><span class="line">               <span class="keyword">if</span> (IIC_ACK_Read())</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               data++;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">M24C02C_Read</span><span class="params">(u8 addr)</span>&#123;</span><br><span class="line">    u8 data = <span class="number">0</span>;</span><br><span class="line">    IIC_Start();</span><br><span class="line">    IIC_Write(<span class="number">0xA0</span>);</span><br><span class="line">    <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">        IIC_Write(addr);</span><br><span class="line">        <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">            IIC_Start();</span><br><span class="line">            IIC_Write(<span class="number">0xA1</span>);</span><br><span class="line">            <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">                data = IIC_Read();</span><br><span class="line">                IIC_ACK_Write(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_Stop();</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">M24C02C_Page_Read</span><span class="params">(u8 addr, u8 *data, u8 len)</span>&#123;</span><br><span class="line">    IIC_Start();</span><br><span class="line">    IIC_Write(<span class="number">0xA0</span>);</span><br><span class="line">    <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">        IIC_Write(addr);</span><br><span class="line">        <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">            IIC_Start();</span><br><span class="line">            IIC_Write(<span class="number">0xA1</span>);</span><br><span class="line">            <span class="keyword">if</span> (IIC_ACK_Read() == <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">for</span> (u8 i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                    data[i] = IIC_Read();</span><br><span class="line">                    IIC_ACK_Write(<span class="number">0</span>);</span><br><span class="line">                    </span><br><span class="line">               &#125;</span><br><span class="line">               IIC_ACK_Write(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Show</span><span class="params">(u8 pos, u8 num)</span>&#123;</span><br><span class="line">    GPIOA-&gt;ODR = LED_SEG[num % <span class="number">16</span>] | (~(GPIO_Pin_8 &lt;&lt; pos)) &amp; <span class="number">0xFF00</span>;</span><br><span class="line">    Delay_Ms(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    u8 buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    u8 data[<span class="number">3</span>] = &#123;<span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>&#125;;</span><br><span class="line">    GPIOx_Init();</span><br><span class="line">    M24C02C_Write(<span class="number">0x00</span>, <span class="number">0x0A</span>);</span><br><span class="line">    M24C02C_Page_Write(<span class="number">0x01</span>, data, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    buffer[<span class="number">0</span>] = M24C02C_Read(<span class="number">0x00</span>);</span><br><span class="line">    buffer[<span class="number">1</span>] = M24C02C_Read(<span class="number">0x01</span>);</span><br><span class="line">    buffer[<span class="number">2</span>] = M24C02C_Read(<span class="number">0x02</span>);</span><br><span class="line">    buffer[<span class="number">3</span>] = M24C02C_Read(<span class="number">0x03</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    M24C02C_Page_Read(0x00, buffer, 4);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        LED_Show(<span class="number">3</span>, buffer[<span class="number">0</span>]);</span><br><span class="line">        LED_Show(<span class="number">2</span>, buffer[<span class="number">1</span>]);</span><br><span class="line">        LED_Show(<span class="number">1</span>, buffer[<span class="number">2</span>]);</span><br><span class="line">        LED_Show(<span class="number">0</span>, buffer[<span class="number">3</span>]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将程序编译后运行，可以看到IIC调试中显示了每次读写的数据帧。<ol><li>写单个数据的数据帧，S是起始信号，而A0 A 00 A 0A A是每次写的数据和ACK应答，最后面P是结束信号</li><li>写页数据，和上面一样。但是数据帧多了几个数据。这是根据上面24C02C的时序图执行多个数据的写入</li><li>随机读取数据，数据帧和上面一样。但是读取完后需要恢复一个NACK非应答信号<br><img src="https://blog.jamiexu.cn/img/20230422-1-18.png"></li></ol></li></ul><h1 id="参考文献及内容引用"><a href="#参考文献及内容引用" class="headerlink" title="参考文献及内容引用"></a>参考文献及内容引用</h1><p><a href="https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/I2C.html">野火——STM32库开发指南24.1</a><br><a href="https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/storage.html">野火——STM32库开发指南23.1</a><br><a href="http://ww1.microchip.com/downloads/en/DeviceDoc/21202j.pdf">24C02C Datasheet</a><br><a href="https://space.bilibili.com/395188578/search/video?keyword=%E5%9B%BA%E6%80%81">爱上半导体</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IIC协议的通讯过程&quot;&gt;&lt;a href=&quot;#IIC协议的通讯过程&quot; class=&quot;headerlink&quot; title=&quot;IIC协议的通讯过程&quot;&gt;&lt;/a&gt;IIC协议的通讯过程&lt;/h1&gt;&lt;h2 id=&quot;IIC的介绍&quot;&gt;&lt;a href=&quot;#IIC的介绍&quot; class=&quot;</summary>
      
    
    
    
    <category term="单片机" scheme="https://blog.jamiexu.cn/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="STM32" scheme="https://blog.jamiexu.cn/tags/STM32/"/>
    
    <category term="Proteus" scheme="https://blog.jamiexu.cn/tags/Proteus/"/>
    
  </entry>
  
  <entry>
    <title>【ESP32 &amp; Arduino】ESP32入门之环境安装</title>
    <link href="https://blog.jamiexu.cn/2022/11/23/%E3%80%90ESP32%20&amp;%20Arduino%E3%80%91ESP32%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B9%8B%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E9%A2%97LED/"/>
    <id>https://blog.jamiexu.cn/2022/11/23/%E3%80%90ESP32%20&amp;%20Arduino%E3%80%91ESP32%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B9%8B%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E9%A2%97LED/</id>
    <published>2022-11-23T14:36:00.000Z</published>
    <updated>2022-11-24T02:08:22.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近准备学ESP32，于是乎在淘宝愉快的买了一个板子ESP-WROOM-32。买回来正准备对其进行编程。嵌入式入门第一步点一个灯。但是点灯过程中遇到了很多问题。现在就把遇到的问题做一个总结。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><ul><li><p>在板子到了后第一件事就是插入电脑进行烧写测试，但是在Arduino中无法识别出端口号。于是乎打开了设备管理器一看，发现的确少了个驱动<code>CP2102 USB to USART Bridge Controller</code>。这个驱动是用于USB转TTL的。<br><img src="https://s2.loli.net/2022/11/23/MVrCmkZEjJeq3dp.png"></p></li><li><p>到<a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads">官网</a>下载对应的驱动文件，这里我以Win10为例<br><img src="https://s2.loli.net/2022/11/23/eq9sWcjpfg5taEC.png"></p></li><li><p>下载后解压，双击对应的平台。进行安装<br><img src="https://s2.loli.net/2022/11/23/NHLsBKOv8dR3w7g.png"></p></li></ul><h3 id="Arduino安装"><a href="#Arduino安装" class="headerlink" title="Arduino安装"></a>Arduino安装</h3><ul><li><p>到<a href="https://www.arduino.cc/en/software">Arduino官网</a>下载对应的版本<br><img src="https://s2.loli.net/2022/11/23/KnNGv8aYrdcEgZH.png"></p></li><li><p>下载后的打开然后按照自己的喜好安装。</p></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>前面是软件的安装基本没什么难度，接下来配置一下Arduino开发ESP32。首先去到<a href="https://www.espressif.com/zh-hans/products/socs/esp32">ESP32官网</a><img src="https://s2.loli.net/2022/11/23/SmIYqfXHkTjbyF4.png">]。然后会跳转到<a href="https://github.com/espressif/arduino-esp32">Github</a>找到列表中的<code>package.json</code>并点击跳转后复制链接。<a href="https://github.com/espressif/arduino-esp32/blob/master/package.json">https://github.com/espressif/arduino-esp32/blob/master/package.json</a><br><img src="https://s2.loli.net/2022/11/23/SmIYqfXHkTjbyF4.png"><br><img src="https://s2.loli.net/2022/11/23/hl2TApfbxZWa3C5.png"></p></li><li><p>打开Arduino，文件=&gt;选项<br><img src="https://s2.loli.net/2022/11/23/FfR26pKVI9wbrQ1.png"></p></li><li><p>将刚刚复制的链接添加上去，一个链接一行。等待包都下载完成。<br><img src="https://s2.loli.net/2022/11/23/Ex6KvbgwyO2ZVms.png"></p></li><li><p>依次点开Tools=&gt;Board=&gt;Board Manager打开板子管理，快捷键<code>Ctrl+Shift+B</code>。输入ESP32并点击安装。如果没有重启一下软件。<br><img src="https://s2.loli.net/2022/11/23/jPuDRYEqb5tpVXZ.png"></p></li><li><p>安装后就可以开始写ESP32了。<br><img src="https://s2.loli.net/2022/11/23/1OCs4elNH3hfIRX.png"></p></li><li><p>安装好后在Arduino中可以看到官方的例子<br><img src="https://s2.loli.net/2022/11/23/j6KMpwSdaheQP2Z.png"></p></li></ul><h2 id="嵌入式专业电灯大师"><a href="#嵌入式专业电灯大师" class="headerlink" title="嵌入式专业电灯大师"></a>嵌入式专业电灯大师</h2><ul><li>在软件入门第一步都是<code>Hello World</code>，在硬件也有类似的那就是电灯。下面来点个灯测试一下。</li><li>首先点击左上角选择板子<br><img src="https://s2.loli.net/2022/11/24/ysrvSauzlHwJEQo.png"></li><li>根据商家给定的原理图，设置管脚模式和电平<br><img src="https://s2.loli.net/2022/11/24/CBu1GajUVpoPSEx.png"></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line"></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(T2, OUTPUT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(T2, HIGH);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>烧录，成功点亮LED<br><img src="https://s2.loli.net/2022/11/24/ugxW6EjMSOb7Cys.png"></p></li><li><p>关于ESP32的Arduino的SDK教程没有找到官方的，只找到了官方Github上的<a href="https://github.com/espressif/arduino-esp32/tree/master/docs/source/api">API</a></p></li><li><p>如果你找到了也可以告诉我来帮助我更快入门学习ESP32</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最近准备学ESP32，于是乎在淘宝愉快的买了一个板子ESP-WROOM-32。买回来正准备对其进行编程。嵌入式入门第一步点一个灯</summary>
      
    
    
    
    <category term="单片机" scheme="https://blog.jamiexu.cn/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="ESP32" scheme="https://blog.jamiexu.cn/tags/ESP32/"/>
    
    <category term="Arduino" scheme="https://blog.jamiexu.cn/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>【MCU51&amp;74HC165】使用74HC165移位寄存器实现矩阵键盘的扫描</title>
    <link href="https://blog.jamiexu.cn/2022/10/08/%E3%80%90MCU51&amp;74HC165%E3%80%91%E4%BD%BF%E7%94%A874HC165%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98%E7%9A%84%E6%89%AB%E6%8F%8F/"/>
    <id>https://blog.jamiexu.cn/2022/10/08/%E3%80%90MCU51&amp;74HC165%E3%80%91%E4%BD%BF%E7%94%A874HC165%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98%E7%9A%84%E6%89%AB%E6%8F%8F/</id>
    <published>2022-10-08T09:35:00.000Z</published>
    <updated>2022-10-08T14:22:43.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><ul><li>在闲暇的时候逛B站发现某UP使用了移位寄存器实现1*N矩阵键盘，就想着蛮简单的自己也动手弄一弄才发现踩的坑还挺多的。</li><li>今天就从图的设计到程序的编写来实现</li><li>今天所使用的单片机型号是MCU51，至于为什么不用STM32等其他主流主控芯片。因为懒的配置GPIO。直接修改寄存器就好了。但是其他单片机也是一样的方法</li></ul><h2 id="需要准备的工具"><a href="#需要准备的工具" class="headerlink" title="需要准备的工具"></a>需要准备的工具</h2><ul><li>Proteus主要用于仿真</li><li>Keil5主要用于开发编写程序</li><li>74HC165芯片手册</li></ul><h2 id="芯片手册分析"><a href="#芯片手册分析" class="headerlink" title="芯片手册分析"></a>芯片手册分析</h2><ul><li><p>打开芯片手册就可以直接的看到芯片的基本功能<br><img src="https://s2.loli.net/2022/10/08/Bx1pbteynTHrqYv.png"></p></li><li><p>该芯片工作电压在2v ~ 6v</p></li><li><p>并行输入转串行输出</p></li><li><p>主要应用在 视频的驱动，输出扩展，和今天要做的矩阵键盘</p></li><li><p>内部逻辑图</p></li><li><p>从图中可以看出使用的是RS锁存器进行数据的存储<br><img src="https://s2.loli.net/2022/10/08/Ms56LrOjW2EG4Ry.png"></p></li><li><p>前面的了解一下即可，重要的还是芯片的管脚</p></li><li><p>可以从下图看到每个管脚对应的作用<img src="https://s2.loli.net/2022/10/08/8FK76PAoEaUcICx.png"></p></li><li><p>A-G：并行输入端</p></li><li><p>SER：串行输入端</p></li><li><p>Qh：串行输出端</p></li><li><p>Vcc：电源</p></li><li><p>GND：地线</p></li><li><p>CLK：时钟信号</p></li></ul><ul><li>芯片的真值表也是很重要的</li><li>真值表可以让我们编写程序来操作芯片工作<img src="https://s2.loli.net/2022/10/08/ihZKsmC42BtxTk6.png"></li></ul><h2 id="仿真部分"><a href="#仿真部分" class="headerlink" title="仿真部分"></a>仿真部分</h2><ul><li><p>仿真使用的是Proteus，从芯片手册可以看到如果需要使用时钟上升沿当作移位信号那么<code>CLK INH</code>就直接接地即可。下面是Proteus的连接</p></li><li><p>画叉叉的地方就是一个多输出端的电阻<br><img src="https://s2.loli.net/2022/10/08/sibLd8mx7OhQ4WI.png"></p></li><li><p>这里我将两个芯片级联了，达到扩展16个输入端。还可以不断级联扩展并且还是只需要3根线也就是说不管级联多少都只需要3个IO口读取数据</p></li><li><p>上面那个芯片的Qh连接到了<code>P10</code>口，<code>P10</code>就是数据的输入主要用来扫描寄存器里的数据</p></li><li><p>根据真值表，两个<code>INH</code>连接地线即可，用于配合工作</p></li><li><p><code>SH/LD非</code>是用来控制输入还是移位，连接到了<code>P12</code></p></li><li><p><code>CLK</code>用于控制操作芯片工作，连接到了<code>P11</code></p></li><li><p>最上面的示波器只是为了方便我们分析程序找出问题</p></li></ul><h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><ul><li><p>引入头文件和定义宏用于后面方便移植</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG51RD2.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SH_LD P1_2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLK P1_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT P1_0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> u8;</span><br></pre></td></tr></table></figure></li><li><p>主要部分，扫描键盘输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">u16 <span class="title function_">KEY_Scan</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">u8 i;</span><br><span class="line">u16 key;</span><br><span class="line">key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">1</span>; <span class="comment">//Set clock to 1</span></span><br><span class="line">SH_LD = <span class="number">0</span>; <span class="comment">//Read input</span></span><br><span class="line">SH_LD = <span class="number">1</span>; <span class="comment">// Stop reead input</span></span><br><span class="line">key |= OUT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">0</span>; <span class="comment">// Set clock to 0 to read data</span></span><br><span class="line">CLK = <span class="number">1</span>; <span class="comment">// Set clock to 1 to prefer next scan for data</span></span><br><span class="line">key &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">key |= OUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码逻辑</p><ol><li>置时钟为高电平</li><li>根据真值表设置SH/LD非获取用户输入的数据</li><li>将数据锁起来，停止用户输入</li><li>获取最高位数据存放到key中</li><li>循环依次获取每个寄存器的值放到key中，每循环一次左移1是为了不让后面的数据把当前数据替换掉。<code>CLK = 0，CLK = 1</code>是为了产生一个上升沿的信号</li><li>最后停止芯片的时钟</li><li>返回key，key存放的就是用户输入键盘的状态每一个比特位为一个按键的状态</li></ol></li><li><p>这里key我使用了一个<code>u16</code>的数据类型是因为刚好有16个按键，每个按键的状态刚好对应了每一位比特位</p></li><li><p>如果是要扩展32个按键可以使用unsigned long要是64个按键或更多按键可以使用一个unsigned long的数组存放</p></li></ul><ul><li><p>主函数，对按键状态取反是因为由于按键是低电平有效，反转后变成到高电平有效方便后期处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">u16 key = ~KEY_Scan();</span><br><span class="line"></span><br><span class="line">u8 num = KeyToNum(key);</span><br><span class="line"><span class="keyword">if</span> (num != <span class="number">-1</span>)</span><br><span class="line">LED_ShowNum(num);</span><br><span class="line">Delayms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG51RD2.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SH_LD P1_2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLK P1_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT P1_0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delayms</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125; <span class="keyword">while</span>(--x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_ShowNum</span><span class="params">(u8 num)</span>&#123;</span><br><span class="line">u8 i,j;</span><br><span class="line">i = num / <span class="number">10</span>;</span><br><span class="line">j = num % <span class="number">10</span>;</span><br><span class="line">P2 &amp;= <span class="number">0</span>;</span><br><span class="line">P2 |= j;</span><br><span class="line">P2 &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">P2 |= i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u16 <span class="title function_">KEY_Scan</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">u8 i;</span><br><span class="line">u16 key;</span><br><span class="line">key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">1</span>; <span class="comment">//Set clock to 1</span></span><br><span class="line">SH_LD = <span class="number">0</span>; <span class="comment">//Read input</span></span><br><span class="line">SH_LD = <span class="number">1</span>; <span class="comment">// Stop reead input</span></span><br><span class="line">key |= OUT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">0</span>; <span class="comment">// Set clock to 0 to read data</span></span><br><span class="line">CLK = <span class="number">1</span>; <span class="comment">// Set clock to 1 to prefer next scan for data</span></span><br><span class="line">key &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">key |= OUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">KeyToNum</span><span class="params">(u16 key)</span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (((key &gt;&gt; i) &amp; <span class="number">0x01</span>) == <span class="number">0x01</span>)</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">u16 key = ~KEY_Scan();</span><br><span class="line"></span><br><span class="line">u8 num = KeyToNum(key);</span><br><span class="line"><span class="keyword">if</span> (num != <span class="number">-1</span>)</span><br><span class="line">LED_ShowNum(num);</span><br><span class="line"></span><br><span class="line">Delayms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在闲暇的时候逛B站发现某UP使用了移位寄存器实现1*N矩阵键盘，就想着蛮简单的自己也动手弄一弄才发现踩的坑还挺多的。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="单片机" scheme="https://blog.jamiexu.cn/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="MCU51" scheme="https://blog.jamiexu.cn/tags/MCU51/"/>
    
    <category term="STC89C52" scheme="https://blog.jamiexu.cn/tags/STC89C52/"/>
    
    <category term="74HC165" scheme="https://blog.jamiexu.cn/tags/74HC165/"/>
    
  </entry>
  
  <entry>
    <title>【CTF&amp;WriteUP&amp;Re】2022强网杯 ”Reverse“ WriteUp</title>
    <link href="https://blog.jamiexu.cn/2022/08/01/%E3%80%90CTF&amp;WriteUP&amp;Re%E3%80%912022%E5%BC%BA%E7%BD%91%E6%9D%AF%20%E2%80%9DReverse%E2%80%9C%20WriteUp/"/>
    <id>https://blog.jamiexu.cn/2022/08/01/%E3%80%90CTF&amp;WriteUP&amp;Re%E3%80%912022%E5%BC%BA%E7%BD%91%E6%9D%AF%20%E2%80%9DReverse%E2%80%9C%20WriteUp/</id>
    <published>2022-08-01T09:00:00.000Z</published>
    <updated>2022-08-01T04:01:47.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022强网杯-”Reverse“-WP"><a href="#2022强网杯-”Reverse“-WP" class="headerlink" title="2022强网杯 ”Reverse“ WP"></a>2022强网杯 ”Reverse“ WP</h1><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="1-【game】"><a href="#1-【game】" class="headerlink" title="1.【game】"></a>1.【game】</h3><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><ul><li>Android逆向分析， Android网络请求，Web数据</li></ul><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><ul><li><p>下载程序解压，发现是”ab”结尾的文件推测是安卓备份文件，用010Editor打开看一下，发现有明显的标识 ”ANDROID BACKUP“ 。</p></li><li><p>直接用<a href="https://github.com/nelenkov/android-backup-extractor">android-backup-extractor</a>提取出数据<img src="https://s2.loli.net/2022/07/31/tfu58JISmWVoNCT.png"></p></li><li><p>提取之后发现有两个文件其中一个是apk文件直接用Jeb打开apk安装包 <img src="https://s2.loli.net/2022/07/31/4ZFQ7u2OEt6DXgs.png"></p></li><li><p>打开Manifest清单文件找到启动Act直接双击，tab键转成Java代码 <img src="https://s2.loli.net/2022/07/31/TcIEUPyBo1X2l5M.png"></p></li><li><p>根据Android生命周期可以知道onCreate是第一个启动的函数，直接找onCreate函数 <img src="https://s2.loli.net/2022/07/31/XmCAgrEvTopGiHL.png"></p></li><li><p>经过分析发现在App启动的时候会自动登录，如果登陆失败则会跳转到LoginAct，否则跳转到MainAct<img src="https://s2.loli.net/2022/07/31/ivkRaKQENzw2P17.png"></p></li><li><p>本想跟进autoLogin查看是如何登录的，结果发现了关键字眼函数”getFlag“<img src="https://s2.loli.net/2022/07/31/ROtGr3IzvifDpNx.png"></p></li><li><p>那就先分析getFlag，发现需要传入三个参数然后通过发包获取Flag。根据后面的Api.class发现远程文件名<img src="https://s2.loli.net/2022/07/31/J97az3Votfdhs5Q.png"></p></li><li><p>文件名搞到手了，剩下的是远程服务器地址了。直接暴力搜索http，找到了远程地址<img src="https://s2.loli.net/2022/07/31/6cuswZNkAYUfLre.png"></p></li><li><p>根据<code>getFlag</code>可知，需要获取Flag就需要传入三个参数，分别是：</p><ul><li>code</li><li>account</li><li>username</li></ul></li><li><p>尝试随便填看看服务器返回的结果发现不允许。</p></li><li><p>发现App可以注册，直接注册一个账号再尝试发现不行<img src="https://s2.loli.net/2022/07/31/Pe58IaXJWjlmu71.png"></p></li><li><p>猜测可能需要用到管理员的账号才可以，尝试获取管理员账号。打开App发现有个排行榜。有个名为 “admin” 的账号积分刚好是9999。根据Game页面中的提示 ”获得超过9999分能获得Flag哦!“<img src="https://s2.loli.net/2022/07/31/FaIOWt8DES6ULKP.jpg"></p></li><li><p>推测应该是管理员用户名，但是getFlag需要三个参数。剩下两个参数。从刚刚的Api中可以找到一个<code>ScoreBoard.php</code>的请求文件并且还是GET方法。直接用Postman请求查看是否有数据在排行榜上没显示出来。</p></li><li><p>发现有好几个admin， 根据排行榜显示的数据。找到排行榜best(最佳)是9999的，发现其code是”123125“<img src="https://s2.loli.net/2022/07/31/LIMsZ21KDYnkHTF.png"></p></li><li><p>第二个参数到手，第三个参数一样的方法去其他Api中看看是否能获取到。经过分析发现有个<code>AddFriend</code>只需要传入一个参数<code>code</code>即可。尝试用Postman对其发包。获取到两个参数分别是</p><ul><li>account</li><li>username</li></ul></li><li><p>然而两个参数都加密了。<img src="https://s2.loli.net/2022/07/31/b96WJcMItwDpVTZ.png"><br><img src="https://s2.loli.net/2022/07/31/qmB8JzicprntvhT.png"></p></li><li><p>分析发现在登录和注册的时候实在本地进行了数据的加密。双击到<code>OooOoo0</code><img src="https://s2.loli.net/2022/07/31/6tA9ZE4CHwLkxIe.png"><img src="https://s2.loli.net/2022/07/31/G2sephW5OvlK4Hy.png"></p></li><li><p>发现有解密操作，但再跟进<code>OooooOOo</code>发现其是native函数。但不影响操作<img src="https://s2.loli.net/2022/07/31/LagTdR9ovFqs1nj.png"><img src="https://s2.loli.net/2022/07/31/jc6W3exynBOfoNz.png"></p></li><li><p>直接把apk的dex2jar后需要的class保留其余全部删了。新建一个AndroidStudio工程直接把jar和so文件导入AS调用函数解密。</p></li><li><p>编译后发现无法解密<img src="https://s2.loli.net/2022/07/31/Fo65ibyATzBP8h7.png"></p></li><li><p>直接上动态调试，用工具把apk中Manifest文件中的debuggable改成true。</p></li><li><p>再用<a href="https://github.com/iBotPeaches/Apktool">Apktiool</a>对apk反汇编成smali</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apktool.jar d FilePath</span><br></pre></td></tr></table></figure></li><li><p>反编译后用AndroidStudio打开，定位到关键地方下断点<img src="https://s2.loli.net/2022/07/31/TkmwAtJslfxuYK8.png"></p></li><li><p>adb调试模式启动apk<img src="https://s2.loli.net/2022/07/31/oPwk6dTvhHNZjGM.png"></p></li><li><p>AS对其附加</p></li><li><p><img src="https://s2.loli.net/2022/07/31/EhvgxCnQmLV56jk.png"><br><img src="https://s2.loli.net/2022/07/31/Od5PGCo9ixHuyeU.png"></p></li><li><p>待断点断下后，把刚刚AddFriend返回的两个数据分别复制<br><img src="https://s2.loli.net/2022/07/31/bSpVHq9vFKeWcT8.png"></p></li><li><p>按F2修改p0寄存器，按F9运行断在了String实例化后</p></li><li><p>根据smali指令<code>return-object v0</code>得知实例化后数据放在了v0寄存器。v0寄存器就是我们需要的数据直接复制备用<br><img src="https://s2.loli.net/2022/07/31/3JF5VEcjiwug64H.png"><br><img src="https://s2.loli.net/2022/07/31/TsIhaw84CnuvdSc.png"></p></li><li><p>根据同样的方法得出username，其实不需要解密username因为刚刚的排行榜就已经显示了</p></li><li><p><img src="https://s2.loli.net/2022/07/31/6wzYe4EnpsvqVhr.png"></p></li><li><p>经过一系列的操作后得到以下数据：</p><ul><li>code: 123125</li><li>account: &amp;Od987$2sPa?&gt;l&lt;k^j</li><li>username: admin</li></ul></li><li><p>直接发包到<code>GetFlag.php</code>得到Flag</p></li><li><p><img src="https://s2.loli.net/2022/07/31/En92mUQfKMxVTzk.png"></p></li></ul><h3 id="2-【GameMaster】"><a href="#2-【GameMaster】" class="headerlink" title="2. 【GameMaster】"></a>2. 【GameMaster】</h3><h4 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h4><ul><li>C#程序的逆向，PE文件结构，程序逻辑分析</li></ul><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><ul><li><p>用IDA打开发现是.NET架构的程序，直接使用dnSpy打开程序。找到<code>Main</code>函数。发现读取了一个文件</p></li><li><p>读取文件字节流存放到了Program.memory全局变量里面<img src="https://s2.loli.net/2022/07/31/9RxJLEp68fkb2IV.png"></p></li><li><p>直接点击Program，使用搜索功能全词匹配模式搜索memory，发现有两个地方使用了该变量</p></li><li><p>将memory的数据异或解密存放回memory中<img src="https://s2.loli.net/2022/07/31/ashSU5Li1I86VlA.png"></p></li><li><p>将数据进行解密放到Program.m中<br><img src="https://s2.loli.net/2022/07/31/9MpTZwNlRbuVKnY.png"></p></li><li><p>将m中的数据反序列化加载<img src="https://s2.loli.net/2022/07/31/2t9vGDXRgoThKcV.png"></p></li><li><p>根据代码中的AchivePoint推断出执行顺序，直接上c#写代码对文件进行解密</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See https://aka.ms/new-console-template for more information</span></span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"><span class="built_in">byte</span>[] memory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x04000002 RID: 2</span></span><br><span class="line"><span class="built_in">byte</span>[] m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] key = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">66</span>,</span><br><span class="line"><span class="number">114</span>,</span><br><span class="line"><span class="number">97</span>,</span><br><span class="line"><span class="number">105</span>,</span><br><span class="line"><span class="number">110</span>,</span><br><span class="line"><span class="number">115</span>,</span><br><span class="line"><span class="number">116</span>,</span><br><span class="line"><span class="number">111</span>,</span><br><span class="line"><span class="number">114</span>,</span><br><span class="line"><span class="number">109</span>,</span><br><span class="line"><span class="number">105</span>,</span><br><span class="line"><span class="number">110</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">33</span>,</span><br><span class="line"><span class="number">33</span>,</span><br><span class="line"><span class="number">33</span></span><br><span class="line">&#125;;</span><br><span class="line">ICryptoTransform cryptoTransform = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">&#123;</span><br><span class="line">Key = key,</span><br><span class="line">Mode = CipherMode.ECB,</span><br><span class="line">Padding = PaddingMode.Zeros</span><br><span class="line">&#125;.CreateDecryptor();</span><br><span class="line"></span><br><span class="line">FileStream file = File.OpenRead(<span class="string">&quot;gamemessage&quot;</span>);</span><br><span class="line"><span class="built_in">int</span> len = (<span class="built_in">int</span>)file.Length;</span><br><span class="line">memory = <span class="keyword">new</span> <span class="built_in">byte</span>[len];</span><br><span class="line"></span><br><span class="line">file.Position = <span class="number">0</span>;</span><br><span class="line">file.Read(memory, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">byte</span>[len];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">m[i] = (<span class="built_in">byte</span>)(memory[i] ^ <span class="number">34</span>);</span><br><span class="line"></span><br><span class="line">m = cryptoTransform.TransformFinalBlock(m, <span class="number">0</span>, m.Length);</span><br><span class="line"></span><br><span class="line">FileStream fileStream = File.Create(<span class="string">&quot;gamemessage2&quot;</span>);</span><br><span class="line"></span><br><span class="line">fileStream.Write(m, <span class="number">0</span>, m.Length);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用010Editor查看一下文件发现有一些字符串像是可执行文件，尝试搜索MZ头看看是否是PE文件。发现确实是PE文件。把MZ头前面的数据删去保存<img src="https://s2.loli.net/2022/07/31/XUtfQuMNznSY1Ke.png"></p></li><li><p>使用dnSpy打开刚刚的文件，发现在T1中存在Flag字眼。推测这里就是Flag<img src="https://s2.loli.net/2022/07/31/EXUpMIrv8YmnWxK.png"></p></li><li><p>经过分析发现，首先是使用<code>Check1</code>对三个变量num,num2,num3进行编码加密写入到array2中，再用first的字节流和array2的字节流进行比对</p></li><li><p>那么这里可以直接用z3得出三个变量分别是：</p><ul><li>array[0] = 156324965</li><li>array[1] = 868387187</li><li>array[2] = 3131229747<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">first = [</span><br><span class="line">    <span class="number">101</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">213</span>, <span class="number">163</span>, <span class="number">26</span>, <span class="number">59</span>, <span class="number">38</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">166</span>, <span class="number">140</span>, <span class="number">183</span>, <span class="number">42</span>, <span class="number">247</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">20</span>, <span class="number">145</span>, <span class="number">37</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">191</span>, <span class="number">110</span>, <span class="number">179</span>, <span class="number">227</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tmp = [<span class="number">0</span>] * <span class="built_in">len</span>(first)</span><br><span class="line"></span><br><span class="line">x = z3.BitVec(<span class="string">&quot;v1&quot;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">y = z3.BitVec(<span class="string">&quot;v2&quot;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">z = z3.BitVec(<span class="string">&quot;v3&quot;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line"></span><br><span class="line">    x = (((x &gt;&gt; <span class="number">29</span> ^ x &gt;&gt; <span class="number">28</span> ^ x &gt;&gt; <span class="number">25</span> ^ x &gt;&gt; <span class="number">23</span>) &amp; <span class="number">1</span>) | x &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    y = (((y &gt;&gt; <span class="number">30</span> ^ y &gt;&gt; <span class="number">27</span>) &amp; <span class="number">1</span>) | y &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    z = (((z &gt;&gt; <span class="number">31</span> ^ z &gt;&gt; <span class="number">30</span> ^ z &gt;&gt; <span class="number">29</span> ^ z &gt;&gt; <span class="number">28</span> ^ z &gt;&gt; <span class="number">26</span> ^ z &gt;&gt; <span class="number">24</span>) &amp; <span class="number">1</span>) | z &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    tmp[num] = ((tmp[num] &lt;&lt; <span class="number">1</span>) | (</span><br><span class="line"></span><br><span class="line">        ((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span> &amp; (x &gt;&gt; <span class="number">30</span> &amp; <span class="number">1</span>)) ^ (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span>) ^ <span class="number">1</span>) &amp; (y &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(first)):</span><br><span class="line"></span><br><span class="line">    solver.add(first[i] == tmp[i])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    model = solver.model()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(model)</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul></li><li><p>从代码中很明显发现把刚刚解密出来的三个变量经过ParseKey转换成密钥对数据进行解密<img src="https://s2.loli.net/2022/07/31/MtRkuyoaUSJZDh8.png"></p></li><li><p>计算Key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v = [<span class="number">156324965</span>, <span class="number">868387187</span>, <span class="number">3131229747</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0</span>] * <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">        key[i * <span class="number">4</span> + j] = (v[i] &gt;&gt; j * <span class="number">8</span> &amp; <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure></li><li><p>解密数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"></span><br><span class="line">    <span class="number">60</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">245</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">40</span>, <span class="number">103</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">22</span>, <span class="number">251</span>, <span class="number">227</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v ^ key[i % <span class="built_in">len</span>(key)]), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2022/07/31/AjkmnsrVEJg5XG6.png"></p><h3 id="3-【find-basic】"><a href="#3-【find-basic】" class="headerlink" title="3. 【find_basic】"></a>3. 【find_basic】</h3><h4 id="考点-2"><a href="#考点-2" class="headerlink" title="考点"></a>考点</h4><ul><li>类似虚拟保护的switch混淆执行逻辑分析</li></ul><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><ul><li><p>用IDA直接打开程序，来到start中跳转到main。</p></li><li><p>发现调用了很多子程序，随便进去一个发现使用了switch结构混淆了执行的过程<img src="https://s2.loli.net/2022/08/01/LiJkECVZXPlb1T7.png"><br><img src="https://s2.loli.net/2022/08/01/JKQnvbTYpes3BAl.png"></p></li><li><p>main函数领空下个断点不断F8直到程序打印出 “basic secret”</p></li><li><p>发现在调用了<code>sub_565D84FA</code>后程序进入了阻塞状态，因此判断该函数执行完就开始获取用户输入的数据。发现程序会发出一个时钟信号，直接忽略</p></li><li><p><img src="https://s2.loli.net/2022/08/01/2SDKBxl3FkIULt5.png"></p></li></ul><p><img src="https://s2.loli.net/2022/08/01/P7R5TlgnsmNK4YB.png"></p><ul><li><p>随便输入数据之后，程序继续断下来。断下来后打开IDA的指令跟踪功能。</p></li><li><p>在下一个子程序后面下断点，直接F9运行到断点<img src="https://s2.loli.net/2022/08/01/2UwFPRmjtQ1Maso.png"></p></li><li><p>将跟踪记录导出，对其进行溯源分析<img src="https://s2.loli.net/2022/08/01/458DxRfriAq3epK.png"></p></li><li><p>发现使用了<code>_rand</code>产生了一个随机数后逻辑与0xFF，不断地比较。如果小于就自增一在继续判断，不断地循环直到和产生的随机数相等再推出循环。经过分析该循环体内没有需要的数据。直接修改 随机数产生后的与逻辑，patch与逻辑成异或清空数据后trace再次运行程序。</p></li><li><p>但发现这样的随机不止一个，直接定位到<code>rand</code>函数的领空</p></li><li><p><img src="https://s2.loli.net/2022/08/01/2mWSzxcqtGgyMsX.png"></p></li><li><p>打开交叉引用<img src="https://s2.loli.net/2022/08/01/kYufHAVZhbjlDeR.png"></p></li></ul><ul><li><p>分别对两个地方的调用进行断点，把 “break”去掉勾选。“condition”中填入eax = 0。</p></li><li><p>这样做保证每次随机数产生后都被置0，记得要在函数调用后断点否则无效<img src="https://s2.loli.net/2022/08/01/HyXlQwCz9Dd7ZbJ.png"></p></li><li><p>分析函数，将用户输入的数据压入堆栈中<img src="https://s2.loli.net/2022/08/01/xqyXWgSrEleBoKa.png"></p></li><li><p>在数据的地方下个断点</p></li><li><p><img src="https://s2.loli.net/2022/08/01/T6ZL2oHGMpNjWzE.png"></p></li><li><p><img src="https://s2.loli.net/2022/08/01/VsEDy3qxm2hSuc1.png"></p></li><li><p>分析整理，根据trace发现用sub指令和数据进行了比对<img src="https://s2.loli.net/2022/08/01/zIiZ7d62gOueLXP.png"></p></li><li><p>往后一样的操作分析，使用z3即可算出所求flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line"></span><br><span class="line">    x = z3.BitVec(<span class="string">&quot;%d&quot;</span> % i, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    flag.append(x)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">model</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model)):</span><br><span class="line"></span><br><span class="line">        result.append(model[flag[i]].as_long())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x00</span>] * <span class="number">0x00042b45</span> == <span class="number">0x01a93d7e</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x01</span>] * <span class="number">0x0003b10f</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0001e4e0</span> == <span class="number">0x024fe394</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x00</span>] * <span class="number">0x00031fc4</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffdb038</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x0001390f</span> == <span class="number">0x00bb9e67</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x00</span>] * <span class="number">0x00032494</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffe5a07</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x0000a4e6</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00006ba7</span> == <span class="number">0x01052718</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffe0c3f</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00043e32</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0003f49d</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x0000c094</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffb7eff</span> == <span class="number">0x007fb225</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00033e5b</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x000157f8</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x0000d4eb</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffc9ad6</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00009c95</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffd8c2e</span> == <span class="number">0x0006a31d</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x06</span>] * <span class="number">0x00006d8c</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffedd66</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00046fd4</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffc79bb</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffbe7f5</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00014cde</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffc4acd</span> + <span class="number">0x03083b63</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x04</span>] * <span class="number">0x000129fd</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0002a3cd</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x000052a1</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x000087de</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x000357c1</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffbe625</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffec17b</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00008039</span> == <span class="number">0x00d3b6ed</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffe590f</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffc6bb7</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0002aec8</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffd58b1</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffcf131</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffc0fae</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffcf46a</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffbbb98</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffc9913</span> + <span class="number">0x07a4d9d3</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x06</span>] * <span class="number">0x00003cb6</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffc5201</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffdec99</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x000195a8</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffbcea6</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffd4f63</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0003852e</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00036c09</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffdffc6</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xffffbb8f</span> + <span class="number">0x027b7033</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffb7a1c</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xffff35fe</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffe5693</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffdb9f4</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x0000bd38</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00025b89</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x0003074d</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffe5f6f</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0x0001400e</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffcd14c</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0004036d</span> + <span class="number">0x000a8256</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0002da7a</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffbfd56</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xffff0011</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffce077</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00034d5d</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffb8def</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xffff2d4e</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x000237a3</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x000386e1</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0000fb89</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x0002e485</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x00042574</span> == <span class="number">0x024df62a</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x00021c5e</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00032144</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x000420e3</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x0003f6d0</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0001a459</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffc900e</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x0003fd03</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x00043d16</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffe4105</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffd400a</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xffffc29b</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x0002f9f0</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00019432</span> == <span class="number">0x06f9b293</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffca694</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffce151</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0x00030418</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x0002f6aa</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x0001b619</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x000022e4</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffe1384</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xffffa664</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00013e07</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffc46de</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x000079d6</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x0004372b</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x00003d1d</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x00004d41</span> == <span class="number">0x0176513c</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x07</span>] * <span class="number">0x00029b04</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffd2684</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffd9a2f</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffd79fc</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0002594e</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00041c45</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffc9c57</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffc5f95</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xfffec65c</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xffffb642</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffcb527</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0002792e</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffe1bb7</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x000445a1</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffd25cc</span> + <span class="number">0x05338cd6</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xfffd399c</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xffff3edb</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x00026b94</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0xfffcee81</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffefe93</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffcdfa4</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffe2a42</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x00010ba4</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x00038e1d</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00014c1e</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xffffce4a</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffd2a4b</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0x000041fc</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffedbac</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffeab6a</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffe4e59</span> + <span class="number">0x0299ff72</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xfffdc67b</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xffffb1fc</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xffff59be</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x00003684</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x000202c2</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x00002e43</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xffff3a46</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x00006a23</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x0000ebfb</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffbb78a</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0x0000d44a</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x000385eb</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xfffee046</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffeb282</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffde639</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffd6738</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xffff1aa3</span> + <span class="number">0x04728350</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00028c9c</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffdc4ae</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x000278ad</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x000326ca</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffd423d</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffc96fc</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffeeb1a</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffc2ee0</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x000106be</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xffff5d67</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x00000027</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xfffbc3b6</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xfffd163c</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0xfffb9b47</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x0001e6ed</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffc6c6f</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x0003b32b</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0x0002feea</span> + <span class="number">0x048d1119</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffc2bb3</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffce76f</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffca692</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffdf4bc</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0x000192f9</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0xfffe5a1e</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffed4f3</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xffff94f8</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffc717e</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffed29b</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffd28d9</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x000218df</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00028e00</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xfffdd0af</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x00025d22</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x00042ebb</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xffff1382</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x00007404</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xfffe2dff</span> + <span class="number">0x060245a5</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00021061</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffbcb01</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0xffff7442</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00024568</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0001b201</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0002d232</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0x00013777</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffee013</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffc7505</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x000264ed</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00033b4f</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x000286d8</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x00033e8b</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00021529</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xfffb7c1a</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0xfffd07a3</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xffff8453</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x00009754</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffd603d</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffdd85b</span> == <span class="number">0x0254e142</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffe206e</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x0002f048</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffc19fa</span> + (tmp_flag[<span class="number">0x04</span>]&lt;&lt;<span class="number">6</span>)+tmp_flag[<span class="number">0x04</span>] + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0000370d</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0xfffd9c2f</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffdb413</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0x00030e0a</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0xfffe07f8</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffedfd5</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffee6f6</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00046247</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x0002b8ed</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x0002d291</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffdc54d</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffc5b55</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xfffb8061</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x00043913</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xffffe191</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0xfffd276e</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0xfffe5841</span> + <span class="number">0x00ce53e7</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x14</span>] * <span class="number">0xfffed971</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0x00046741</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0xfffbac8c</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffeb4e7</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0001026b</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xfffe7d86</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffd5fec</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x00048ddb</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xfffc6bc1</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x00037ece</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x00041105</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffe6667</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0xfffe75b2</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x000061b0</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xffffd602</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xfffbce29</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xffff07d7</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00034c8e</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0x00032996</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x00049530</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x00033822</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffce161</span> + <span class="number">0x0042666b</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffe06e8</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xfffd0441</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00016357</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x0001d95f</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0xffff89d3</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffba022</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x00046180</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xffff4240</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x000199c5</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0xffff442c</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0xfffc2fac</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x00032600</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0x0001d03a</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0x00019435</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffd1667</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x00035d1d</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x000096c4</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x0002fa24</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0000b20c</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0000ebee</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0x000428a6</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xfffceb8a</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x00022784</span> == <span class="number">0x03604a63</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x00</span>] * <span class="number">0x0001e3e2</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0x0001cfb9</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0000c3f7</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x000094cd</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0xfffc7fd0</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00021165</span> + tmp_flag[<span class="number">0x17</span>] * <span class="number">0xfffcfb41</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xffff819d</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffbeb76</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00016751</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0x00000e1a</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x000238a0</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00028f99</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x000045bc</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0xffffcb18</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0x00032d58</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xffffe4bc</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xfffeea95</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x00044f3a</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x0000b047</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffcfc36</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0x00001719</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x0001b011</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffea265</span> == <span class="number">0x02918269</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">tmp_flag = result + flag</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffbf307</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xffff2847</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffcfd31</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00040f96</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0x0002b265</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffc7802</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x0001b103</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0x00042452</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0x00003c5d</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x00015b55</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffeb722</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0001d9a9</span> + tmp_flag[<span class="number">0x17</span>] * <span class="number">0x000028df</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0xfffc89eb</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffe1221</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0004462a</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0x00023353</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0x0003c514</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x000316a4</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x000176e1</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0x0000cf0e</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x00046b55</span> + tmp_flag[<span class="number">0x18</span>] * <span class="number">0xffffbcc1</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x0000f2a7</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x0001d33c</span> == <span class="number">0x05df35b6</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffbf624</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0xfffec87a</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0x00019aaa</span> + tmp_flag[<span class="number">0x17</span>] * <span class="number">0x00005f14</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0xfffcfc43</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0xfffbe879</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffdfc92</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xffffc258</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xfffd02fd</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00012560</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0000ae46</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffeb6f5</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00030c11</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0xfffcb4ae</span> + tmp_flag[<span class="number">0x18</span>] * <span class="number">0x0002a00a</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffc76de</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0x00004162</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffe95b2</span> + tmp_flag[<span class="number">0x19</span>] * <span class="number">0xfffe60e7</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0xffff908d</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffb7f42</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x00001c31</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xffff900c</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0x0002ad6e</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffd7c6d</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x0000c499</span> + <span class="number">0x083646cd</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x00026b02</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0xfffb92e5</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0x00030dd1</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0xfffe4c7b</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0xffff0433</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0x000276b1</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffc241e</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0xfffe3fdc</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffee787</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0x0000230c</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0xfffd53f8</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xfffc108c</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xffffbac1</span> + tmp_flag[<span class="number">0x1a</span>] * <span class="number">0xffff0bdb</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0xfffbc5e2</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0x0000a1f6</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x0001e758</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0x0001725f</span> + tmp_flag[<span class="number">0x17</span>] * <span class="number">0x0003387e</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0x0000087b</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffd8475</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0x0003776a</span> + tmp_flag[<span class="number">0x18</span>] * <span class="number">0xffff4515</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0x0001a454</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0xfffbf3a1</span> + tmp_flag[<span class="number">0x19</span>] * <span class="number">0x00025174</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0xfffbccc2</span> + <span class="number">0x052dfb3f</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">solver.add(tmp_flag[<span class="number">0x19</span>] * <span class="number">0x0002f139</span> + tmp_flag[<span class="number">0x14</span>] * <span class="number">0x00021b53</span> + tmp_flag[<span class="number">0x0f</span>] * <span class="number">0x0002ad74</span> + tmp_flag[<span class="number">0x09</span>] * <span class="number">0xfffba19b</span> + tmp_flag[<span class="number">0x10</span>] * <span class="number">0x0001ac4e</span> + tmp_flag[<span class="number">0x1b</span>] * <span class="number">0x0002208e</span> + tmp_flag[<span class="number">0x0d</span>] * <span class="number">0xfffdd738</span> + tmp_flag[<span class="number">0x0b</span>] * <span class="number">0xfffdfb9f</span> + tmp_flag[<span class="number">0x08</span>] * <span class="number">0xfffe4b65</span> + tmp_flag[<span class="number">0x05</span>] * <span class="number">0x00010937</span> + tmp_flag[<span class="number">0x0a</span>] * <span class="number">0xfffbfdf3</span> + tmp_flag[<span class="number">0x0c</span>] * <span class="number">0x0003cc1a</span> + tmp_flag[<span class="number">0x17</span>] * <span class="number">0xfffe93ee</span> + tmp_flag[<span class="number">0x02</span>] * <span class="number">0xfffe3b8a</span> + tmp_flag[<span class="number">0x0e</span>] * <span class="number">0xfffe792c</span> + tmp_flag[<span class="number">0x06</span>] * <span class="number">0x0003e9ff</span> + tmp_flag[<span class="number">0x15</span>] * <span class="number">0x000128e6</span> + tmp_flag[<span class="number">0x03</span>] * <span class="number">0x0000574b</span> + tmp_flag[<span class="number">0x18</span>] * <span class="number">0x00016707</span> + tmp_flag[<span class="number">0x13</span>] * <span class="number">0x0003fe4c</span> + tmp_flag[<span class="number">0x11</span>] * <span class="number">0xfffed658</span> + tmp_flag[<span class="number">0x07</span>] * <span class="number">0x0003cc8c</span> + tmp_flag[<span class="number">0x16</span>] * <span class="number">0x000458b4</span> + tmp_flag[<span class="number">0x01</span>] * <span class="number">0xfffd74d0</span> + tmp_flag[<span class="number">0x12</span>] * <span class="number">0x00022e02</span> + tmp_flag[<span class="number">0x04</span>] * <span class="number">0xffff098d</span> + tmp_flag[<span class="number">0x00</span>] * <span class="number">0x00030b99</span> + tmp_flag[<span class="number">0x1a</span>] * <span class="number">0xfffba5e9</span> == <span class="number">0x038186f4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == z3.sat:</span><br><span class="line"></span><br><span class="line">    append(solver.model())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> result]))</span><br></pre></td></tr></table></figure></li><li><p><img src="https://s2.loli.net/2022/08/01/G6XaQPjUZnpELgu.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022强网杯-”Reverse“-WP&quot;&gt;&lt;a href=&quot;#2022强网杯-”Reverse“-WP&quot; class=&quot;headerlink&quot; title=&quot;2022强网杯 ”Reverse“ WP&quot;&gt;&lt;/a&gt;2022强网杯 ”Reverse“ WP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/tags/Reverse/"/>
    
    <category term="Android逆向" scheme="https://blog.jamiexu.cn/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>【Git】Git命令大全</title>
    <link href="https://blog.jamiexu.cn/2022/07/30/%E3%80%90Git%E3%80%91Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://blog.jamiexu.cn/2022/07/30/%E3%80%90Git%E3%80%91Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2022-07-30T04:17:00.000Z</published>
    <updated>2022-07-30T04:30:43.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git命令大全"><a href="#Git命令大全" class="headerlink" title="Git命令大全"></a>Git命令大全</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化本地git仓库（创建新仓库）</span></span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span> <span class="comment"># 配置用户名</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span> <span class="comment"># 配置邮件</span></span><br><span class="line"></span><br><span class="line">git config --global color.ui <span class="literal">true</span> <span class="comment"># git status等命令自动着色</span></span><br><span class="line"></span><br><span class="line">git config --global color.status auto</span><br><span class="line"></span><br><span class="line">git config --global color.diff auto</span><br><span class="line"></span><br><span class="line">git config --global color.branch auto</span><br><span class="line"></span><br><span class="line">git config --global color.interactive auto</span><br><span class="line"></span><br><span class="line">git config --global http.proxy <span class="string">&quot;socks/http:host:port&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global https.proxy <span class="string">&quot;socks/http:host:port&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git <span class="comment"># clone远程仓库</span></span><br><span class="line"></span><br><span class="line">git status <span class="comment"># 查看当前版本状态（是否修改）</span></span><br><span class="line"></span><br><span class="line">git add xyz <span class="comment"># 添加xyz文件至index</span></span><br><span class="line"></span><br><span class="line">git add . <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 提交</span></span><br><span class="line"></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line"></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 将add和commit合为一步</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> xxx <span class="comment"># 删除index中的文件</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> -r * <span class="comment"># 递归删除</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 显示提交日志</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> -1 <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> -p -m</span><br><span class="line"></span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818 <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line"></span><br><span class="line">git show dfb02 <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line"></span><br><span class="line">git show HEAD <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line"></span><br><span class="line">git show HEAD^ <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class="line"></span><br><span class="line">git tag <span class="comment"># 显示已存在的tag</span></span><br><span class="line"></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 增加v2.0的tag</span></span><br><span class="line"></span><br><span class="line">git show v2.0 <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> v2.0 <span class="comment"># 显示v2.0的日志</span></span><br><span class="line"></span><br><span class="line">git reflog <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD <span class="comment"># 回退版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^^ <span class="comment"># 回退到前两个版本，以此类推</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~x <span class="comment"># 回退到 x 版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard 6fcfc89 回退到版本号6fcfc89</span><br><span class="line"></span><br><span class="line">git diff <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line"></span><br><span class="line">git diff --cached <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line"></span><br><span class="line">git diff HEAD^ <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line"></span><br><span class="line">git diff HEAD -- ./lib <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line"></span><br><span class="line">git diff origin/master..master <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line"></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span> <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line"></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 显示本地分支</span></span><br><span class="line"></span><br><span class="line">git branch --contains 50089 <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line"></span><br><span class="line">git branch -a <span class="comment"># 显示所有分支</span></span><br><span class="line"></span><br><span class="line">git branch -r <span class="comment"># 显示所有原创分支</span></span><br><span class="line"></span><br><span class="line">git branch --merged <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line"></span><br><span class="line">git branch --no-merged <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line"></span><br><span class="line">git branch -m master master_copy <span class="comment"># 本地分支改名</span></span><br><span class="line"></span><br><span class="line">git checkout -b master_copy <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line"></span><br><span class="line">git checkout -b master master_copy <span class="comment"># 上面的完整版</span></span><br><span class="line"></span><br><span class="line">git checkout features/performance <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line"></span><br><span class="line">git checkout --track hotfixes/BJVEP933 <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line"></span><br><span class="line">git checkout v2.0 <span class="comment"># 检出版本v2.0</span></span><br><span class="line"></span><br><span class="line">git checkout -b devel origin/develop <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line"></span><br><span class="line">git checkout -- README <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line"></span><br><span class="line">git merge origin/master <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line"></span><br><span class="line">git cherry-pick ff44785404a8e <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br></pre></td></tr></table></figure><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git push origin master <span class="comment"># 将当前分支push到远程master分支</span></span><br><span class="line"></span><br><span class="line">git push origin :hotfixes/BJVEP933 <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line"></span><br><span class="line">git push --tags <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line"></span><br><span class="line">git fetch <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line"></span><br><span class="line">git fetch --prune <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line"></span><br><span class="line">git pull origin master <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">git rebase</span><br><span class="line"></span><br><span class="line">git branch -d hotfixes/BJVEP933 <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line"></span><br><span class="line">git branch -D hotfixes/BJVEP933 <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line"></span><br><span class="line">git ls-files <span class="comment"># 列出git index包含的文件</span></span><br><span class="line"></span><br><span class="line">git show-branch <span class="comment"># 图示当前分支历史</span></span><br><span class="line"></span><br><span class="line">git show-branch --all <span class="comment"># 图示所有分支历史</span></span><br><span class="line"></span><br><span class="line">git whatchanged <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line"></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818 <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line"></span><br><span class="line">git ls-tree HEAD <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line"></span><br><span class="line">git rev-parse v2.0 <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line"></span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line"></span><br><span class="line">git show master@&#123;yesterday&#125; <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph <span class="comment"># 图示提交日志</span></span><br><span class="line"></span><br><span class="line">git show HEAD~3</span><br><span class="line"></span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line"></span><br><span class="line">git stash <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line"></span><br><span class="line">git stash list <span class="comment"># 查看所有暂存</span></span><br><span class="line"></span><br><span class="line">git stash show -p stash@&#123;0&#125; <span class="comment"># 参考第一次暂存</span></span><br><span class="line"></span><br><span class="line">git stash apply stash@&#123;0&#125; <span class="comment"># 应用第一次暂存</span></span><br><span class="line"></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span> <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line"></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class="line"></span><br><span class="line">git gc</span><br><span class="line"></span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git命令大全&quot;&gt;&lt;a href=&quot;#Git命令大全&quot; class=&quot;headerlink&quot; title=&quot;Git命令大全&quot;&gt;&lt;/a&gt;Git命令大全&lt;/h1&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配</summary>
      
    
    
    
    <category term="软件配置" scheme="https://blog.jamiexu.cn/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Git" scheme="https://blog.jamiexu.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【CMake&amp;C&amp;CPP】CMake的安装及使用</title>
    <link href="https://blog.jamiexu.cn/2022/07/26/%E3%80%90cmakeccpp%E3%80%91cmake%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.jamiexu.cn/2022/07/26/%E3%80%90cmakeccpp%E3%80%91cmake%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-26T04:51:58.000Z</published>
    <updated>2022-07-28T16:14:02.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>  cmake的定义是什么 ？—–高级编译配置工具</li><li>  当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了—–CMake！</li><li>  所有操作都是通过编译CMakeLists.txt来完成的—简单</li><li>  官方网站是 <a href="http://www.cmake.org/">www.cmake.org</a>，可以通过访问官方网站获得更多关于 cmake 的信息</li><li>  学习CMake的目的，为将来处理大型的C/C++/JAVA项目做准备</li></ul><h2 id="CMake安装"><a href="#CMake安装" class="headerlink" title="CMake安装"></a>CMake安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><ul><li>  到<a href="https://cmake.org/download/">https://cmake.org/download/</a>下载对应的Cmake安装程序安装</li></ul><h4 id="使用VS-Studio"><a href="#使用VS-Studio" class="headerlink" title="使用VS Studio"></a>使用VS Studio</h4><ul><li>在安装VS Studio的时候选择单个组件，分别安装下列的组件<ol><li><img src="https://s2.loli.net/2022/07/26/KLWIUmwa9sjpOez.png"></li><li><img src="https://s2.loli.net/2022/07/26/3dnlcpq8r14RgXM.png">SDK选择一个安装即可</li><li><img src="https://s2.loli.net/2022/07/26/FDclX8KrAbEahLt.png">也是选择任意一个安装即可</li></ol></li><li>添加用于<strong>编译 “.sln”</strong> 文件的MSBuilder到环境变量中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin</span><br></pre></td></tr></table></figure><ul><li>输入<code>cmake -h</code>查看目前有哪些<strong>Generators</strong>，可以看到目前的默认就是使用了VS Stuido的<img src="https://s2.loli.net/2022/07/26/zPOgKLjl3YV5Fps.png"></li><li>在后续操作中使用cmake后不再使用make进行编译而是使用msbuild进行工程的编译，例如</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">msbuild xxx.sln</span><br><span class="line">xxx.exe</span><br></pre></td></tr></table></figure><h4 id="使用MinGW"><a href="#使用MinGW" class="headerlink" title="使用MinGW"></a>使用MinGW</h4><ul><li>到<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/</a>下载MinGW</li><li>安装GCC编译器<img src="https://s2.loli.net/2022/07/26/K5g7hiBAJsSCqY1.png"></li><li>将MinGW的bin目录添加到环境变量中  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\MinGW\bin</span><br></pre></td></tr></table></figure></li><li>验证是否安装成功，如果出现下图就说明安装成功了</li></ul><p><img src="https://s2.loli.net/2022/07/26/aheYn3dSf1QmJ7t.png"></p><ul><li>复制一份将文件名称修改成make <img src="https://s2.loli.net/2022/07/26/Jx5yg72kAhfHBGF.png"></li><li>使用MinGW编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -G <span class="string">&quot;MinGW Makefiles&quot;</span></span><br><span class="line">make</span><br><span class="line">hello.exe</span><br></pre></td></tr></table></figure><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ul><li>  绝大多数的linux系统已经安装了CMake</li><li>  某些没有安装过的linux系统，去<a href="http://www.cmake.org/HTML/Download.html">http://www.cmake.org/HTML/Download.htm</a>可以下载安装</li></ul><h2 id="CMake一个HelloWord"><a href="#CMake一个HelloWord" class="headerlink" title="CMake一个HelloWord"></a>CMake一个HelloWord</h2><p>1、步骤一，写一个HelloWord</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt;  <span class="string">&quot;hello word&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、步骤二，写CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CMakeLists.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">PROJECT</span> (HELLO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span>(SRC_LIST main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">&quot;This is BINARY dir &quot;</span> <span class="variable">$&#123;HELLO_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">&quot;This is SOURCE dir &quot;</span><span class="variable">$&#123;HELLO_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>3、步骤三、使用cmake，生成makefile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cmake .</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[root@localhost cmake]<span class="comment"># cmake .</span></span><br><span class="line">CMake Warning (dev) <span class="keyword">in</span> CMakeLists.txt:</span><br><span class="line">  Syntax Warning <span class="keyword">in</span> cmake code at</span><br><span class="line"></span><br><span class="line">    /root/cmake/CMakeLists.txt:7:37</span><br><span class="line"></span><br><span class="line">  Argument not separated from preceding token by whitespace.</span><br><span class="line">This warning is <span class="keyword">for</span> project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 10.2.1</span><br><span class="line">-- The CXX compiler identification is GNU 10.2.1</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- This is BINARY <span class="built_in">dir</span> /root/cmake</span><br><span class="line">-- This is SOURCE <span class="built_in">dir</span> /root/cmake</span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /root/cmake</span><br></pre></td></tr></table></figure><ul><li>  目录下就生成了这些文件-CMakeFiles, CMakeCache.txt, cmake_install.cmake 等文件，并且生成了Makefile.</li><li>  现在不需要理会这些文件的作用，以后你也可以不去理会。最关键的是，它自动生成了Makefile.</li></ul><p>4、使用make命令编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@localhost cmake]<span class="comment"># make</span></span><br><span class="line">Scanning dependencies of target hello</span><br><span class="line">[100%] Building CXX object CMakeFiles/hello.dir/main.cpp.o</span><br><span class="line">Linking CXX executable hello</span><br><span class="line">[100%] Built target hello</span><br></pre></td></tr></table></figure><p>5、最终生成了Hello的可执行程序</p><h2 id="CMake一个HelloWord-的语法介绍"><a href="#CMake一个HelloWord-的语法介绍" class="headerlink" title="CMake一个HelloWord-的语法介绍"></a>CMake一个HelloWord-的语法介绍</h2><h3 id="PROJECT关键字"><a href="#PROJECT关键字" class="headerlink" title="PROJECT关键字"></a>PROJECT关键字</h3><ul><li>可以用来指定工程的名字和支持的语言，默认支持所有语言</li><li>PROJECT (HELLO) 指定了工程的名字，并且支持所有语言—建议</li><li>PROJECT (HELLO CXX) 指定了工程的名字，并且支持语言是C++</li><li>PROJECT (HELLO C CXX) 指定了工程的名字，并且支持语言是C和C++</li><li>该指定隐式定义了两个CMAKE的变量 <code>&lt;projectname&gt;_BINARY_DIR</code>，本例中是HELLO_BINARY_DIR <code>&lt;projectname&gt;_SOURCE_DIR</code>，本例中是HELLO_SOURCE_DIR</li><li>MESSAGE关键字就可以直接使用者两个变量，当前都指向当前的工作目录，后面会讲外部编译</li><li>问题：如果改了工程名，这两个变量名也会改变 又定义两个预定义变量：PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，这两个变量和HELLO_BINARY_DIR，HELLO_SOURCE_DIR是一致的。所以改了工程名也没有关系</li></ul><h3 id="SET关键字"><a href="#SET关键字" class="headerlink" title="SET关键字"></a>SET关键字</h3><ul><li>  用来显示的指定变量的 - <code>SET(SRC_LIST main.cpp)</code> SRC_LIST变量就包含了<code>main.cpp</code></li><li>  也可以 <code>SET(SRC_LIST main.cpp t1.cpp t2.cpp)</code></li></ul><h3 id="MESSAGE关键字"><a href="#MESSAGE关键字" class="headerlink" title="MESSAGE关键字"></a>MESSAGE关键字</h3><ul><li>  向终端输出用户自定义的信息</li><li>主要包含三种信息：<ul><li>  SEND_ERROR，产生错误，生成过程被跳过。</li><li>  SATUS，输出前缀为—的信息。</li><li>  FATAL_ERROR，立即终止所有 cmake 过程.</li></ul></li></ul><h3 id="ADD-EXECUTABLE关键字"><a href="#ADD-EXECUTABLE关键字" class="headerlink" title="ADD_EXECUTABLE关键字"></a>ADD_EXECUTABLE关键字</h3><ul><li>  生成可执行文件</li><li>  ADD_EXECUTABLE(hello ${SRC_LIST}) 生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</li><li>  也可以直接写 ADD_EXECUTABLE(hello main.cpp)</li><li>  上述例子可以简化的写成</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello main.cpp)</span><br></pre></td></tr></table></figure><ul><li>  注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</li></ul><h2 id="语法的基本原则"><a href="#语法的基本原则" class="headerlink" title="语法的基本原则"></a>语法的基本原则</h2><ul><li>  变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</li><li>  指令(参数 1 参数 2…) 参数使用括弧括起，参数之间使用空格或分号分开。 以上面的 ADD_EXECUTABLE 指令为例，如果存在另外一个 func.cpp 源文件</li><li>  就要写成：ADD_EXECUTABLE(hello main.cpp func.cpp)或者ADD_EXECUTABLE(hello main.cpp;func.cpp)</li><li>  指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令</li></ul><h3 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h3><ul><li>  SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有空格，就必须要加双引号</li><li>  ADD_EXECUTABLE(hello main) 后缀可以不行，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h2 id="内部构建和外部构建"><a href="#内部构建和外部构建" class="headerlink" title="内部构建和外部构建"></a>内部构建和外部构建</h2><ul><li>  上述例子就是内部构建，他生产的临时文件特别多，不方便清理</li><li>  外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</li></ul><h3 id="外部构建方式举例"><a href="#外部构建方式举例" class="headerlink" title="外部构建方式举例"></a>外部构建方式举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//例子目录，CMakeLists.txt和上面例子一致</span><br><span class="line">[root@localhost cmake]<span class="comment"># pwd</span></span><br><span class="line">/root/cmake</span><br><span class="line">[root@localhost cmake]<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root 198 Dec 28 20:59 CMakeLists.txt</span><br><span class="line">-rw-r--r--. 1 root root  76 Dec 28 00:18 main.cpp</span><br></pre></td></tr></table></figure><ol><li> 建立一个build目录，可以在任何地方，建议在当前目录下</li><li> 进入build，运行cmake .. 当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</li><li> 在build目录下，运行make来构建工程</li></ol><ul><li>注意外部构建的两个变量<ol><li> HELLO_SOURCE_DIR 还是工程路径</li><li> HELLO_BINARY_DIR 编译路径 也就是 /root/cmake/bulid</li></ol></li></ul><h2 id="让Hello-World看起来更像一个工程"><a href="#让Hello-World看起来更像一个工程" class="headerlink" title="让Hello World看起来更像一个工程"></a>让Hello World看起来更像一个工程</h2><ul><li>  为工程添加一个子目录 src，用来放置工程源代码</li><li>  添加一个子目录 doc，用来放置这个工程的文档 hello.txt</li><li>  在工程目录添加文本文件 COPYRIGHT, README</li><li>  在工程目录添加一个 <a href="http://runhello.sh/">runhello.sh</a> 脚本，用来调用 hello 二进制</li><li>  将构建后的目标文件放入构建目录的 bin 子目录</li><li>  将 doc 目录 的内容以及 COPYRIGHT/README 安装到/usr/share/doc/cmake/</li></ul><h3 id="将目标文件放入构建目录的-bin-子目录"><a href="#将目标文件放入构建目录的-bin-子目录" class="headerlink" title="将目标文件放入构建目录的 bin 子目录"></a>将目标文件放入构建目录的 bin 子目录</h3><ul><li>  每个目录下都要有一个CMakeLists.txt说明</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cmake]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><ul><li>  外层CMakeLists.txt</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(src bin)</span><br></pre></td></tr></table></figure><ul><li>src下的CMakeLists.txt  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello main.cpp)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ADD-SUBDIRECTORY-指令"><a href="#ADD-SUBDIRECTORY-指令" class="headerlink" title="ADD_SUBDIRECTORY 指令"></a>ADD_SUBDIRECTORY 指令</h2><p><code>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></p><ul><li>  这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</li><li>  EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</li><li>  <code>ADD_SUBDIRECTORY(src bin)</code></li><li>  将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录</li><li>  如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录</li></ul><h2 id="更改二进制的保存路径"><a href="#更改二进制的保存路径" class="headerlink" title="更改二进制的保存路径"></a>更改二进制的保存路径</h2><ul><li>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">SET</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure></li></ul><p>思考：加载哪个CMakeLists.txt当中</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>  一种是从代码编译后直接 make install 安装</li><li>一种是打包时的指定 目录安装。<ul><li>  简单的可以这样指定目录：<code>make install DESTDIR=/tmp/test</code></li><li>  稍微复杂一点可以这样指定目录：<code>./configure –prefix=/usr</code></li></ul></li></ul><h3 id="如何安装HelloWord"><a href="#如何安装HelloWord" class="headerlink" title="如何安装HelloWord"></a>如何安装HelloWord</h3><ul><li>  使用CMAKE一个新的指令：INSTALL</li><li>  INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</li><li>  使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 目录树结构</span><br><span class="line">[root@localhost cmake]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── COPYRIGHT</span><br><span class="line">├── doc</span><br><span class="line">│   └── hello.txt</span><br><span class="line">├── README</span><br><span class="line">├── runhello.sh</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br><span class="line"></span><br><span class="line">3 directories, 7 files</span><br></pre></td></tr></table></figure><h3 id="安装文件COPYRIGHT和README"><a href="#安装文件COPYRIGHT和README" class="headerlink" title="安装文件COPYRIGHT和README"></a>安装文件COPYRIGHT和README</h3><p><code>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake/)</code></p><ul><li>FILES： 文件</li><li>DESTINATION：<ol><li> 写绝对路径</li><li> 可以写相对路径，相对路径实际路径是：${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;</li></ol></li><li>CMAKE_INSTALL_PREFIX 默认是在 /usr/local/</li><li><code>cmake -DCMAKE_INSTALL_PREFIX=/usr</code>在cmake的时候指定<code>CMAKE_INSTALL_PREFIX</code>变量的路径</li></ul><h3 id="安装脚本runhello-sh"><a href="#安装脚本runhello-sh" class="headerlink" title="安装脚本runhello.sh"></a>安装脚本runhello.sh</h3><ul><li>  PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</li><li>  <code>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</code></li><li>  说明：实际安装到的是 /usr/bin</li></ul><h3 id="安装-doc-中的-hello-txt"><a href="#安装-doc-中的-hello-txt" class="headerlink" title="安装 doc 中的 hello.txt"></a>安装 doc 中的 hello.txt</h3><ul><li>  是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</li><li>  是直接在工程目录通过 <code>INSTALL(DIRECTORY doc/ DESTINATION share/doc/cmake)</code></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc/有很大的区别</p><p>目录名不以/结尾：这个目录将被安装为目标路径下的</p><p>目录名以/结尾：将这个目录中的内容安装到目标路径</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="静态库和动态库的构建"><a href="#静态库和动态库的构建" class="headerlink" title="静态库和动态库的构建"></a>静态库和动态库的构建</h2><ul><li>任务： １. 建立一个静态库和动态库，提供 HelloFunc 函数供其他程序编程使用，HelloFunc 向终端输出 Hello World 字符串。 ２. 安装头文件与共享库。</li><li>静态库和动态库的区别<ul><li>  静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。</li><li>  静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</li><li>  动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</li></ul></li></ul><h3 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost cmake2]<span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── lib</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── hello.cpp</span><br><span class="line">    └── hello.h</span><br></pre></td></tr></table></figure><ul><li>  hello.h中的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hello_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HelloFunc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>  hello.cpp中的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HelloFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  项目中的cmake内容</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(lib bin)</span><br></pre></td></tr></table></figure><ul><li>  lib中CMakeLists.txt中的内容</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(LIBHELLO_SRC hello.cpp)</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello SHARED <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="ADD-LIBRARY"><a href="#ADD-LIBRARY" class="headerlink" title="ADD_LIBRARY"></a>ADD_LIBRARY</h4><p>ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})</p><ul><li>  hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so</li><li>  SHARED，动态库 STATIC，静态库</li><li>  ${LIBHELLO_SRC} ：源文件</li></ul><h4 id="同时构建静态和动态库"><a href="#同时构建静态和动态库" class="headerlink" title="同时构建静态和动态库"></a>同时构建静态和动态库</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello STATIC $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello_static STATIC $&#123;LIBHELLO_SRC&#125;)</span><br></pre></td></tr></table></figure><h4 id="SET-TARGET-PROPERTIES"><a href="#SET-TARGET-PROPERTIES" class="headerlink" title="SET_TARGET_PROPERTIES"></a>SET_TARGET_PROPERTIES</h4><ul><li>  这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本 同时构建静态和动态库</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SET</span>(LIBHELLO_SRC hello.cpp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello_static STATIC $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对hello_static的重名为hello</span></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES  OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES  OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="动态库的版本号"><a href="#动态库的版本号" class="headerlink" title="动态库的版本号"></a>动态库的版本号</h4><ul><li>  一般动态库都有一个版本号的关联</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libhello.so<span class="number">.1</span><span class="number">.2</span></span><br><span class="line">libhello.so -&gt;libhello.so<span class="number">.1</span></span><br><span class="line">libhello.so<span class="number">.1</span>-&gt;libhello.so<span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><ul><li>  CMakeLists.txt 插入如下</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(hello PROPERTIES VERSION <span class="number">1.2</span> SOVERSION <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>  VERSION 指代动态库版本，SOVERSION 指代 API 版本。</li></ul><h4 id="安装共享库和头文件"><a href="#安装共享库和头文件" class="headerlink" title="安装共享库和头文件"></a>安装共享库和头文件</h4><ul><li>  本例中我们将 hello 的共享库安装到<code>&lt;prefix&gt;/lib</code>目录</li><li>  将<code>hello.h</code>安装到<code>&lt;prefix&gt;/include/hello</code>目录</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//文件放到该目录下</span><br><span class="line"><span class="keyword">INSTALL</span>(FILES hello.h DESTINATION <span class="keyword">include</span>/hello)</span><br><span class="line"></span><br><span class="line">//二进制，静态库，动态库安装都用TARGETS</span><br><span class="line">//ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span><br><span class="line"><span class="keyword">INSTALL</span>(TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>  安装的时候，指定一下路径，放到系统下 <code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code></li></ul></li></ul><h3 id="使用外部共享库和头文件"><a href="#使用外部共享库和头文件" class="headerlink" title="使用外部共享库和头文件"></a>使用外部共享库和头文件</h3><ul><li>  准备工作，新建一个目录来使用外部共享库和头文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R4CM-srv cmake3]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><ul><li>  main.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hello.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">HelloFunc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决：make后头文件找不到的问题"><a href="#解决：make后头文件找不到的问题" class="headerlink" title="解决：make后头文件找不到的问题"></a>解决：make后头文件找不到的问题</h3><ul><li>PS：include &lt;hello/hello.h&gt; 这样include是可以，这么做的话，就没啥好讲的了</li><li>关键字：INCLUDE_DIRECTORIES 这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</li><li>在CMakeLists.txt中加入头文件搜索路径 <code>INCLUDE_DIRECTORIES(/usr/include/hello)</code></li><li>感谢：<ul><li>  网友：zcc720的提醒</li></ul></li></ul><h3 id="解决：找到引用的函数问题"><a href="#解决：找到引用的函数问题" class="headerlink" title="解决：找到引用的函数问题"></a>解决：找到引用的函数问题</h3><ul><li>报错信息：undefined reference to `HelloFunc()’</li><li>关键字：LINK_DIRECTORIES 添加非标准的共享库搜索路径</li><li>指定第三方库所在路径，LINK_DIRECTORIES(/home/myproject/libs)</li><li>关键字：TARGET_LINK_LIBRARIES 添加需要链接的共享库</li><li>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</li><li>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</li><li>根据CMake官方的推荐<ul><li>  在使用外部库的时候尽量不用<code>LINK_DIRECTORIES</code>而是使用<code>FIND_LIBRARY</code>获取到外部库的绝对路径后对其使用如下所示</li><li>  其格式为FIND_LIBRARY(VAR NAME REQUIRED HINTS PATH )，其中<code>REQUIRED</code>的意思是如果找不到库将停止后面的操作</li></ul></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FIND_LIBRARY</span>( HELLO hello capstone REQUIRED HINTS ../lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">&quot;Found the library: &quot;</span> <span class="variable">$&#123;HELLO&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(crackMe  <span class="variable">$&#123;HELLO&#125;</span> <span class="variable">$&#123;CAPSTONE&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>查看main的链接情况  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R4CM-srv bin]<span class="comment"># ldd main </span></span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffedfda4000)</span><br><span class="line">libhello.so =&gt; /lib64/libhello.so (0x00007f41c0d8f000)</span><br><span class="line">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f41c0874000)</span><br><span class="line">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f41c0572000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f41c035c000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f41bff8e000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f41c0b7c000)</span><br></pre></td></tr></table></figure></li><li>链接静态库 <code>TARGET_LINK_LIBRARIES(main libhello.a)</code></li><li><strong>注意事项：</strong><ul><li>  在Windows中如果是以.lib结尾的外部库需要使用msbuild进行编译不能使用make否则还是会提示<code>undefined reference</code>。</li><li>  .a结尾的是gcc编译的</li><li>  .lib结尾是msbuild编译的</li></ul></li></ul><h3 id="特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH"><a href="#特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH" class="headerlink" title="特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH"></a>特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</h3><ul><li>注意：这两个是环境变量而不是 cmake 变量，可以在linux的bash中进行设置</li><li>我们上面例子中使用了绝对路径<code>INCLUDE_DIRECTORIES(/usr/include/hello)</code>来指明include路径的位置</li><li>我们还可以使用另外一种方式，使用环境变量export CMAKE_INCLUDE_PATH=/usr/include/hello</li><li>补充：生产debug版本的方法：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -DCMAKE_BUILD_TYPE=debug</span><br></pre></td></tr></table></figure></li></ul><h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><ul><li>  以上记录除了安装部分原创其余的来源于B站朋友的笔记本人仅作整理转载</li><li>  CMake笔记配套视频<a href="https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.999.0.0</a> <img src="https://s2.loli.net/2022/07/26/LM9gFaTeUE51HIj.jpg"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CMake&quot;&gt;&lt;a href=&quot;#CMake&quot; class=&quot;headerlink&quot; title=&quot;CMake&quot;&gt;&lt;/a&gt;CMake&lt;/h1&gt;&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说</summary>
      
    
    
    
    <category term="程序设计" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="C++" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/C/"/>
    
    <category term="其他" scheme="https://blog.jamiexu.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Linux" scheme="https://blog.jamiexu.cn/categories/%E5%85%B6%E4%BB%96/Linux/"/>
    
    <category term="软件配置" scheme="https://blog.jamiexu.cn/categories/%E5%85%B6%E4%BB%96/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>【CTF&amp;WriteUp】2022-07 “强国杯” WriteUp含Re</title>
    <link href="https://blog.jamiexu.cn/2022/07/17/%E3%80%90ctfwriteup%E3%80%91%E5%BC%BA%E5%9B%BD%E6%9D%AF-2022-07%E7%BA%BF%E4%B8%8A%E6%AF%94%E8%B5%9Bwp/"/>
    <id>https://blog.jamiexu.cn/2022/07/17/%E3%80%90ctfwriteup%E3%80%91%E5%BC%BA%E5%9B%BD%E6%9D%AF-2022-07%E7%BA%BF%E4%B8%8A%E6%AF%94%E8%B5%9Bwp/</id>
    <published>2022-07-17T10:01:56.000Z</published>
    <updated>2022-07-29T10:32:18.791Z</updated>
    
    <content type="html"><![CDATA[<h5 id="战队名：超级飞侠"><a href="#战队名：超级飞侠" class="headerlink" title="战队名：超级飞侠"></a>战队名：超级飞侠</h5><h5 id="撰写时间：2022-07-16-20-43"><a href="#撰写时间：2022-07-16-20-43" class="headerlink" title="撰写时间：2022-07-16 20:43"></a>撰写时间：2022-07-16 20:43</h5><h1 id="强国杯【线上-2022】"><a href="#强国杯【线上-2022】" class="headerlink" title="强国杯【线上-2022】"></a>强国杯【线上-2022】</h1><h2 id="I-WEB"><a href="#I-WEB" class="headerlink" title="I. WEB"></a>I. WEB</h2><h3 id="【upload-lol】"><a href="#【upload-lol】" class="headerlink" title="【upload_lol】"></a>【upload_lol】</h3><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><ul><li>上传绕过<h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4></li><li>经过多次测试发现，文件后缀不能带有php，文件内容不能有<code>&lt;?</code> ，而<code>?&gt;</code>这个好像没有过滤，文件类型改为image/jpeg即可；所以先上传一个.htaccess，内容为  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_file <span class="string">&quot;php://filter/convert.base64-decode/resource=shell.jpg&quot;</span></span><br></pre></td></tr></table></figure></li><li>  然后在shell.jpg文件里面写入base64加密过的一句话木马</li><li>  蚁剑连上在var目录下得到flag</li></ul><h3 id="【file-sql-new】"><a href="#【file-sql-new】" class="headerlink" title="【file_sql_new】"></a>【file_sql_new】</h3><h4 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h4><ul><li>字符型注入</li><li>过滤绕过<h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4></li><li>字符型注入，过滤了select，会替换为空，双写select绕过，回显2、3字段<br>  <img src="https://s2.loli.net/2022/07/29/1o5NeASRpkVIWgP.jpg"></li><li>爆表名 <img src="https://s2.loli.net/2022/07/29/mnt3EXHNP8boJfU.jpg"></li><li>爆列名 <img src="https://s2.loli.net/2022/07/29/D2fzhImW3PCY5gB.jpg"></li><li>获取flag路径 <img src="https://s2.loli.net/2022/07/29/G6lvR3PtXCsFTNc.jpg"></li><li>使用load_file读取flag <img src="https://s2.loli.net/2022/07/29/PKA75XbkcdxwQtD.jpg"></li></ul><hr><h2 id="II-MISC"><a href="#II-MISC" class="headerlink" title="II. MISC"></a>II. MISC</h2><h3 id="【welcome-to-QGB】"><a href="#【welcome-to-QGB】" class="headerlink" title="【welcome_to_QGB】"></a>【welcome_to_QGB】</h3><h4 id="考点-2"><a href="#考点-2" class="headerlink" title="考点"></a>考点</h4><ul><li>base64解码<h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4></li><li>  将字符串<code>V2VsY29tZV90b19RR0I=</code>进行base64解码再套上flag{}格式即可</li></ul><h3 id="【B-tCh】"><a href="#【B-tCh】" class="headerlink" title="【B@tCh】"></a>【B@tCh】</h3><h4 id="考点-3"><a href="#考点-3" class="headerlink" title="考点"></a>考点</h4><ul><li>BatchEncryption混淆还原<h4 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h4></li><li>  文本工具打开显示乱码，改用二进制工具winhex，发现文件头为FFFE，即unicode编码的小端UTF-16，批处理为ansi，所以直接将FFFE改成2020，即可用文本工具打开</li><li>  使用下面脚本进行解(使用该脚本，需要将文件前面的如<code>&amp;cls</code>等内容去掉，从<code>@%os</code>开始，因为我懒得写识别了，所以将正文直接从0字符开始获取)，得出flag</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Batch Decryption 202009 (BatchEncryption Build 201610)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">vars</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># decryption line</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">l = <span class="built_in">len</span>(data)</span><br><span class="line"><span class="keyword">while</span> i &lt; l:</span><br><span class="line">i = run(<span class="built_in">vars</span>, data, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params"><span class="built_in">vars</span>, data, i</span>):</span><br><span class="line">    buf = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    x = <span class="literal">False</span></span><br><span class="line">    l = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">if</span> data[i] == <span class="number">0x0d</span> <span class="keyword">and</span> data[i+<span class="number">1</span>] == <span class="number">0x0a</span>:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># get %var:~x,y% %0</span></span><br><span class="line">        <span class="keyword">if</span> data[i] == <span class="number">0x25</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">                x = <span class="literal">True</span></span><br><span class="line">                f = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = <span class="literal">False</span></span><br><span class="line">                t = i</span><br><span class="line">                rst = var_percent(data[f:t+<span class="number">1</span>], <span class="built_in">vars</span>)</span><br><span class="line">                buf += rst</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">                buf += <span class="built_in">str</span>(data[i:i+<span class="number">1</span>], encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> (f + <span class="number">1</span> == i) <span class="keyword">and</span> ((data[i] &gt;= <span class="number">0x30</span> <span class="keyword">and</span> data[i] &lt;= <span class="number">0x39</span>) <span class="keyword">or</span> data[i] == <span class="number">0x2a</span>):</span><br><span class="line">                    x = <span class="literal">False</span></span><br><span class="line">                    t = i</span><br><span class="line">                    rst = <span class="built_in">str</span>(data[f:t+<span class="number">1</span>], encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                    buf += rst</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= l:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">print</span>(buf)</span><br><span class="line">    bufs = buf.split(<span class="string">&#x27;&amp;@&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> bufs:</span><br><span class="line">        <span class="keyword">if</span> var[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">&#x27;set &#x27;</span>:</span><br><span class="line">            var = var[<span class="number">4</span>:]</span><br><span class="line">            b = var.find(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="built_in">vars</span>[var[<span class="number">0</span>:b]] = var[b+<span class="number">1</span>:].replace(<span class="string">&#x27;^^^&#x27;</span>, <span class="string">&#x27;^&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">var_percent</span>(<span class="params">data, <span class="built_in">vars</span></span>):</span><br><span class="line">    full = <span class="built_in">str</span>(data, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    buf = full[<span class="number">1</span>:<span class="built_in">len</span>(full)-<span class="number">1</span>]</span><br><span class="line">    buf = buf.split(<span class="string">&#x27;:~&#x27;</span>)</span><br><span class="line">    var = buf[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> var <span class="keyword">in</span> <span class="built_in">vars</span>:</span><br><span class="line">        <span class="built_in">vars</span>[var] = os.getenv(var)</span><br><span class="line">    ent = <span class="built_in">vars</span>[var]</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(buf) &gt; <span class="number">1</span>):</span><br><span class="line">        l = <span class="built_in">len</span>(ent)</span><br><span class="line">        buf = buf[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        f = <span class="built_in">int</span>(buf[<span class="number">0</span>])</span><br><span class="line">        t = <span class="built_in">int</span>(buf[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> f &lt; <span class="number">0</span>:</span><br><span class="line">            f, t = l + f, t</span><br><span class="line">        rst = ent[f: f+t]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rst = full</span><br><span class="line">    <span class="keyword">return</span> rst</span><br><span class="line"></span><br><span class="line">encrypt_file = <span class="string">&#x27;此处填写bat文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = <span class="built_in">open</span>(encrypt_file, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        data = file.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Batch decryption read error:&#x27;</span>, err)</span><br><span class="line">        exit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">    decryption(data)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/HNTmWQALJ8EM4nF.png"></p><h3 id="【找找GIF】"><a href="#【找找GIF】" class="headerlink" title="【找找GIF】"></a>【找找GIF】</h3><h4 id="考点-4"><a href="#考点-4" class="headerlink" title="考点"></a>考点</h4><ul><li>动图分析</li><li>文件头识别<h4 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h4></li><li>题目提示动图分析 <img src="https://s2.loli.net/2022/07/29/bfuO8dS64zeCJAT.jpg"></li><li>aaa文件是png图片，修改高后发现密码<img src="https://s2.loli.net/2022/07/29/7rpCmvTGjcgWYlu.jpg"></li><li>使用密码<strong>fjgk90^&amp;vvvfdd</strong>解压bbb.zip得到bbb文件，分析bbb文件发现是gif图片，但缺少文件头 <img src="https://s2.loli.net/2022/07/29/OmbZ3P62lBdnyEF.jpg"></li><li>添加文件头，使用stegsolve分析得到flag <img src="https://s2.loli.net/2022/07/29/VuG5h9fHFAoEQ1N.jpg"></li></ul><h3 id="【大佬大佬】"><a href="#【大佬大佬】" class="headerlink" title="【大佬大佬】"></a>【大佬大佬】</h3><h4 id="考点-5"><a href="#考点-5" class="headerlink" title="考点"></a>考点</h4><ul><li>lsb隐写</li><li>修改图片高度<h4 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h4></li><li>题目提示获取图片的lsb隐写，修改图片尺寸，stegsolve分析获取png图片<img src="https://s2.loli.net/2022/07/29/gSezG2PWDdVZmhx.jpg"></li><li>修改图片高度获取flag <img src="https://s2.loli.net/2022/07/29/2T5RtS3poQfwOLZ.jpg"></li></ul><h3 id="【The-fun-picture】"><a href="#【The-fun-picture】" class="headerlink" title="【The fun picture】"></a>【The fun picture】</h3><h4 id="考点-6"><a href="#考点-6" class="headerlink" title="考点"></a>考点</h4><ul><li>压缩包密码爆破</li><li>图片分析识别<h4 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h4></li><li>题目提示简单的图片分析，解压题目附件提示要密码，爆破出密码为<strong>gh89</strong><br><img src="https://s2.loli.net/2022/07/29/Fq6SroxTWnzRpu5.jpg"></li><li>题目有三个文件，FUN.png是压缩包，解压出个flag6文件 <img src="https://s2.loli.net/2022/07/29/o3YLWjcwt7l6VbG.jpg"></li><li>flag6是个png图片，添加文件头，打开是二维码 <img src="https://s2.loli.net/2022/07/29/cfRKC9SopWyl2zX.jpg"></li><li>扫描得到一串base64字符串解码得到flag <img src="https://s2.loli.net/2022/07/29/tyi6lSeWMw8sIGP.jpg"></li></ul><hr><h2 id="IV-CRYPTO"><a href="#IV-CRYPTO" class="headerlink" title="IV. CRYPTO"></a>IV. CRYPTO</h2><h3 id="【babyRSA】"><a href="#【babyRSA】" class="headerlink" title="【babyRSA】"></a>【babyRSA】</h3><h4 id="考点-7"><a href="#考点-7" class="headerlink" title="考点"></a>考点</h4><ul><li><h4 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h4></li><li>  根据给出的数据发现少了N，而根据RSA算法得知</li><li>  <code>N = q * p</code></li><li>  <code>r = (p -1) * (q - 1)</code> 求得关于r求e的模逆元D</li></ul><p><img src="https://blog.jamiexu.cn/wp-content/uploads/2022/07/Aspose.Words_.12409865-b923-4cb8-8034-4b6e1d1fe491.031.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">P=<span class="number">122661900225958537473593999629721155547445152508344628379156151659796333424765145214036218314036538367449542188442412001233407797975924025535192193558685614179856037200129145911423039793961531441773477698026833665056111228506730246279582720435235709543855376031268946650792983451355568301885456994665262875749</span></span><br><span class="line"></span><br><span class="line">Q=<span class="number">152724789318100477389853045726902882371493936383383619555088124064539207319241990180547432685312774553372809313491471789726609450644068056661970298474939384495232219405764685450242448624149384201199927977364779992607712253080589100019883370160068766123718298014862011278111513825917110130106578782458953059859</span></span><br><span class="line"></span><br><span class="line">E=<span class="number">33</span></span><br><span class="line">N = P * Q</span><br><span class="line">C=<span class="number">11852026632281701016724299626853609925180998208455660311000462227020929333377781887963495074427303581997467868526563174560178272022772274396432682692794063165224973938499915472777760940556428251371134510052503881386517887007288504116932135535735038891342756359104150065602002052735935730495500714873277911540993054971564663909394753577934282562474400064427000243598933915050367444422905464938144621404295662232927161154426321727883942392656517143955794390377418120483810457172329736269488772672472120992463072392783584779323287481047740952196227038157414187174528649660615317679662848063671637919176651288177629770199</span></span><br><span class="line"></span><br><span class="line">D = gmpy2.invert(E, (P - <span class="number">1</span>) * (Q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">decData = gmpy2.powmod(C,D,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(decData)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><ul><li>  求得flag</li></ul><p><img src="https://blog.jamiexu.cn/wp-content/uploads/2022/07/Aspose.Words_.12409865-b923-4cb8-8034-4b6e1d1fe491.034.png"></p><h2 id="Ⅴ-Reverse"><a href="#Ⅴ-Reverse" class="headerlink" title="Ⅴ.Reverse"></a>Ⅴ.Reverse</h2><h3 id="【encrypt】"><a href="#【encrypt】" class="headerlink" title="【encrypt】"></a>【encrypt】</h3><h4 id="考点-8"><a href="#考点-8" class="headerlink" title="考点"></a>考点</h4><ul><li>哈夫曼压缩</li><li>参考<ul><li>  <a href="https://github.com/tclxspy/Articles/blob/master/algorithm/MD/%E7%AE%97%E6%B3%95%2319--%E9%9C%8D%E5%A4%AB%E6%9B%BC%E5%8E%8B%E7%BC%A9%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9%EF%BC%89.md">https://github.com/tclxspy/Articles/blob/master/algorithm/MD/%E7%AE%97%E6%B3%95%2319–%E9%9C%8D%E5%A4%AB%E6%9B%BC%E5%8E%8B%E7%BC%A9%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9%EF%BC%89.md</a></li><li><a href="https://huffman.ooz.ie/">https://huffman.ooz.ie/</a><h4 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5></li></ul></li><li>直接用IDA打开main函数发现调用了一个子函数，双击跟进 <img src="https://s2.loli.net/2022/07/23/2JvrflcSBd5OKEF.png"></li><li>分配了两个内存空间，调用了三个子程序。 <img src="https://s2.loli.net/2022/07/23/xZQtDce5lmRPvJK.png"></li><li>经过分析得出每个子程序的作用<ol><li> <code>sub_4007A1</code>读取文件</li><li> <code>sub_40081B</code>对文件进行处理</li><li> <code>sub_40074C</code>写出文件</li></ol></li><li>直接双击跟进<code>sub_40081B</code>对函数参数变量重命名以便于分析 <img src="https://s2.loli.net/2022/07/23/UNKBFHeJ94j3Rm6.png"></li><li>首先写出的文件头为 <strong>“flag”</strong> <img src="https://s2.loli.net/2022/07/23/RKT6mV3sUcqlkSY.png"></li><li>统计字节频率简称词频 <img src="https://s2.loli.net/2022/07/23/mM93pTHFE8hboaG.png"></li><li>对数据进行编码 <img src="https://s2.loli.net/2022/07/23/GbmWHrk3Dd56FNc.png"></li><li>做差值存将插值写出到dest <img src="https://s2.loli.net/2022/07/23/Fzwg1WtKepV43dc.png"></li><li>判断是否有剩余的比特位没写出到dest，补齐数据。并判断当前文件长度如果是偶数则写出 “ <strong>.</strong> “</li><li>最后两给字节可以理解成对数据的校验位 <img src="https://s2.loli.net/2022/07/23/u3xgNjQBOeoh2lP.png"></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li> 统计词频</li><li> 对数据进行编码</li><li> 对数据换表后写出</li><li>通过简单的算法计算v25，把v32 和 v25的数据做差后的数据写出<ul><li>文件的大致结构  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">File</span>&#123;</span><br><span class="line"><span class="type">int</span> magic =  <span class="number">0x666C6167</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> frequency_table_size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *frequency_table;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> origin_file_size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *code_data;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> check;</span><br><span class="line">&#125;File;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>获取词频表，对其换表</li><li>使用程序中的算法将原数据转换成插值编码</li><li>根据哈夫曼压缩原理将每个数据的比特位进行比较</li><li>写出数据</li><li>解密脚本<ol><li> 脚本1</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data: <span class="type">Any</span>, left, right</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.data = data</span><br><span class="line">        self.left: Node = left</span><br><span class="line">        self.right: Node = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.left == <span class="literal">None</span> <span class="keyword">and</span> self.right == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">const = [</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x62</span>, <span class="number">0xe3</span>, <span class="number">0x8d</span>, <span class="number">0x32</span>, <span class="number">0x9e</span>, <span class="number">0xdb</span>, <span class="number">0x63</span>, <span class="number">0x5e</span>, <span class="number">0x82</span>, <span class="number">0x53</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xcc</span>, <span class="number">0x2b</span>, <span class="number">0xbc</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x7d</span>, <span class="number">0x4d</span>, <span class="number">0x37</span>, <span class="number">0x28</span>, <span class="number">0xb2</span>, <span class="number">0xef</span>, <span class="number">0x46</span>, <span class="number">0xed</span>, <span class="number">0x2a</span>, <span class="number">0xde</span>, <span class="number">0xc6</span>, <span class="number">0x8a</span>, <span class="number">0x44</span>, <span class="number">0x7a</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xae</span>, <span class="number">0x13</span>, <span class="number">0x52</span>, <span class="number">0x70</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x1f</span>, <span class="number">0xaf</span>, <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9a</span>, <span class="number">0xf7</span>, <span class="number">0x31</span>, <span class="number">0x43</span>, <span class="number">0xc1</span>, <span class="number">0xf3</span>,</span><br><span class="line">    <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xa8</span>, <span class="number">0x30</span>, <span class="number">0x9b</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0xcd</span>, <span class="number">0xb3</span>, <span class="number">0xe1</span>, <span class="number">0x7c</span>, <span class="number">0x39</span>, <span class="number">0xfc</span>, <span class="number">0xc7</span>, <span class="number">0x94</span>, <span class="number">0x3c</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x7e</span>, <span class="number">0x19</span>, <span class="number">0xdd</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x10</span>, <span class="number">0x8f</span>, <span class="number">0xd9</span>, <span class="number">0x4c</span>, <span class="number">0x40</span>, <span class="number">0x9f</span>, <span class="number">0xdf</span>, <span class="number">0x41</span>, <span class="number">0x6d</span>, <span class="number">0x1d</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xa1</span>, <span class="number">0xb1</span>, <span class="number">0x8e</span>, <span class="number">0x8b</span>, <span class="number">0xff</span>, <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0x4a</span>, <span class="number">0x96</span>, <span class="number">0x0a</span>, <span class="number">0xdc</span>, <span class="number">0x08</span>, <span class="number">0xd7</span>, <span class="number">0xe9</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x15</span>, <span class="number">0xcf</span>, <span class="number">0xb9</span>, <span class="number">0xd6</span>, <span class="number">0xb8</span>, <span class="number">0xbd</span>, <span class="number">0x26</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x2f</span>, <span class="number">0xd1</span>, <span class="number">0xc3</span>, <span class="number">0x17</span>, <span class="number">0x68</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0x0d</span>, <span class="number">0x42</span>, <span class="number">0x91</span>, <span class="number">0x83</span>, <span class="number">0x54</span>, <span class="number">0x5c</span>, <span class="number">0xb5</span>, <span class="number">0xf0</span>, <span class="number">0x50</span>, <span class="number">0x79</span>, <span class="number">0xe7</span>, <span class="number">0xa2</span>, <span class="number">0x60</span>, <span class="number">0x6e</span>, <span class="number">0xa9</span>,</span><br><span class="line">    <span class="number">0x16</span>, <span class="number">0xf6</span>, <span class="number">0xd0</span>, <span class="number">0x47</span>, <span class="number">0xf2</span>, <span class="number">0x48</span>, <span class="number">0x0e</span>, <span class="number">0x18</span>, <span class="number">0xc8</span>, <span class="number">0x3b</span>, <span class="number">0xb0</span>, <span class="number">0x38</span>, <span class="number">0x0b</span>, <span class="number">0x67</span>, <span class="number">0xaa</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0x1c</span>, <span class="number">0xfa</span>, <span class="number">0x5f</span>, <span class="number">0x5b</span>, <span class="number">0x06</span>, <span class="number">0x36</span>, <span class="number">0xa3</span>, <span class="number">0x03</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x87</span>, <span class="number">0x23</span>, <span class="number">0x2c</span>, <span class="number">0x73</span>, <span class="number">0x12</span>, <span class="number">0xf8</span>,</span><br><span class="line">    <span class="number">0xfd</span>, <span class="number">0xce</span>, <span class="number">0x93</span>, <span class="number">0xfb</span>, <span class="number">0x49</span>, <span class="number">0x57</span>, <span class="number">0xc9</span>, <span class="number">0x6a</span>, <span class="number">0x6b</span>, <span class="number">0xe2</span>, <span class="number">0xac</span>, <span class="number">0x07</span>, <span class="number">0x88</span>, <span class="number">0x84</span>, <span class="number">0xd8</span>, <span class="number">0xeb</span>,</span><br><span class="line">    <span class="number">0x2d</span>, <span class="number">0xd3</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0x81</span>, <span class="number">0x78</span>, <span class="number">0xba</span>, <span class="number">0xe5</span>, <span class="number">0x85</span>, <span class="number">0x65</span>, <span class="number">0xe0</span>, <span class="number">0x5d</span>, <span class="number">0xbe</span>, <span class="number">0xa4</span>, <span class="number">0x4e</span>,</span><br><span class="line">    <span class="number">0xf1</span>, <span class="number">0x4f</span>, <span class="number">0x51</span>, <span class="number">0x64</span>, <span class="number">0x0f</span>, <span class="number">0x35</span>, <span class="number">0x76</span>, <span class="number">0x6c</span>, <span class="number">0xf9</span>, <span class="number">0x3a</span>, <span class="number">0x27</span>, <span class="number">0xc5</span>, <span class="number">0xf5</span>, <span class="number">0xda</span>, <span class="number">0xa7</span>, <span class="number">0x95</span>,</span><br><span class="line">    <span class="number">0xcb</span>, <span class="number">0x25</span>, <span class="number">0x9d</span>, <span class="number">0xca</span>, <span class="number">0x75</span>, <span class="number">0xb7</span>, <span class="number">0x9c</span>, <span class="number">0x1b</span>, <span class="number">0x0c</span>, <span class="number">0x7b</span>, <span class="number">0x58</span>, <span class="number">0x3e</span>, <span class="number">0xe4</span>, <span class="number">0x2e</span>, <span class="number">0x3f</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xee</span>, <span class="number">0x4b</span>, <span class="number">0x09</span>, <span class="number">0xfe</span>, <span class="number">0x1a</span>, <span class="number">0x7f</span>, <span class="number">0xa0</span>, <span class="number">0x29</span>, <span class="number">0xea</span>, <span class="number">0xc4</span>, <span class="number">0x8c</span>, <span class="number">0x86</span>, <span class="number">0x3d</span>, <span class="number">0xad</span>, <span class="number">0xe8</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x6f</span>, <span class="number">0x33</span>, <span class="number">0x02</span>, <span class="number">0xd2</span>, <span class="number">0xec</span>, <span class="number">0x22</span>, <span class="number">0xf4</span>, <span class="number">0xd4</span>, <span class="number">0x01</span>, <span class="number">0xc2</span>, <span class="number">0x74</span>, <span class="number">0xbb</span>, <span class="number">0xc0</span>, <span class="number">0x04</span>, <span class="number">0x72</span>, <span class="number">0x11</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r_const = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"></span><br><span class="line">out_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_haffuman</span>(<span class="params">node: Node, frequency_table</span>):</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(frequency_table):</span><br><span class="line">        cur = node</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> v:</span><br><span class="line">            new = Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> cur.left != <span class="literal">None</span>:</span><br><span class="line">                    new.left = cur.left.left</span><br><span class="line">                    new.right = cur.left.right</span><br><span class="line"></span><br><span class="line">                cur.left = new</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> cur.right != <span class="literal">None</span>:</span><br><span class="line">                    new.left = cur.right.left</span><br><span class="line">                    new.right = cur.right.right</span><br><span class="line"></span><br><span class="line">                cur.right = new</span><br><span class="line"></span><br><span class="line">            cur = new</span><br><span class="line"></span><br><span class="line">        cur.data = i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析文件结构</span></span><br><span class="line">file = read_file(os.path.join(os.getcwd(), <span class="string">&#x27;input.crypt&#x27;</span>))</span><br><span class="line">offset = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">frequency_table_size = c_uint16(</span><br><span class="line">    struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, file, offset)[<span class="number">0</span>]).value</span><br><span class="line">offset += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">frequency_table = <span class="built_in">list</span>(file[offset:offset + frequency_table_size])</span><br><span class="line">offset += frequency_table_size</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Frequncy table size: <span class="subst">&#123;frequency_table_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">ori_file_size = c_uint16(struct.unpack_from(<span class="string">&#x27;&lt;I&#x27;</span>, file, offset)[<span class="number">0</span>]).value</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Origin file size: <span class="subst">&#123;ori_file_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">zip_data = <span class="built_in">list</span>(file)[offset: offset + ori_file_size]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对词频表进行换表</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(const):</span><br><span class="line">    r_const[v] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(frequency_table):</span><br><span class="line">    frequency_table[i] = r_const[v]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成每个编码做差值后的编码</span></span><br><span class="line">total = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">each_data_to_save = c_uint8(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">code_array = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    index = i</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> total + (<span class="number">1</span> &lt;&lt; j) &gt; index:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += (<span class="number">1</span> &lt;&lt; j)</span><br><span class="line">        j += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    each_data_to_save.value = <span class="number">1</span> &lt;&lt; j</span><br><span class="line"></span><br><span class="line">    each_data_to_save.value = (index - total)</span><br><span class="line"></span><br><span class="line">    bin_data = <span class="built_in">bin</span>(each_data_to_save.value)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    count_bit_save = <span class="built_in">int</span>(<span class="number">5</span> + j / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_bit_save - <span class="built_in">len</span>(bin_data)):</span><br><span class="line">        bin_data = <span class="string">&#x27;0&#x27;</span> + bin_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count_bit_save == <span class="number">9</span>:</span><br><span class="line">        bin_data = <span class="string">&#x27;1&#x27;</span> + bin_data[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    code_array[index] = bin_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建哈夫曼树</span></span><br><span class="line">haffuman = Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">build_haffuman(haffuman, code_array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据转换成比特位</span></span><br><span class="line">zip_data = [<span class="built_in">bin</span>(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> zip_data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(zip_data):</span><br><span class="line">    k = v</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span> - <span class="built_in">len</span>(v)):</span><br><span class="line">        k = <span class="string">&#x27;0&#x27;</span> + k</span><br><span class="line">    zip_data[i] = k</span><br><span class="line">zip_data = <span class="string">&#x27;&#x27;</span>.join(zip_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据哈夫曼树解码数据</span></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line">cur = haffuman</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(zip_data):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cur.is_leaf():</span><br><span class="line">        data.append(frequency_table[cur.data])</span><br><span class="line">        cur = haffuman</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> zip_data[pos] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        cur = cur.left</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur = cur.right</span><br><span class="line"></span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写出文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.getcwd(), <span class="string">&#x27;out.bin&#x27;</span>), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><ol start="2"><li> 脚本2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">const = [</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x62</span>, <span class="number">0xe3</span>, <span class="number">0x8d</span>, <span class="number">0x32</span>, <span class="number">0x9e</span>, <span class="number">0xdb</span>, <span class="number">0x63</span>, <span class="number">0x5e</span>, <span class="number">0x82</span>, <span class="number">0x53</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xcc</span>, <span class="number">0x2b</span>, <span class="number">0xbc</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x7d</span>, <span class="number">0x4d</span>, <span class="number">0x37</span>, <span class="number">0x28</span>, <span class="number">0xb2</span>, <span class="number">0xef</span>, <span class="number">0x46</span>, <span class="number">0xed</span>, <span class="number">0x2a</span>, <span class="number">0xde</span>, <span class="number">0xc6</span>, <span class="number">0x8a</span>, <span class="number">0x44</span>, <span class="number">0x7a</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xae</span>, <span class="number">0x13</span>, <span class="number">0x52</span>, <span class="number">0x70</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x1f</span>, <span class="number">0xaf</span>, <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9a</span>, <span class="number">0xf7</span>, <span class="number">0x31</span>, <span class="number">0x43</span>, <span class="number">0xc1</span>, <span class="number">0xf3</span>,</span><br><span class="line">    <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xa8</span>, <span class="number">0x30</span>, <span class="number">0x9b</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0xcd</span>, <span class="number">0xb3</span>, <span class="number">0xe1</span>, <span class="number">0x7c</span>, <span class="number">0x39</span>, <span class="number">0xfc</span>, <span class="number">0xc7</span>, <span class="number">0x94</span>, <span class="number">0x3c</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x7e</span>, <span class="number">0x19</span>, <span class="number">0xdd</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x10</span>, <span class="number">0x8f</span>, <span class="number">0xd9</span>, <span class="number">0x4c</span>, <span class="number">0x40</span>, <span class="number">0x9f</span>, <span class="number">0xdf</span>, <span class="number">0x41</span>, <span class="number">0x6d</span>, <span class="number">0x1d</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xa1</span>, <span class="number">0xb1</span>, <span class="number">0x8e</span>, <span class="number">0x8b</span>, <span class="number">0xff</span>, <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0x4a</span>, <span class="number">0x96</span>, <span class="number">0x0a</span>, <span class="number">0xdc</span>, <span class="number">0x08</span>, <span class="number">0xd7</span>, <span class="number">0xe9</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x15</span>, <span class="number">0xcf</span>, <span class="number">0xb9</span>, <span class="number">0xd6</span>, <span class="number">0xb8</span>, <span class="number">0xbd</span>, <span class="number">0x26</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x2f</span>, <span class="number">0xd1</span>, <span class="number">0xc3</span>, <span class="number">0x17</span>, <span class="number">0x68</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0x0d</span>, <span class="number">0x42</span>, <span class="number">0x91</span>, <span class="number">0x83</span>, <span class="number">0x54</span>, <span class="number">0x5c</span>, <span class="number">0xb5</span>, <span class="number">0xf0</span>, <span class="number">0x50</span>, <span class="number">0x79</span>, <span class="number">0xe7</span>, <span class="number">0xa2</span>, <span class="number">0x60</span>, <span class="number">0x6e</span>, <span class="number">0xa9</span>,</span><br><span class="line">    <span class="number">0x16</span>, <span class="number">0xf6</span>, <span class="number">0xd0</span>, <span class="number">0x47</span>, <span class="number">0xf2</span>, <span class="number">0x48</span>, <span class="number">0x0e</span>, <span class="number">0x18</span>, <span class="number">0xc8</span>, <span class="number">0x3b</span>, <span class="number">0xb0</span>, <span class="number">0x38</span>, <span class="number">0x0b</span>, <span class="number">0x67</span>, <span class="number">0xaa</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0x1c</span>, <span class="number">0xfa</span>, <span class="number">0x5f</span>, <span class="number">0x5b</span>, <span class="number">0x06</span>, <span class="number">0x36</span>, <span class="number">0xa3</span>, <span class="number">0x03</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x87</span>, <span class="number">0x23</span>, <span class="number">0x2c</span>, <span class="number">0x73</span>, <span class="number">0x12</span>, <span class="number">0xf8</span>,</span><br><span class="line">    <span class="number">0xfd</span>, <span class="number">0xce</span>, <span class="number">0x93</span>, <span class="number">0xfb</span>, <span class="number">0x49</span>, <span class="number">0x57</span>, <span class="number">0xc9</span>, <span class="number">0x6a</span>, <span class="number">0x6b</span>, <span class="number">0xe2</span>, <span class="number">0xac</span>, <span class="number">0x07</span>, <span class="number">0x88</span>, <span class="number">0x84</span>, <span class="number">0xd8</span>, <span class="number">0xeb</span>,</span><br><span class="line">    <span class="number">0x2d</span>, <span class="number">0xd3</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0x81</span>, <span class="number">0x78</span>, <span class="number">0xba</span>, <span class="number">0xe5</span>, <span class="number">0x85</span>, <span class="number">0x65</span>, <span class="number">0xe0</span>, <span class="number">0x5d</span>, <span class="number">0xbe</span>, <span class="number">0xa4</span>, <span class="number">0x4e</span>,</span><br><span class="line">    <span class="number">0xf1</span>, <span class="number">0x4f</span>, <span class="number">0x51</span>, <span class="number">0x64</span>, <span class="number">0x0f</span>, <span class="number">0x35</span>, <span class="number">0x76</span>, <span class="number">0x6c</span>, <span class="number">0xf9</span>, <span class="number">0x3a</span>, <span class="number">0x27</span>, <span class="number">0xc5</span>, <span class="number">0xf5</span>, <span class="number">0xda</span>, <span class="number">0xa7</span>, <span class="number">0x95</span>,</span><br><span class="line">    <span class="number">0xcb</span>, <span class="number">0x25</span>, <span class="number">0x9d</span>, <span class="number">0xca</span>, <span class="number">0x75</span>, <span class="number">0xb7</span>, <span class="number">0x9c</span>, <span class="number">0x1b</span>, <span class="number">0x0c</span>, <span class="number">0x7b</span>, <span class="number">0x58</span>, <span class="number">0x3e</span>, <span class="number">0xe4</span>, <span class="number">0x2e</span>, <span class="number">0x3f</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xee</span>, <span class="number">0x4b</span>, <span class="number">0x09</span>, <span class="number">0xfe</span>, <span class="number">0x1a</span>, <span class="number">0x7f</span>, <span class="number">0xa0</span>, <span class="number">0x29</span>, <span class="number">0xea</span>, <span class="number">0xc4</span>, <span class="number">0x8c</span>, <span class="number">0x86</span>, <span class="number">0x3d</span>, <span class="number">0xad</span>, <span class="number">0xe8</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x6f</span>, <span class="number">0x33</span>, <span class="number">0x02</span>, <span class="number">0xd2</span>, <span class="number">0xec</span>, <span class="number">0x22</span>, <span class="number">0xf4</span>, <span class="number">0xd4</span>, <span class="number">0x01</span>, <span class="number">0xc2</span>, <span class="number">0x74</span>, <span class="number">0xbb</span>, <span class="number">0xc0</span>, <span class="number">0x04</span>, <span class="number">0x72</span>, <span class="number">0x11</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r_const = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"></span><br><span class="line">out_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析文件结构</span></span><br><span class="line">file = read_file(os.path.join(os.getcwd(), <span class="string">&#x27;input.crypt&#x27;</span>))</span><br><span class="line">offset = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">frequency_table_size = c_uint16(struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, file, offset)[<span class="number">0</span>]).value</span><br><span class="line">offset += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">frequency_table = <span class="built_in">list</span>(file[offset:offset + frequency_table_size])</span><br><span class="line">offset += frequency_table_size</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Frequncy table size: <span class="subst">&#123;frequency_table_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">ori_file_size = c_uint16(struct.unpack_from(<span class="string">&#x27;&lt;I&#x27;</span>, file, offset)[<span class="number">0</span>]).value</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Origin file size: <span class="subst">&#123;ori_file_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">zip_data = <span class="built_in">list</span>(file)[offset: offset + ori_file_size]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对词频表进行换表</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(const):</span><br><span class="line">    r_const[v]  = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(frequency_table):</span><br><span class="line">    frequency_table[i] = r_const[v]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成每个编码做差值后的编码</span></span><br><span class="line">total = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">each_data_to_save = c_uint8(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">code_array = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    index = i</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> total + (<span class="number">1</span> &lt;&lt; j) &gt; index:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += (<span class="number">1</span> &lt;&lt; j)</span><br><span class="line">        j += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    each_data_to_save.value = <span class="number">1</span> &lt;&lt; j</span><br><span class="line"></span><br><span class="line">    each_data_to_save.value = (index - total)</span><br><span class="line"></span><br><span class="line">    bin_data = <span class="built_in">bin</span>(each_data_to_save.value)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    count_bit_save = <span class="built_in">int</span>(<span class="number">5</span> + j / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_bit_save - <span class="built_in">len</span>(bin_data)):</span><br><span class="line">        bin_data = <span class="string">&#x27;0&#x27;</span> + bin_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count_bit_save == <span class="number">9</span>:</span><br><span class="line">        bin_data = <span class="string">&#x27;1&#x27;</span> + bin_data[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    code_array[index] = bin_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据部转换成比特位</span></span><br><span class="line">zip_data = [<span class="built_in">bin</span>(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> zip_data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(zip_data):</span><br><span class="line">    k = v</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span> - <span class="built_in">len</span>(v)):</span><br><span class="line">        k = <span class="string">&#x27;0&#x27;</span> + k</span><br><span class="line">    zip_data[i] = k</span><br><span class="line">zip_data = <span class="string">&#x27;&#x27;</span>.join(zip_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析比特位</span></span><br><span class="line">size = <span class="number">0</span></span><br><span class="line">current_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">while</span> size &lt; ori_file_size:</span><br><span class="line">    current_data += zip_data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> current_data <span class="keyword">in</span> code_array:</span><br><span class="line">        data.append(frequency_table[code_array.index(current_data)])</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">        current_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    zip_data = zip_data[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写出文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.getcwd(),<span class="string">&#x27;out.bin&#x27;</span>),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;战队名：超级飞侠&quot;&gt;&lt;a href=&quot;#战队名：超级飞侠&quot; class=&quot;headerlink&quot; title=&quot;战队名：超级飞侠&quot;&gt;&lt;/a&gt;战队名：超级飞侠&lt;/h5&gt;&lt;h5 id=&quot;撰写时间：2022-07-16-20-43&quot;&gt;&lt;a href=&quot;#撰写时间：202</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/categories/CTF/Reverse/"/>
    
    <category term="Crypto" scheme="https://blog.jamiexu.cn/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/tags/Reverse/"/>
    
    <category term="Crypto" scheme="https://blog.jamiexu.cn/tags/Crypto/"/>
    
    <category term="Python" scheme="https://blog.jamiexu.cn/tags/Python/"/>
    
    <category term="Misc" scheme="https://blog.jamiexu.cn/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>【CTF/WP/Crypto】第二届广东大学生网络安全攻防大赛</title>
    <link href="https://blog.jamiexu.cn/2022/06/09/%E3%80%90ctf-wp-crypto%E3%80%91%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B/"/>
    <id>https://blog.jamiexu.cn/2022/06/09/%E3%80%90ctf-wp-crypto%E3%80%91%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B/</id>
    <published>2022-06-09T01:47:14.000Z</published>
    <updated>2022-07-29T01:34:28.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crypto-xor2"><a href="#Crypto-xor2" class="headerlink" title="Crypto-xor2"></a>Crypto-xor2</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a><strong>程序分析</strong></h2><ul><li>  ”轮环异或加密，你能解开么？格式：flag{}“    </li><li>  文件下载有一个py文件和一个文本文件</li><li>  从描述可得知就是一个异或加密</li><li>  从图中分析得知密钥是四位的密钥且不知道，然后flag也不知道。基本上无解了  </li><li>  But!!!从描述中可知flag前四位是”flag”又是异或加密。异或有个特性就是异或两次等于原文那么是不是可以利用给出的前四个flag进行key的解密呢</li></ul><p><img src="https://s2.loli.net/2022/07/29/hA7jMPgtNFsQuU6.png"></p><h2 id="解密脚本编写"><a href="#解密脚本编写" class="headerlink" title="解密脚本编写"></a><strong>解密脚本编写</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 从cipher中整理得到的数据</span><br><span class="line">   encData = [</span><br><span class="line">       0x1E, 0x14, 0x19, 0x1F, 0x03, 0x1E, 0x1B, 0x1B, 0x1A, 0x48, 0x4E, 0x4E, 0x4D, 0x55, 0x1A, 0x1B,</span><br><span class="line">       0x1D, 0x4D, 0x55, 0x1C, 0x4B, 0x4A, 0x41, 0x55, 0x19, 0x1B, 0x19, 0x4F, 0x55, 0x41, 0x41, 0x49,</span><br><span class="line">       0x4F, 0x41, 0x1A, 0x1C, 0x1B, 0x41, 0x1D, 0x1C, 0x4B, 0x05</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   # 解密出key</span><br><span class="line">   key = [0] * 4</span><br><span class="line">   key[0] = encData[0] ^ ord(&#x27;f&#x27;)</span><br><span class="line">   key[1] = encData[1] ^ ord(&#x27;l&#x27;)</span><br><span class="line">   key[2] = encData[2] ^ ord(&#x27;a&#x27;)</span><br><span class="line">   key[3] = encData[3] ^ ord(&#x27;g&#x27;)</span><br><span class="line"></span><br><span class="line">   # 循环解密Flag</span><br><span class="line">   for i, v in enumerate(encData):</span><br><span class="line">       print(chr(v ^ key[i % len(key)]),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/prAhXUbBtYmZkT7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Crypto-xor2&quot;&gt;&lt;a href=&quot;#Crypto-xor2&quot; class=&quot;headerlink&quot; title=&quot;Crypto-xor2&quot;&gt;&lt;/a&gt;Crypto-xor2&lt;/h1&gt;&lt;h2 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://blog.jamiexu.cn/categories/CTF/Crypto/"/>
    
    
    <category term="Crypto" scheme="https://blog.jamiexu.cn/tags/Crypto/"/>
    
    <category term="Python" scheme="https://blog.jamiexu.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【CTF&amp;Re&amp;WriteUp】第二届广东大学生网络安全攻防大赛ReWP</title>
    <link href="https://blog.jamiexu.cn/2022/06/08/%E3%80%90ctf-wp-re%E3%80%91%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B-re/"/>
    <id>https://blog.jamiexu.cn/2022/06/08/%E3%80%90ctf-wp-re%E3%80%91%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9B-re/</id>
    <published>2022-06-08T11:34:44.000Z</published>
    <updated>2022-07-29T04:24:38.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LUOJIABASUO"><a href="#LUOJIABASUO" class="headerlink" title="LUOJIABASUO"></a>LUOJIABASUO</h1><ul><li>  半个月前参加了一场比赛，我主要是负责的Re但是只解出了一个比较简单的那就是Pyre其他的我打开来看了一下就关了甚至没调试。后来发现还是挺简单的一个题目</li></ul><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><ul><li>  首先老规矩IDA打开静态分析看看，发现压根无法分析。主要是这里使用了虚表调用。虚表调用的子程序（函数）是在每次运行的时候才计算出来子程序的地址。这导致IDA分析的时候是无法对齐静态的分析的。所以</li></ul><p><img src="https://s2.loli.net/2022/07/29/pyjhJQ3LiKUwRnN.png"></p><ul><li>  按照老规矩动态调试挂起来，发现IDA没有控制权无法控制程序当程序运行起来的 时候没有响应切不能在IDA结束远程的调试目标。那说明存在反调试。</li></ul><p><img src="https://s2.loli.net/2022/07/29/XWqJR5B7b6H9lne.png"></p><ul><li>  如何寻找反调试的地方在哪呢？也挺简单的只要在入口处下个断点不断的运行程序看看哪里IDA没有控制权了那么说明该地方具有反调试</li><li>  要注意的 是main函数不是最开始的入口，”__scrt_common_main_seh“ 这个子程序才是最开始执行的</li></ul><blockquote><p>引用来自<a href="https://www.dazhuanlan.com/relic256/topics/1212274">https://www.dazhuanlan.com/relic256/topics/1212274</a></p><p>虽然 VS 系列入口函数均为<code>mainCRTStartup</code>，但不同版本的实现仍然有些许不同。 在 VC6.0 中，可通过 API<code>GetVersion</code>、<code>GetCommandLine</code>来找到入口函数。而<code>main</code>函数是其中唯一一个 3 个参数的函数，故可以通过找 3 个 push 来找到<code>main</code>函数 (<code>WinMain</code>为 4 个 push)。 在 VS2013 中，开始先使用<code>__security_init_cookie</code>函数初始化 cookie(/GS 选项需要使用的，详见)，再进入<code>_tmainCRTStartup</code>中进行类似 VC6 中的类似初始化。这在 Debug 版的汇编中体现为一个 jmp 后两个连续的 call，而<code>main</code>函数在第二个 call 当中。在 Release 版中，因为优化而入口处直接便是一个 call 后接一个 jmp，而<code>main</code>函数在 jmp 中。 在 VS2015 中，<code>mainCRTStartup</code>函数中只有<code>__scrt_common_main</code>函数，在这个函数中先调用<code>__security_init_cookie</code>，再调用<code>__scrt_common_main_seh</code>，在<code>__scrt_common_main_seh</code>中进行类似 VC6 的初始化，其后使用<code>invoke_main</code>来调用<code>main</code>函数 (或者其他版本的 main)。这些在 Debug 版的汇编中体现为一个 jmp 后一个 call，再后两个连续的 call，而<code>main</code>函数在第二个 call 中的<code>invoke_main</code>当中。</p></blockquote><ul><li>  所以我们不能直接在main函数的入口下断，而是在<code>__scrt_common_main_seh</code>的领空下断</li></ul><p><img src="https://s2.loli.net/2022/07/29/1ch4p2UaQTOVnSl.png"><img src="https://s2.loli.net/2022/07/29/1P3XlwBC8hpZKiQ.png"></p><ul><li>  发现调用了_initterm后就就是去了控制权，这个函数看样子应该是标准库的函数</li></ul><blockquote><p>引用来自<a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/initterm-initterm-e?view=msvc-170">https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/initterm-initterm-e?view=msvc-170</a></p><p>Internal methods that walk a table of function pointers and initialize them. The first pointer is the starting location in the table and the second pointer is the ending location.</p></blockquote><ul><li>  看不懂没关系，因为我也看不懂哈哈哈哈。我猜测应该就是初始化。直接重新打开程序挂起动态跟进程序看看。可以看到循环调用了一个类似IAT表一样的表里的函数。这里可以单步调试看看RAX值为啥的时候IDA失去控制权也可以用跟踪。这里我用单步调试</li><li>  在call地方下个断点然后运行程序查看每次断下来后RAX的变化。发现当RAX为0x00007FF729431170的时候IDA失去了控制权</li><li>  直接跟进发现调用了一个子程序</li></ul><p><img src="https://s2.loli.net/2022/07/29/8yxPNBWhUzLfCAc.png"><img src="https://s2.loli.net/2022/07/29/BaIFWZvLTqXOpKn.png"></p><ul><li>  F7跟进后在该子程序中发现了反调试主要是NtSetInformationThread</li></ul><blockquote><p>引用来自<a href="https://anti-debug.checkpoint.com/techniques/interactive.html#ntsetinformationthread">https://anti-debug.checkpoint.com/techniques/interactive.html#ntsetinformationthread</a></p><p>The function ntdll!NtSetInformationThread() can be used to hide a thread from a debugger. It is possible with a help of the undocumented value THREAD_INFORMATION_CLASS::ThreadHideFromDebugger (0x11). This is intended to be used by an external process, but any thread can use it on itself. After the thread is hidden from the debugger, it will continue running but the debugger won’t receive events related to this thread. This thread can perform anti-debugging checks such as code checksum, debug flags verification, etc. However, if there is a breakpoint in the hidden thread or if we hide the main thread from the debugger, the process will crash and the debugger will be stuck. In the example, we hide the current thread from the debugger. This means that if we trace this code in the debugger or put a breakpoint to any instruction of this thread, the debugging will be stuck once ntdll!NtSetInformationThread() is called.</p></blockquote><ul><li>  意思是程序对调试器隐藏了线程，导致调试器无法找到线程来实现反调试</li><li>  知道了反调试在这后可以直接对其NOP，BUT！！！我发现NOP后每当程序运行起来会把该地方NOP的指令进行还原执行</li></ul><p><img src="https://s2.loli.net/2022/07/29/oLhq5Y6krGHb3lV.png"></p><ul><li>  可以直接修改属性达到执行了函数并不会隐藏线程，把所有断点去掉后程序可以正常运行，IDA也获得了程序的控制权</li><li>  但以为这就完了吗？No！这个程序很多地方都有反调试主要是调用了IsDebuggerPresent检测调试器的标志位，直接在IAT导入表查看IsDebuggerPresent的交叉引用</li></ul><p><img src="https://s2.loli.net/2022/07/29/kNZ4AfpzFYSEJix.png"></p><ul><li>  发现有三个地方调用了该函数，解决方法和上面那个反调试的方法一样把返回值改了就行。</li><li>  记得在函数执行后修改EAX = 0即可</li></ul><p><img src="https://s2.loli.net/2022/07/29/3UPWZLr2YflItSJ.png"></p><ul><li>  对所有引用的地方都设置好了之后回到main中下个断运行程序开始正题</li></ul><p><img src="https://s2.loli.net/2022/07/29/dTmVvh64fXSnzGc.png"></p><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><ul><li>  运行后发现首先判断了输入的flag的长度是否为36（这里有个技巧如果看到的不是十进制的值可以点击十六进制按H互相转换），重新运行输入36位flag</li></ul><p><img src="https://s2.loli.net/2022/07/29/SDNmVMlJfeFajZh.png"></p><ul><li>  首先分配大小为0x10大小的内存空间，把内存空间的地址存放到栈里</li></ul><p><img src="https://s2.loli.net/2022/07/29/Z7pYzHI3MxT5jWG.png"></p><ul><li>  继续执行调用了一个函数跟进分析发现其主要是把用户输入的flag所存放的位置的地址和一个 <code>Base::vftable</code>子程序的地址分别存放到一个连续的内存中（可理解为数组）</li><li>  继续发现调用了刚刚的子程序</li></ul><p><img src="https://s2.loli.net/2022/07/29/fKGEk5hDlqJsiYe.png"><img src="https://s2.loli.net/2022/07/29/Is495qvmxM7ikXZ.png"><img src="https://s2.loli.net/2022/07/29/OHWbAcpkhtLzxy6.png"></p><ul><li>  对比数据加密前后发现是反置了比特位，如13的二进制是1011反置后为1101。不理解就当作是加密，把用户输入的每个字符进行了比特位反置</li><li>  继续跟进发现了一个暂时不知道干嘛的函数，先记一下他就是对数据进行了赋值操作。了解一下后面需要的时候再回来分析</li></ul><p><img src="https://s2.loli.net/2022/07/29/TLmOyBEblWxI5Xf.png"><img src="https://s2.loli.net/2022/07/29/HlT4qMe1y3orFcu.png"></p><ul><li>  当直接执行了sub_7FF729432110子程序后发现程序直接闪退了，跟进看看。猜测可能又是反调试</li></ul><p><img src="https://s2.loli.net/2022/07/29/1dMgqXIiDbA6v89.png"></p><ul><li>具体可以参考<ul><li>  <a href="https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software">https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software</a></li><li>  <a href="https://anti-debug.checkpoint.com/techniques/process-memory.html">https://anti-debug.checkpoint.com/techniques/process-memory.html</a></li></ul></li><li>  这里我直接老规矩</li></ul><p><img src="https://s2.loli.net/2022/07/29/CXouZfti4aqSxLF.png"></p><ul><li>  又发现了一个call直接跟进，发现是解密用用户输入的前4位解密数据存放到lpAddress中</li></ul><p><img src="https://s2.loli.net/2022/07/29/WZepk9Jt2lBOiIx.png"><img src="https://s2.loli.net/2022/07/29/kWsJZlKR8PEL1a9.png"></p><ul><li>  有函数继续跟进，跟进发现又是赋值先看一眼后面需要用到参数再回来分析。但里面还调用了子程序逐个走进去看看。发现开辟了一个线程执行子程序查看一下子程序主要的作用是啥</li><li>  发现是对解密的数据进行逐个检查判断是否有0xCC如果有就退出程序</li></ul><p><img src="https://s2.loli.net/2022/07/29/73HLZGho6SeviyA.png"><img src="https://s2.loli.net/2022/07/29/4or7pWbG3UBIwNP.png"><img src="https://s2.loli.net/2022/07/29/DlNOKcSu1sehaWm.png"></p><ul><li>  有函数直接跟进去分析发现把刚刚解密的数据当成子程序执行</li><li>  那么可以猜测这是SMC（Self Modify Code）</li></ul><p><img src="https://s2.loli.net/2022/07/29/rAV9MsoEz7SNR6x.png"><img src="https://s2.loli.net/2022/07/29/2Oa1gzQy3lKBZFS.png"></p><ul><li>  现在就需要把该数据正确的解密出来才可以知道算法是啥。唯一能想到的就是爆破。</li><li>如果是子程序那么有一下几个特征<ul><li>  开头必须是<code>mov</code> 或 <code>push</code></li><li>  如果是<code>push</code>的时候必须是<code>push rbp</code></li><li>  结尾必须是<code>ret</code></li></ul></li><li>  其中根据结尾是ret可以直接把加密后的最后一个字节和ret指令码进行异或得到0xE密钥是4位已经解出了一位但是哪一位不知道</li><li>  根据下图可得知用231 % 4后就是最后一次的下标为3</li></ul><p><img src="https://s2.loli.net/2022/07/29/kWsJZlKR8PEL1a9.png"></p><ul><li>  现在知道了最后一位了还有3位直接根据前面的规则写出爆破。这里需要借助Capstone</li><li>  本来是使用Python编写的但发现性能真的太慢了直接用C艹，下面贴出代码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;capstone/capstone.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> smc_code[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x27</span>, <span class="number">0x44</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0x3A</span>, <span class="number">0x8F</span>, <span class="number">0x1A</span>, <span class="number">0x2E</span>, <span class="number">0xFB</span>, <span class="number">0x41</span>,</span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x46</span>, <span class="number">0xFB</span>, <span class="number">0x59</span>, <span class="number">0xEE</span>, <span class="number">0x42</span>, <span class="number">0xFB</span>, <span class="number">0x49</span>, <span class="number">0xD6</span>, <span class="number">0x46</span>,</span><br><span class="line">  <span class="number">0xF9</span>, <span class="number">0x49</span>, <span class="number">0xEE</span>, <span class="number">0x85</span>, <span class="number">0x72</span>, <span class="number">0x85</span>, <span class="number">0xB3</span>, <span class="number">0xF6</span>, <span class="number">0x3A</span>, <span class="number">0x87</span>,</span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x16</span>, <span class="number">0xF9</span>, <span class="number">0x4C</span>, <span class="number">0xF2</span>, <span class="number">0x87</span>, <span class="number">0x37</span>, <span class="number">0xF8</span>, <span class="number">0x31</span>, <span class="number">0x4B</span>,</span><br><span class="line">  <span class="number">0x82</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x72</span>, <span class="number">0xCB</span>, <span class="number">0xB3</span>, <span class="number">0xE2</span>, <span class="number">0x0D</span>, <span class="number">0xA0</span>,</span><br><span class="line">  <span class="number">0x9C</span>, <span class="number">0x89</span>, <span class="number">0xB5</span>, <span class="number">0x49</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x72</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x85</span>,</span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0xF0</span>, <span class="number">0xCD</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x03</span>, <span class="number">0x75</span>, <span class="number">0x8A</span>, <span class="number">0x72</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0xF6</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xF8</span>, <span class="number">0x7B</span>, <span class="number">0x1A</span>, <span class="number">0xB7</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x87</span>, <span class="number">0xB3</span>, <span class="number">0xFA</span>, <span class="number">0xB3</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0x87</span>,</span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0xFA</span>, <span class="number">0x73</span>, <span class="number">0xCE</span>, <span class="number">0x7D</span>, <span class="number">0x4B</span>, <span class="number">0x82</span>, <span class="number">0x8F</span>, <span class="number">0x16</span>, <span class="number">0x0D</span>,</span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x81</span>, <span class="number">0xFA</span>, <span class="number">0x8B</span>, <span class="number">0x72</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x3A</span>, <span class="number">0x87</span>,</span><br><span class="line">  <span class="number">0xB3</span>, <span class="number">0x2E</span>, <span class="number">0x3A</span>, <span class="number">0x0D</span>, <span class="number">0x3E</span>, <span class="number">0x85</span>, <span class="number">0x7A</span>, <span class="number">0x87</span>, <span class="number">0xB3</span>, <span class="number">0xFE</span>,</span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0xC4</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>, <span class="number">0x73</span>, <span class="number">0x49</span>, <span class="number">0x0E</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xE0</span>,</span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0x4B</span>, <span class="number">0x82</span>, <span class="number">0x87</span>, <span class="number">0xB3</span>, <span class="number">0xF6</span>, <span class="number">0xFF</span>, <span class="number">0x18</span>, <span class="number">0x33</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xF4</span>, <span class="number">0x37</span>, <span class="number">0xE6</span>, <span class="number">0x74</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xF4</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0xF9</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0xCF</span>,</span><br><span class="line">  <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x7F</span>, <span class="number">0xCE</span>, <span class="number">0xF1</span>, <span class="number">0xEC</span>, <span class="number">0xF5</span>, <span class="number">0x46</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x0E</span>, <span class="number">0x72</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x46</span>, <span class="number">0xF9</span>, <span class="number">0x49</span>, <span class="number">0xD6</span>, <span class="number">0x46</span>,</span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0xC4</span>, <span class="number">0x7D</span>, <span class="number">0x06</span>, <span class="number">0xF9</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x0F</span>, <span class="number">0xBA</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x26</span>, <span class="number">0x0F</span>, <span class="number">0x37</span>, <span class="number">0xF8</span>, <span class="number">0x75</span>, <span class="number">0x4B</span>, <span class="number">0x8E</span>, <span class="number">0x0D</span>, <span class="number">0x1F</span>, <span class="number">0x7E</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xF3</span>, <span class="number">0x09</span>, <span class="number">0x46</span>, <span class="number">0xF9</span>, <span class="number">0x49</span>, <span class="number">0xEE</span>, <span class="number">0x85</span>, <span class="number">0x27</span>, <span class="number">0xF4</span>,</span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0x1E</span>, <span class="number">0x3A</span>, <span class="number">0x87</span>, <span class="number">0xB3</span>, <span class="number">0x16</span>, <span class="number">0x3A</span>, <span class="number">0x8F</span>, <span class="number">0x36</span>, <span class="number">0x0A</span>,</span><br><span class="line">  <span class="number">0xF9</span>, <span class="number">0x59</span>, <span class="number">0x02</span>, <span class="number">0x87</span>, <span class="number">0x62</span>, <span class="number">0x9C</span>, <span class="number">0xBE</span>, <span class="number">0x8D</span>, <span class="number">0xB6</span>, <span class="number">0x2C</span>,</span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0xCD</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseBit</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v = *(data + i);</span><br><span class="line">        v = (v &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>  (v &amp; <span class="number">0x55</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        v = (v &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>  (v &amp; <span class="number">0x33</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        v = (v &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>  (v &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        *(data + i) = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkIsValid</span><span class="params">(<span class="type">uint8_t</span>* key, <span class="type">uint8_t</span> *oriKey)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="built_in">sizeof</span>(smc_code)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(smc_code); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buff[i] = smc_code[i] ^ *(key + (i % <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">if</span> (buff[i] == <span class="number">0xCC</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    csh handle;</span><br><span class="line">    cs_insn* insn;</span><br><span class="line">    <span class="type">size_t</span> count;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cs_open</span>(CS_ARCH_X86, CS_MODE_64, &amp;handle) != CS_ERR_OK)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    count = <span class="built_in">cs_disasm</span>(handle, buff, <span class="built_in">sizeof</span>(buff), <span class="number">0x1000</span>, <span class="number">0</span>, &amp;insn);</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cs_free</span>(insn, count);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (insn[<span class="number">0</span>].id != X86_INS_PUSH &amp;&amp; insn[<span class="number">0</span>].id != X86_INS_MOV &amp;&amp; insn[count - <span class="number">1</span>].id != X86_INS_RET)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cs_free</span>(insn, count);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++)sum += insn[i].size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">232</span> &amp;&amp; !\s\t\r\c\m\<span class="built_in">p</span>(insn[<span class="number">0</span>].op_str, rbp)) &#123;</span><br><span class="line">        <span class="built_in">reverseBit</span>(oriKey+<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(key: %s\t\t0x%x:\t%s\t\t%s\n, oriKey , (<span class="type">int</span>)insn[<span class="number">0</span>].address, insn[<span class="number">0</span>].mnemonic, insn[<span class="number">0</span>].op_str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cs_free</span>(insn, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    key[<span class="number">3</span>] = <span class="number">0x0E</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> waitKey[<span class="number">0x7F</span> - <span class="number">0x21</span>];</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0x21</span>; i &lt; <span class="number">0x7F</span>; i++)</span><br><span class="line">        waitKey[i - <span class="number">0x21</span>] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(smc len: %u\n, <span class="built_in">sizeof</span>(smc_code));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(waitKey); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(waitKey); j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; <span class="built_in">sizeof</span>(waitKey); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                key[<span class="number">0</span>] = waitKey[i];</span><br><span class="line">                key[<span class="number">1</span>] = waitKey[j];</span><br><span class="line">                key[<span class="number">2</span>] = waitKey[k];</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> oriKey[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="built_in">strcpy</span>((<span class="type">char</span> *)oriKey, (<span class="type">const</span> <span class="type">char</span>*)key);</span><br><span class="line">                <span class="built_in">reverseBit</span>(key, <span class="number">3</span>);</span><br><span class="line">                <span class="built_in">checkIsValid</span>(key,oriKey);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  爆破出几个一个个尝试发现是N0op，代入运行可以看到是一个魔改的TEA加密</li></ul><p><img src="https://s2.loli.net/2022/07/29/lKX1LJfwNEOqAgQ.png"><img src="https://s2.loli.net/2022/07/29/DZaywBC85fJG73z.png"></p><ul><li>  继续分析发现加密后使用strncmp进行数据的比较</li></ul><p><img src="https://s2.loli.net/2022/07/29/9Kn7feNu8JFQ6Wj.png"></p><ul><li>  值得注意的是这里调用了两次分别对输入的不同位置进行了加密，使用了不同的密钥</li><li>  下下面直接上代码</li></ul><p><img src="https://s2.loli.net/2022/07/29/ZMPW9ydUfsNqr23.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">teaDecrypt</span><span class="params">(<span class="type">uint32_t</span>*data, <span class="type">uint32_t</span> *key, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v0 = *data;</span><br><span class="line">    <span class="type">uint32_t</span> v1 = *(data+<span class="number">1</span>);</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x876AAC7F</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = delta * size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= (v0 + ((v0 &gt;&gt; <span class="number">6</span>) ^ (<span class="number">8</span> * v0))) ^ (*(((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>) + key) + sum);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (v1 + ((v1 &gt;&gt; <span class="number">6</span>) ^ (<span class="number">8</span> * v1))) ^ (*((sum &amp; <span class="number">3</span>) + key) + sum);</span><br><span class="line">    &#125;</span><br><span class="line">    *data = v0;</span><br><span class="line">    *(data+<span class="number">1</span>) = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseBit</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v = *(data + i);</span><br><span class="line">        v = (v &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>  (v &amp; <span class="number">0x55</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        v = (v &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>  (v &amp; <span class="number">0x33</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        v = (v &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>  (v &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        *(data + i) = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkIsValid</span><span class="params">(<span class="type">uint8_t</span>* key, <span class="type">uint8_t</span> *oriKey)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> data[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0x72</span>, <span class="number">0x0C</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x8C</span>, <span class="number">0x69</span>, <span class="number">0x23</span>, <span class="number">0x69</span>, <span class="number">0x59</span>, <span class="number">0xA8</span>,</span><br><span class="line">      <span class="number">0x06</span>, <span class="number">0xEF</span>, <span class="number">0x2A</span>, <span class="number">0x1A</span>, <span class="number">0x56</span>, <span class="number">0xB6</span>, <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0xEE</span>, <span class="number">0x92</span>,</span><br><span class="line">      <span class="number">0x5C</span>, <span class="number">0xF2</span>, <span class="number">0xED</span>, <span class="number">0x0A</span>, <span class="number">0x5F</span>, <span class="number">0x36</span>, <span class="number">0x8E</span>, <span class="number">0x41</span>, <span class="number">0xA6</span>, <span class="number">0x36</span>,</span><br><span class="line">      <span class="number">0x86</span>, <span class="number">0x72</span>, <span class="number">0x56</span>, <span class="number">0xD2</span>, <span class="number">0x54</span>, <span class="number">0xC2</span>, <span class="number">0x00</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>  key[] = Welcome to the game!\nYour key: ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">teaDecrypt</span>((<span class="type">uint32_t</span>*)(data + <span class="number">4</span>), key, <span class="number">0xC</span>);</span><br><span class="line">    <span class="built_in">teaDecrypt</span>((<span class="type">uint32_t</span>*)(data + <span class="number">20</span>), key + <span class="number">16</span>, <span class="number">0xC</span>);</span><br><span class="line">    <span class="built_in">reverseBit</span>(data, <span class="number">36</span>);</span><br><span class="line">    <span class="built_in">puts</span>((<span class="type">char</span> *)data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解得Flag<ul><li>  N0opa_G3Ey#zTXjmi5wIHd&amp;5pRN2elaNjK*C</li></ul></li></ul><h2 id="最后鸣谢"><a href="#最后鸣谢" class="headerlink" title="最后鸣谢"></a>最后鸣谢</h2><ul><li>  “#” 提供思路</li><li>  以及以上所有参考的文章的博主！！！</li></ul><h1 id="PyRE"><a href="#PyRE" class="headerlink" title="PyRE"></a>PyRE</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><ul><li>  直接下载程序，根绝标题和题目描述</li><li>  ”这种exe文件怎么调用py的库？要怎么逆呢，小明同学，你来试试吧？“</li><li>  不难得知此程序是Python的一道Re。</li><li>  使用010Editor查看一下当前程序的版本号。由下图不难看出使用了python3.7进行程序的编译</li></ul><p><img src="https://s2.loli.net/2022/07/29/yYtzJBuQNKdDxrE.png"></p><h2 id="环境的切换"><a href="#环境的切换" class="headerlink" title="环境的切换"></a><strong>环境的切换</strong></h2><p>环境的切换是非必要的，但不切换在反汇编的时候可能会产生一些错误</p><ul><li>  如果安装的是python3.7的环境即可跳过本步骤</li><li>  如果安装了conda可以看下面快速切换，如果没有则需要自己去官网下载对应的版本进行切换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装python3.7</span><br><span class="line">conda create -n py37 python=3.7  </span><br><span class="line"></span><br><span class="line">#切换python3.7环境</span><br><span class="line">conda activate py37</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/1S6khEGvRAOsZrD.png"></p><h2 id="程序的逆向"><a href="#程序的逆向" class="headerlink" title="程序的逆向"></a><strong>程序的逆向</strong></h2><ul><li>  到 <a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>下载逆向脚本，使用命令进行逆向</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py [ProgramFilePath]</span><br></pre></td></tr></table></figure><ul><li>  逆向之后会在pyinstxtractor脚本所在的目录生成一个xxx.exe_extracted的文件夹 。在文件夹中找到一个名字看起来最奇怪的.pyc结尾的文件</li></ul><p><img src="https://s2.loli.net/2022/07/29/4zJScQR5YefgPuF.png"></p><ul><li>  打开 <a href="https://tool.lu/pyc/">在线PYC反编译</a></li><li>  把文件丢上去直接反编译出源码</li><li>  But！！！这样做会发现源码中有对b这个变量进行了运算，但是 b 这个变量却是None</li><li>  使用python标准库自带的marsha和dis库对pyc二进制文件进行反汇编。运行后会自动在窗口中打开bytecode将其复制到文件中分析得知</li><li>  b的值是179</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line">   <span class="keyword">import</span> dis</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(rFilePath\pyre.exe_extracted\<span class="number">1.</span>pyc,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       dis.dis(marshal.loads(f.read()[<span class="number">16</span>:]))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/wSTEpvMWIshrLy6.png"><img src="https://s2.loli.net/2022/07/29/vwgZBA468pDJMti.png"><img src="https://s2.loli.net/2022/07/29/RNvdIO8kT2wiPBx.png"></p><h2 id="编写解密脚本"><a href="#编写解密脚本" class="headerlink" title="编写解密脚本"></a>编写解密脚本</h2><ul><li>根据上面的分析不难看出其实就是一个简单的算法<ul><li>  <code>ord(a[i]) * 33 % b != c[i]</code></li></ul></li><li>  拿数组中的每一个数值和输入的flag进行运算后的值对比判断是否一致，如果都一致则验证成功</li><li>  那么我们可以尝试直接使用爆破</li><li>首先下面是已知信息<ul><li>  数组c</li><li>  变量b的值</li><li>  立即数33</li></ul></li><li>  根据flag都是可见字符得知，可以使用ASCII编码表中0x21-0x7E的值对flag进行模拟判断是否和数组c中的每个元素相等即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c = [</span><br><span class="line">    <span class="number">144</span>, <span class="number">163</span>, <span class="number">158</span>, <span class="number">177</span>, <span class="number">121</span>, <span class="number">39</span>, <span class="number">58</span>, <span class="number">58</span>, <span class="number">91</span>, <span class="number">111</span>, <span class="number">25</span>, <span class="number">158</span>, <span class="number">72</span>, <span class="number">53</span>, <span class="number">152</span>, <span class="number">78</span>, <span class="number">171</span>, <span class="number">12</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">53</span>, <span class="number">12</span>, <span class="number">171</span>, <span class="number">111</span>, <span class="number">91</span>, <span class="number">53</span>, <span class="number">152</span>, <span class="number">105</span>, <span class="number">45</span>, <span class="number">152</span>, <span class="number">144</span>, <span class="number">39</span>, <span class="number">171</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">78</span>, <span class="number">45</span>, <span class="number">158</span>, <span class="number">8</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    b = <span class="number">179</span></span><br><span class="line"></span><br><span class="line">    flags = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>,<span class="number">0x7F</span>):</span><br><span class="line">            <span class="keyword">if</span> j * <span class="number">33</span> % b == c[i]:</span><br><span class="line">                flags.append(<span class="built_in">chr</span>(j))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;.join(flags))</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/zUymFbMYqAgKeu7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LUOJIABASUO&quot;&gt;&lt;a href=&quot;#LUOJIABASUO&quot; class=&quot;headerlink&quot; title=&quot;LUOJIABASUO&quot;&gt;&lt;/a&gt;LUOJIABASUO&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;  半个月前参加了一场比赛，我主要是负责的Re但是只解出</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/categories/CTF/Reverse/"/>
    
    
    <category term="C++" scheme="https://blog.jamiexu.cn/tags/C/"/>
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>【WP/CTF】RCTF 2018 Simple vm</title>
    <link href="https://blog.jamiexu.cn/2022/06/05/%E3%80%90wp-ctf%E3%80%91rctf-2018-simple-vm/"/>
    <id>https://blog.jamiexu.cn/2022/06/05/%E3%80%90wp-ctf%E3%80%91rctf-2018-simple-vm/</id>
    <published>2022-06-05T01:16:21.000Z</published>
    <updated>2024-11-06T00:29:40.106Z</updated>
    
    <content type="html"><![CDATA[<p>下载：<a href="https://github.com/b1ngoo/VMCTF" title="下载">下载</a></p><h1 id="VM虚拟保护——Simple-VM"><a href="#VM虚拟保护——Simple-VM" class="headerlink" title="VM虚拟保护——Simple VM"></a>VM虚拟保护——Simple VM</h1><h2 id="需要知识"><a href="#需要知识" class="headerlink" title="需要知识"></a>需要知识</h2><ul><li>  数电基础</li><li>  C语言基础</li><li>  x86汇编指令</li><li>  逻辑分析能力</li><li>VM保护基本术语<ul><li>  Dispatcher: 调度器，用于判断跳转到对应的Handler执行指令</li><li>  Handler: 处理器，用于模拟每个指令</li></ul></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>下载后发现有两个文件，分别是<ul><li>  p.bin</li><li>  vm_rel</li></ul></li><li>  我们直接用IDA打开vm_rel这个文件，发现是一个64位的elf文件。老规矩在左边的Function names中搜索main直接打开main函数查看一下伪代码</li></ul><p><img src="https://s2.loli.net/2022/07/29/lFv4Eeub1GLArMt.png">- 经过简单的分析知道，首先程序会打开“p.bin”的文件然后在内存中分配一个和文件大小一样大的空间。并把分配 好的内存的地址存放到v5，再经过fread()函数读取文件中的内容存放到内存中</p><ul><li>  然后调用子程序sub_4008996开始程序的执行</li><li>  直接双击该子程序进去可以看到由while(1),switch语句构成整个子程序</li><li>  在虚拟机保护的分析中只要看到类似的结构，就可以判断出该子程序就是整个vm的核心Dispatcher</li></ul><p><img src="https://s2.loli.net/2022/07/29/TDvBEGawIs9g3NQ.png"><img src="https://s2.loli.net/2022/07/29/qir8UxPgWDZAY6Q.png">- 看到这里对于初学者来说可能比较吃力，毕竟笔者也是初学者所以刚开始看的时候着什么玩意啊哈哈哈</p><ul><li>  不急慢慢来，首先不管代码啥的直接尝试是否能暴力破解出flag的长度。那么怎么暴力破解呢。根据我的了解有些vm会不断的调用getchar或scanf一个个字符的获取。所以只要统计这两个函数的调用次数就能得到flag的长度。</li><li>  还有就是直接在程序慢慢的输入，有些vm是在字数长度足够长的情况下才会执行。那么直接不断地尝试知道反应后减少字符串的长度。在不断尝试如下图</li></ul><p><img src="https://s2.loli.net/2022/07/29/Yd9MKgvcHEfCDQx.png"></p><ul><li>可以看到前面输入的没反应，当不断加长flag的长度有反应了。经过不断的尝试发现flag的长度为31.But！回车键也算一个实际上是32个字符</li></ul><p><img src="https://s2.loli.net/2022/07/29/1ct9v3aLZlYKDzd.png"></p><ul><li>上图就是根据在getchar下断点，每断下一次就+1直到getchar没有被调用为止。发现也是调用了32次</li></ul><ul><li>知道了flag的长度后，来看一下他是如何获取用户的输入的。直接在switch的地方下一个断运行程序开始调试</li><li>获取flag存储：<ul><li>  先获取flag需要的长度给v15</li><li>  dword_6010A4 = 0x101+index，index是flag没获取一个字符自增1用于存放flag数组的下标</li><li>  调用getchar获取flag的值存放与v14</li><li>  令c=v14</li><li>  v8 = dword_6010A4 = 0x101 + index，让v8等于flag的下标</li><li>  *(v1 + v8) = c存放flag</li></ul></li><li>读取flag加密：<ul><li>这里就不详细讲了，首先获取flag中的每个字符然后进行一个ANDN的“量子万用门”实现的对flag加密<h2 id="ANDN万用门"><a href="#ANDN万用门" class="headerlink" title="ANDN万用门"></a>ANDN万用门</h2></li><li>  何为万用门？万用门就是只需要一个简单的逻辑门nor或andn就可组成其他的基本逻辑运算 与或非，与非，异或，同或，或非，与，非，或的运算黄色字体部分就是万用门的 常见组合</li></ul></li></ul><p><img src="https://s2.loli.net/2022/07/29/di4t1jVePq9Owkf.png"><img src="https://s2.loli.net/2022/07/29/sRLgtbZHEzrehBV.png"></p><ul><li>知道了使用万用门进行加密操作的，那怎么分析他到底做了什么呢？这就不得不用到数电中的基本知识了。不懂数电的只能死记硬背了吧。</li></ul><h2 id="复现VM"><a href="#复现VM" class="headerlink" title="复现VM"></a>复现VM</h2><ul><li>  现在我们要做的就是把每次进行ANDA的运算记录下来对上下文进行分析推出。他到底执行了什么操作</li><li>  现在把伪代码给拔下来稍加修改加个printf打印每次ANDN的结果，模拟一下整个vm的执行获取Log进行分析</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication2.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include stdafx.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> buf = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span>* ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BYTE unsigned char</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __int64 unsigned int</span></span><br><span class="line"></span><br><span class="line">DWORD globVar;</span><br><span class="line">DWORD c;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">vm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 currentInst; <span class="comment">// rax</span></span><br><span class="line">    _BYTE* base; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">int</span> nextInst; <span class="comment">// ebx</span></span><br><span class="line">    __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v5; <span class="comment">// rax</span></span><br><span class="line">    __int64 v6; <span class="comment">// rax</span></span><br><span class="line">    __int64 v7; <span class="comment">// rax</span></span><br><span class="line">    __int64 v8; <span class="comment">// rax</span></span><br><span class="line">    __int64 v9; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">    __int64 v11; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span> v12; <span class="comment">// dl</span></span><br><span class="line">    <span class="type">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">    _BYTE* v15; <span class="comment">// rax</span></span><br><span class="line">    __int64 v16; <span class="comment">// rax</span></span><br><span class="line">    __int64 v17; <span class="comment">// rax</span></span><br><span class="line">    __int64 v18; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tmp; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    currentInst = <span class="number">0LL</span>;</span><br><span class="line">    base = (_BYTE*)ptr;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nextInst = currentInst + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (base[currentInst])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(exit);</span><br><span class="line">            <span class="keyword">return</span> *(<span class="type">unsigned</span> <span class="type">int</span>*)&amp;base[nextInst];</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            tmp = *(_DWORD*)&amp;base[nextInst];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">1</span>:<span class="number">0</span>x%x GOTO <span class="number">0</span>x%x\n, currentInst, tmp);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">            v4 = nextInst;</span><br><span class="line">            nextInst = currentInst + <span class="number">9</span>;</span><br><span class="line">            base[*(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[v4]] = *(_DWORD*)&amp;base[(<span class="type">signed</span> <span class="type">int</span>)currentInst + <span class="number">5</span>];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">2</span>:<span class="number">0</span>x%<span class="number">000</span>x [<span class="number">0</span>x%x] = <span class="number">0</span>x%x [<span class="number">0x00</span>x]\n, currentInst, v4, *(_DWORD *)&amp;base[(<span class="type">signed</span> <span class="type">int</span>)currentInst + <span class="number">5</span>], (<span class="type">signed</span> <span class="type">int</span>)currentInst + <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">            v5 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v6 = *(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[v5];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">3</span>:<span class="number">0</span>x%<span class="number">000</span>x <span class="built_in">C</span> (<span class="number">0</span>x%x) =  DB [<span class="number">0</span>x%x] (<span class="number">0</span>x%x) \n, currentInst, c, v6, base[v6]);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">            v7 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[v7];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">4</span>:<span class="number">0</span>x%<span class="number">000</span>x [<span class="number">0</span>x%x] = <span class="built_in">C</span> (<span class="number">0</span>x%x) \n, currentInst, v8, c);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            v9 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v10 = (<span class="type">char</span>)base[*(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[v9]];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">5</span>:<span class="number">0</span>x%x <span class="built_in">G</span> (<span class="number">0</span>x%x) = [<span class="number">0</span>x%x] (<span class="number">0</span>x%x)\n, currentInst, globVar, *(<span class="type">signed</span> <span class="type">int</span> *)&amp;base[v9], v10);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            v11 = nextInst;</span><br><span class="line">            v12 = globVar;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[v11];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">6</span>:<span class="number">0</span>x%x [<span class="number">0</span>x%x] (<span class="number">0</span>x%x) = <span class="built_in">G</span> (<span class="number">0</span>x%x)\n, currentInst, v8, base[v8], globVar);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/// base[v8] = v12;</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">7</span>:<span class="number">0</span>x%x \n, currentInst);</span><br><span class="line">            v13 = globVar;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"></span><br><span class="line">            v14 = ~(globVar &amp; c);</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">8</span>:<span class="number">0</span>x%x C = ~(storedG <span class="number">0</span>x%x  &amp; C <span class="number">0</span>x%x) RES = <span class="number">0</span>x%x \n, currentInst, globVar, c, v14);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xA</span>:<span class="number">0</span>x%x C = <span class="built_in">GETCHAR</span>() \n, currentInst);</span><br><span class="line">            v14 = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xB</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xB</span>: <span class="built_in">PUTCHAR</span>(C) \n);</span><br><span class="line">            <span class="built_in">putchar</span>(c);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xC</span>:</span><br><span class="line"></span><br><span class="line">            v15 = &amp;base[*(<span class="type">signed</span> <span class="type">int</span>*)&amp;base[nextInst]];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xC</span>:<span class="number">0</span>x%x IF [<span class="number">0</span>x%x]-- (<span class="number">0</span>x%x) GOTO <span class="number">0</span>x%x ----------- \n, currentInst, nextInst, *v15, *(_DWORD *)&amp;base[nextInst + <span class="number">4</span>]);</span><br><span class="line">            <span class="keyword">if</span> (*v15)</span><br><span class="line">            &#123;</span><br><span class="line">                nextInst = *(_DWORD*)&amp;base[nextInst + <span class="number">4</span>];</span><br><span class="line">                --* v15;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>()))) endloopp\n);</span><br><span class="line">                nextInst += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xD</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xD</span>:<span class="number">0</span>x%x C++ (<span class="number">0</span>x%x)\n, currentInst, c);</span><br><span class="line">            ++c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xE</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xE</span>:<span class="number">0</span>x%x G++ (<span class="number">0</span>x%x)\n, currentInst, globVar);</span><br><span class="line">            ++globVar;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0xF</span>:<span class="number">0</span>x%x \n, currentInst);</span><br><span class="line">            v14 = globVar;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x10</span>:<span class="number">0</span>x%x <span class="built_in">G</span> (<span class="number">0</span>x%x) = <span class="built_in">C</span> (<span class="number">0</span>x%x) \n, currentInst, globVar, c);</span><br><span class="line">            v10 = c;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line"></span><br><span class="line">            v16 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v13 = *(_DWORD*)&amp;base[v16];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x11</span>:<span class="number">0</span>x%x <span class="built_in">C</span> (<span class="number">0</span>x%x) += <span class="built_in">DD</span> (<span class="number">0</span>x%x) \n, currentInst, c, v13);</span><br><span class="line">        LABEL_23:</span><br><span class="line">            c += v13;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x12</span>:<span class="number">0</span>x%x C = <span class="built_in">G</span> (<span class="number">0</span>x%x)\n, currentInst, globVar);</span><br><span class="line">            v6 = globVar;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x13</span>:<span class="number">0</span>x%x C = [C] (<span class="number">0</span>x%x)\n, currentInst, c);</span><br><span class="line">            v6 = c;</span><br><span class="line">        LABEL_27:</span><br><span class="line">            v14 = (<span class="type">char</span>)base[v6];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x14</span>:<span class="number">0</span>x%x \n, currentInst);</span><br><span class="line">            v17 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v14 = *(_DWORD*)&amp;base[v17];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            v18 = nextInst;</span><br><span class="line">            nextInst += <span class="number">4</span>;</span><br><span class="line">            v10 = *(_DWORD*)&amp;base[v18];</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x15</span>:<span class="number">0</span>x%<span class="number">000</span>x <span class="built_in">G</span> (<span class="number">0</span>x%x) = DD [<span class="number">0</span>x%x] (<span class="number">0</span>x%x) \n, currentInst, globVar, v18, v10);</span><br><span class="line">        LABEL_21:</span><br><span class="line">            globVar = v10;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x16</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x16</span>:<span class="number">0</span>x%x [<span class="built_in">G</span>(<span class="number">0</span>x%x)] = <span class="built_in">C</span> (<span class="number">0</span>x%x)\n, currentInst, globVar, c);</span><br><span class="line">            v8 = globVar;</span><br><span class="line">        LABEL_31:</span><br><span class="line">            v12 = c;</span><br><span class="line">        LABEL_9:</span><br><span class="line">            base[v8] = v12;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">0x17</span>:<span class="number">0</span>x%x <span class="built_in">C</span> (<span class="number">0</span>x%x) -= <span class="built_in">G</span> (<span class="number">0</span>x%x) \n, currentInst, c, globVar);</span><br><span class="line">            v14 = c - globVar;</span><br><span class="line">        LABEL_12:</span><br><span class="line">            c = v14;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</span><br><span class="line">            <span class="built_in">printf</span>(\t#<span class="number">18</span>:<span class="number">0</span>x%x <span class="keyword">if</span> <span class="built_in">C</span> (%<span class="number">0</span>x %d) <span class="keyword">goto</span> <span class="number">0</span>x%<span class="number">04</span>x &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; \n, currentInst, c, c, *(_DWORD *)&amp;base[nextInst]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            LABEL_35:</span><br><span class="line">                nextInst = *(_DWORD*)&amp;base[nextInst];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextInst = currentInst + <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextInst &gt;= buf)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        currentInst = nextInst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* v3; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* v4; <span class="comment">// rdi</span></span><br><span class="line">    FILE* v5; <span class="comment">// rbx</span></span><br><span class="line">    <span class="type">size_t</span> v6; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">void</span>* v8; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="built_in">fopen</span>(p.bin, rb);</span><br><span class="line">    v4 = err <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!v3)</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v5 = v3;</span><br><span class="line">    <span class="built_in">fseek</span>(v3, <span class="number">0LL</span>, <span class="number">2</span>);</span><br><span class="line">    buf = <span class="built_in">ftell</span>(v5);</span><br><span class="line">    <span class="built_in">fseek</span>(v5, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = buf;</span><br><span class="line">    <span class="keyword">if</span> (buf &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v4 = err <span class="number">1</span>;</span><br><span class="line">    LABEL_4:</span><br><span class="line">        <span class="built_in">puts</span>(v4);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = <span class="built_in">malloc</span>(buf);</span><br><span class="line">    ptr = v8;</span><br><span class="line">    v4 = err <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (!v8)</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v4 = err <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="built_in">fread</span>(v8, <span class="number">1uLL</span>, v6, v5))</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">fclose</span>(v5);</span><br><span class="line">    v4 = err <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">vm</span>())</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  重新编译打包运行输入31位flag回车即可看到日志，可以看到确实调用了32次getchar()</li><li>  首先在这里获取第一个字符存入内存0x111中。搜索0x111发现有对该内存数据进行操作的地方</li></ul><p><img src="https://s2.loli.net/2022/07/29/DOPSMEF3venBY1Z.png"><img src="https://s2.loli.net/2022/07/29/fHd1CujLF74ZIvm.png"></p><ul><li>从图中不难看出，这里由几行ANDN。对所输入的flag进行加密。首先输入的flag中第一个是q对应的编码是0x71经过运算后就得到0x51,第二位是 w 对应的编码是0x77经过运算后是0x56。以此类推现在就要用到数电知识了。使用反演律和还原律等逻辑代数公式将其化简。也可以用卡诺图化简</li></ul><ul><li>  这里我是用逻辑代数公式化简，这里为了方便表达把前面的0xFFFFF都省略了只保留后两位<br>$$<br>令A=0x20, B=0x71\\<br>DF = \overline{A · B}\\<br>FF = \overline{DF · A}\\<br>AE = \overline{DF · B}\\<br>RES = \overline{AE · FF}\\<br>将其使用公式化简得\\<br>RES = \overline{A}· B + \overline{B}· A\\<br>RES = 0x71 ^ 0x20 = 0x51<br>$$</li><li>  化简后得表达式在数电中表示的就是异或所以，其实就是把输入得flag异或0x20,0x21,0x22…</li><li>  0x20=32就是flag的长度然后加1 进行异或，最后比较即可</li><li>  往下可以看到在这里用flag的最后一位和硬编码数组里的最后一位进行相减，结果不为0则两个数据不一样则跳转。</li></ul><p><img src="https://s2.loli.net/2022/07/29/dkxGW57jMeDLBCy.png"></p><ul><li>从图中也能发现9这个数值的地址是0x24，直接去IDA和Hex-Dump窗口跳转到rbp+0x24即可看到09前面的直到0为止都是flag的硬编码数据，那么就可以直接用硬编码数据对它进行异或还原的到Flag</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">data = binascii.a2b_hex(<span class="string">&#x27;1018431415474017101D4B121F49481853540157515305565A08585F0A0C5809&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v ^ (<span class="number">0x20</span> + i)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>得到Flag “09a71bf084a93df7ce3def3ab1bd61f6”</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://expend20.github.io/2018/05/24/RCTF-simple-vm.html">https://expend20.github.io/2018/05/24/RCTF-simple-vm.html</a></p><p><a href="https://zhuanlan.kanxue.com/article-14172.htm">https://zhuanlan.kanxue.com/article-14172.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载：&lt;a href=&quot;https://github.com/b1ngoo/VMCTF&quot; title=&quot;下载&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;VM虚拟保护——Simple-VM&quot;&gt;&lt;a href=&quot;#VM虚拟保护——Simple-VM&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>【CTF/WP】DDCTF 2018黑盒破解——简单的VM入门</title>
    <link href="https://blog.jamiexu.cn/2022/06/01/%E3%80%90wp%E3%80%91ddctf-2018%E9%BB%91%E7%9B%92%E7%A0%B4%E8%A7%A3-%E7%AE%80%E5%8D%95%E7%9A%84vm%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.jamiexu.cn/2022/06/01/%E3%80%90wp%E3%80%91ddctf-2018%E9%BB%91%E7%9B%92%E7%A0%B4%E8%A7%A3-%E7%AE%80%E5%8D%95%E7%9A%84vm%E5%85%A5%E9%97%A8/</id>
    <published>2022-06-01T03:02:25.000Z</published>
    <updated>2022-07-29T05:22:50.112Z</updated>
    
    <content type="html"><![CDATA[<p>下载：<a href="https://github.com/b1ngoo/VMCTF/tree/master/%E9%BB%91%E7%9B%92%E7%A0%B4%E8%A7%A3">DDCTF 2018黑盒破解</a></p><h1 id="LUOJIBASUO"><a href="#LUOJIBASUO" class="headerlink" title="LUOJIBASUO"></a>LUOJIBASUO</h1><p>这是我初学VM的第一个程序，虽说网络上有其他博主下写的WP但是对于刚开始学VM的来说我觉得是难以理解的，主要是程序的执行流程懂得了程序如何执行剩下的就好办了。同时感谢其他博主的WP学习了很多</p><h1 id="分析文件"><a href="#分析文件" class="headerlink" title="分析文件"></a>分析文件</h1><ul><li>  文件下载下来后，发现有两个文件</li></ul><p>1、ReverseMe.elf</p><p>2、flag-48ee204317.txt</p><ul><li><p>  根据做题的经验和文件后缀大概猜测一下文件的类型是ELF64的Linux程序。直接用IDA64打开</p></li><li><p>  打开后看可以看到我们猜测的没错，不会猜测可以使用<a href="https://softfamous.com/peid/">PEID</a>和<a href="https://github.com/ExeinfoASL/ASL">exeinfope</a></p></li></ul><p><img src="https://s2.loli.net/2022/07/29/7o8SJOdHi1nlauq.png"></p><ul><li>  打开直接搜索main函数，在右侧代码可以看到是判断了byte_603F00的变量是否正确。</li></ul><p><img src="https://s2.loli.net/2022/07/29/Vaf5dOGKX7ibjU4.png"></p><p><img src="https://s2.loli.net/2022/07/29/r5VyTtboSDs9hwJ.png"></p><ul><li>  把用鼠标点击一下该变量光标放在鼠标上按键盘的 “X” 即可打开变量的交叉引用。如上图，Type中是 “w” 为写，如果是 “r” 就是读，从图中可以看到在sub_40133D这个子程序设置了该参数的数值。双击第一条数据可以直接跳转到对应的地方</li></ul><p><img src="https://s2.loli.net/2022/07/29/wsSWZ3EioBhAkUQ.png"></p><ul><li>  发现经过了几个判断成功后才置1，如果按照刚刚的方法直接查找该子程序的引用发现找不到在哪里调用用了该程序。不仅如此还找到了一堆函数。</li></ul><p><img src="https://s2.loli.net/2022/07/29/VxBsapdyr2HRPfW.png"></p><ul><li>  回到main函数，发现在判断的前面有个<code>sub_401A48(v4);</code>双击进去，第一眼很乱，嗯放弃吧不学了</li></ul><p><img src="https://s2.loli.net/2022/07/29/HruBPK2ZavmOdpn.png"></p><ul><li>  开个小玩笑，从上图可发现首先是两个循环，第二个循环的次数是八次，然后呢判断是否符合条件如果符号条件的话呢就给变量<code>*(a1 + 672)置地址然后将该地址当函数去调用并传入了个a1参数</code></li><li>  这是算是一个小的VM保护吧，有dispatcher有handler还有eip和一些临时变量当作寄存器，而指令就只有9个指令</li><li>  那没办法了只能上动态调试了，在动态调试前其实我们忽略了个细节，从图中不难看出程序调用了两次<code>fgets()</code>分别是<code>fgets(s, 15, stdin);</code>和<code>fgets((char *)(v4 + 16), 100, stdin);</code>前面第一个其实就是获取的第二个文件中flag-xxx.txt的xxx所以只需要输入xxx就可以通过第一个</li><li>  如我这里的文件名是 “flag-48ee204317.txt” 那么就直接输入48ee204317即可通过第一个</li><li>  关键点在第二个的地方，首先是分配一个内存空间赋值给<code>v4</code>变量</li><li>  然后把我们第二次输入的内容放在了<code>*(v4 + 16)</code>的位置准备以后使用</li></ul><p><img src="https://s2.loli.net/2022/07/29/zokxqJgBev7TU3s.png"></p><ul><li>  了解了大致的流程后现在就可以上动态调试了</li><li>  这里使用的是VMware虚拟机的Kail Liunx64</li><li>  虚拟机打开IDA的远程服务端，IDA配置远程服务端的IP即可实现在虚拟机中调试而不需要装一个Linux系统</li><li>  动态调试前先回到main中给子程序调用的地方下个断</li></ul><p><img src="https://s2.loli.net/2022/07/29/lEoF6KwiIBOzJt8.png"></p><p>打开先输入第一个数据即 “48ee204317” 输入后提示输入passcode直接随便输入一串字符串回车长度最好大于9位的，至于为什么嘛往前仔细看看就懂了。</p><p><img src="https://s2.loli.net/2022/07/29/CgeiKXumjn8Gr9v.png"></p><ul><li>  可以看到传入了一个参数rdi，这里的rdi其实就是之前分配的内存的地址直接F7跟进继续分析</li></ul><p><img src="https://s2.loli.net/2022/07/29/MaBFyo8cztKPAVO.png"></p><ul><li>  把rdi赋值到了一个栈空间var_28</li></ul><p><img src="https://s2.loli.net/2022/07/29/WzOn9K4jUYkVG1h.png"></p><p>这里有一堆判断先不管先，我们只要知道主要流程即可</p><ul><li>  直接F5定位到第二个for循环然后按Tab查看指令，往下找可以发现有个<code>call eax</code>这个就是把地址对应的数据当函数体执行的地方。在上面还有个<code>cmp cl, al</code>用于比较是否符合才决定是否需要跳转到下面调用函数。在两个地方下个断点进行分析</li></ul><p><img src="https://s2.loli.net/2022/07/29/cHaznXb76MAGhgi.png"></p><p><img src="https://s2.loli.net/2022/07/29/fvoQOWHgiBzYeV6.png"></p><p><img src="https://s2.loli.net/2022/07/29/O5vzNPIiraDTF3E.png"></p><ul><li>  运行后断后可以看到cl来至 “byte_603900” 这个数组中，而al</li></ul><p><img src="https://s2.loli.net/2022/07/29/GZMLBipmrcCgA1h.png"></p><ul><li>  这里看指令比较乱直接转伪代码，可以发现其实是把用户输入的每个数据当作下表从数组中取出数据和右边的数据进行比对如果一样就执行函数，从这里就可以发现函数的执行流程是根据用户的使用来执行的</li></ul><p><img src="https://s2.loli.net/2022/07/29/rvK2htAceVuykRC.png"></p><p>从上图可知在第一个循环中每次循环给*(a1 + 664)置为用户输入的下一个值</p><ul><li><p>  那怎么获取等号右边的数据呢？很简单切换会指令在JNZ判断中下个断点即可，因为指令只有8个所以只要每次断点下来后记录右边的数据再运行重复8次即可提取出所有的数据。还有一个方法就是直接写IDC脚本一件提取但笔者比较笨</p></li><li><p>  提取出来的分别是 “2a 27 3e 5a 3f 4e 6a 2b 28” 把左边数组的数据Dump下来用Python写一个脚本解除对应的用户输入的指令</p></li><li><p>  编写脚本运行，发现只有当输入的数据是 “$8Ct0Eu#;”中的一个才执行指令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [ 0x02, 0x00, 0x00, 0x0E, 0x16, 0x54, 0x20, 0x18, 0x11, 0x45, </span><br><span class="line">  0x50, 0x59, 0x58, 0x53, 0x00, 0x08, 0x44, 0x2D, 0x46, 0x39, </span><br><span class="line">  0x00, 0x54, 0x42, 0x01, 0x3C, 0x0F, 0x00, 0x07, 0x17, 0x00, </span><br><span class="line">  0x56, 0x21, 0x00, 0x37, 0x6D, 0x2B, 0x2A, 0x6E, 0x59, 0x5D, </span><br><span class="line">  0x47, 0x3A, 0x4A, 0x34, 0x44, 0x48, 0x43, 0x6C, 0x3F, 0x59, </span><br><span class="line">  0x25, 0x33, 0x55, 0x2F, 0x31, 0x68, 0x27, 0x34, 0x7C, 0x28, </span><br><span class="line">  0x67, 0x59, 0x00, 0x52, 0x00, 0x26, 0x00, 0x3E, 0x56, 0x4E, </span><br><span class="line">  0x33, 0x21, 0x45, 0x6D, 0x60, 0x39, 0x46, 0x72, 0x6D, 0x4D, </span><br><span class="line">  0x54, 0x40, 0x00, 0x74, 0x57, 0x73, 0x72, 0x7A, 0x47, 0x45, </span><br><span class="line">  0x00, 0x71, 0x00, 0x4A, 0x35, 0x70, 0x3B, 0x36, 0x2E, 0x26, </span><br><span class="line">  0x2C, 0x6C, 0x4A, 0x00, 0x7C, 0x63, 0x35, 0x57, 0x4D, 0x41, </span><br><span class="line">  0x43, 0x62, 0x00, 0x68, 0x37, 0x00, 0x5A, 0x6A, 0x6B, 0x7C, </span><br><span class="line">  0x29, 0x69, 0x4C, 0x70, 0x50, 0x71, 0x26, 0x36, 0x3C, 0x06, </span><br><span class="line">  0x1B, 0x00, 0x3C, 0x30, 0x00, 0x00, 0x00, 0x4C, 0x0B, 0x4B, </span><br><span class="line">  0x48, 0x08, 0x54, 0x47, 0x12, 0x09, 0x24, 0x00, 0x00, 0x24, </span><br><span class="line">  0x40, 0x0D, 0x39, 0x06, 0x5C, 0x2C, 0x1A, 0x2D, 0x0A, 0x38, </span><br><span class="line">  0x35, 0x37, 0x16, 0x3B, 0x00, 0x24, 0x48, 0x00, 0x49, 0x00, </span><br><span class="line">  0x37, 0x08, 0x1F, 0x24, 0x45, 0x1D, 0x11, 0x40, 0x2F, 0x4A, </span><br><span class="line">  0x08, 0x15, 0x00, 0x11, 0x00, 0x1A, 0x22, 0x41, 0x52, 0x5B, </span><br><span class="line">  0x0B, 0x45, 0x31, 0x19, 0x43, 0x19, 0x1E, 0x0A, 0x21, 0x05, </span><br><span class="line">  0x4D, 0x59, 0x38, 0x34, 0x09, 0x36, 0x2F, 0x43, 0x02, 0x53, </span><br><span class="line">  0x12, 0x2F, 0x4C, 0x21, 0x0D, 0x3C, 0x31, 0x2E, 0x37, 0x08, </span><br><span class="line">  0x30, 0x29, 0x32, 0x2F, 0x00, 0x1A, 0x14, 0x41, 0x53, 0x15, </span><br><span class="line">  0x21, 0x00, 0x08, 0x13, 0x38, 0x5C, 0x36, 0x3B, 0x50, 0x00, </span><br><span class="line">  0x2F, 0x1E, 0x57, 0x00, 0x30, 0x2E, 0x0C, 0x2E, 0x37, 0x52, </span><br><span class="line">  0x1C, 0x33, 0x34, 0x11, 0x38]</span><br><span class="line"></span><br><span class="line">opcode = list(binascii.a2b_hex(&quot;2a273e5a3f4e6a2b28&quot;))</span><br><span class="line">for i in opcode:</span><br><span class="line">    print(chr(data.index(i)))</span><br></pre></td></tr></table></figure><ul><li>  知道了输入对应的指令才执行那就 可以直接把这八个指令都一起输入然后断点在<code>call eax</code>进入函数分析搞懂每个指令对应的函数是干嘛的，先把所有断点删了只给<code>call eax</code>的地方下断点就行</li></ul><p><img src="https://s2.loli.net/2022/07/29/Gq4wKJoEY63HtQx.png"></p><ul><li>  下来后直接不管直接F7跟进看伪代码即可，判断是执行条件。经过分析*(a1 + 292)</li></ul><p><img src="https://s2.loli.net/2022/07/29/PHBwZSQdYN9KWrl.png"></p><ul><li>  直接切换到指令查看比较，先拿a1参数和0比较判断是否为NULL</li></ul><p><img src="https://s2.loli.net/2022/07/29/oWwZbTR1nLzMPAl.png"></p><ul><li>  比较edx和eax，如果edx &gt;= eax 则直接结束子程序否则继续执行</li></ul><p><img src="https://s2.loli.net/2022/07/29/MTrDR7UjYI5NxVp.png"></p><p><img src="https://s2.loli.net/2022/07/29/fRx3sjVMonJDBWK.png"></p><ul><li><p>  分析得知 “$“ 所对应的函数是sub_400DC1：用于赋值数组index位置的字符给(a1 + 665)</p></li><li><p>  F9放行继续断下第二次<code>call eax</code>根据第一个函数分析很快就知道第二个函数是干嘛的</p></li><li><p>  “8” 所对应的是sub_400E7A：用于赋值(a1 + 665)给数组index位置的字符</p></li></ul><p><img src="https://s2.loli.net/2022/07/29/8a5nYK9oxfJRNIc.png"></p><ul><li><p>重复步骤分析剩下的得到变量：</p><ul><li>  + 288: index</li><li>  + 8: string array</li><li>  +16: array of user input</li><li>  + 664: nextChar</li><li>  + 280: 0x110</li><li>  + 292: 0xFF</li><li>  +665: tmp variable</li></ul></li><li><p>得到每个函数”主要”执行的操作：</p><ul><li>  “$“ 所对应的函数是sub_400DC1：tmp = str[index]</li><li>  “8” 所对应的是sub_400E7A：str[index] = tmp</li><li>  ”C“ sub_400F3A: tmp = tmp + nextChar - 0x21</li><li>  “t” sub_401064: tmp = tmp - nextChar + 0x21;</li><li>  “0” sub_4011C9: ++index</li><li>  “E” sub_40133D: check</li><li>  “u” sub_4012F3: –index</li><li>  “#” sub_4014B9: str[index] = input[nextChar + index - 48] - 49</li><li>  “;” sub_400CF1: str[index] = for ( i = 0; nextChar &gt; i; ++i )index++;input[nextChar + index - 48] - 49</li></ul></li><li><p>  到这一步就迷茫了分析完接下来干嘛呢？根据提示可以知道怎么程序就是让用户操作指令吧str表的字符串转换成Binggo即可那么开始构建指令</p></li></ul><p><img src="https://s2.loli.net/2022/07/29/Tz35Seyxh2XNqgw.png"></p><ul><li><p>  首先str表的原内容是 “PaF0!&amp;Prv}H{ojDQ#7v=” 要把这串转成 ”Binggo“</p></li><li><p>  先把第第一个P转换成B，查<a href="http://c.biancheng.net/c/ascii/">ASCII编码表</a>可知P 对应的编码是 0x50 ,B 对应的是0x42。根据指令先把str表中第一个字符放到tmp中才可对其操作那么第一个指令就是$第二个选择一种加密方式在指令 “C t # ; “中找一个只要满足等于B即可，先选C。套用公式tmp = tmp + nextChar - 33得0x42 = 0x50 - nextChar - 0x21，解得nextChar 为0x13不是可见字符。</p></li><li><p>  那么换一个指令 “t” 代入公式：tmp = tmp - nextChar + 0x21得0x42 = 0x50 - nextChar + 0x21 解得nextChar = 0x2F 将其转换成可见字符 “/“ 即可如果计算出来的不是可见字符可以选择其他的操作进行计算。再使用指令 “8” 将tmp赋值给str[index]，使用指令 ”0“ index++ 那么，P转换成B的对应指令是$t/80</p></li><li><p>  最后别忘了调用指令 ”E” 验证输入</p></li><li><p>  以此类推得到完整的指令：t/80$C)80$CI80$CX80$Cg80$Cj80#J1uuuuuuuEs</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载：&lt;a href=&quot;https://github.com/b1ngoo/VMCTF/tree/master/%E9%BB%91%E7%9B%92%E7%A0%B4%E8%A7%A3&quot;&gt;DDCTF 2018黑盒破解&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;LUOJIBASUO&quot;&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://blog.jamiexu.cn/tags/Reverse/"/>
    
    <category term="VM保护" scheme="https://blog.jamiexu.cn/tags/VM%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>【Gitlab】Gitlab版本控制搭建</title>
    <link href="https://blog.jamiexu.cn/2022/05/19/%E3%80%90gitlab%E3%80%91gitlab%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.jamiexu.cn/2022/05/19/%E3%80%90gitlab%E3%80%91gitlab%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-19T02:42:20.000Z</published>
    <updated>2022-07-29T04:25:18.032Z</updated>
    
    <content type="html"><![CDATA[<p>Gitlab Documentation: <a href="https://about.gitlab.com/install/#centos-7">https://about.gitlab.com/install/#centos-7</a></p><p>下面是和官网不一样的教程</p><h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p>本来之前用的是Github但因为在国外速度太慢了，为了更好的分享自己的开源不得不更换成Gitee。刚开始还不错知道今天突然发现之前开源的40个左右的项目全部都被锁了需要重新提交审核。不得已才想到搭建自己的Git版本控制</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1、Linux服务器一台，这里我使用的是腾讯云的Centos</p><p>2、确保安装了Nginx环境，可以看博主的其他文章快速搭建环境</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>查看自己的服务器的版本信息</p><p>Last login: Wed May 18 22:24:22 2022 from 113.118.82.119<br>(base) [ ~]# uname -a<br>Linux VM-16-13-centos 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</p><p>从上面可以得是64位的服务器，前往<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">镜像站</a>找到对应的版本右键复制链接。复制链接后又两种方式可以 下载，一种是用linux服务器的wget命令下载，另一种是用idm等下载工具下载后上传到服务器中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#下载rpm包</span><br><span class="line">(base) [ ~]# wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm</span><br><span class="line">--2022-05-19 10:36:46--  https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm</span><br><span class="line">Resolving mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.15.130, 2402:f000:1:400::2</span><br><span class="line">Connecting to mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)101.6.15.130:443... connected.</span><br><span class="line">ERROR: cannot verify mirrors.tuna.tsinghua.edu.cn&#x27;s certificate, issued by ‘/C=US/O=Let&#x27;s Encrypt/CN=R3’:</span><br><span class="line">  Issued certificate has expired.</span><br><span class="line">To connect to mirrors.tuna.tsinghua.edu.cn insecurely, use `--no-check-certificate&#x27;.</span><br><span class="line">(base) [ ~]# wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm --no-check-certificate</span><br><span class="line">--2022-05-19 10:36:58--  https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm</span><br><span class="line">Resolving mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.15.130, 2402:f000:1:400::2</span><br><span class="line">Connecting to mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)101.6.15.130:443... connected.</span><br><span class="line">WARNING: cannot verify mirrors.tuna.tsinghua.edu.cn&#x27;s certificate, issued by ‘/C=US/O=Let&#x27;s Encrypt/CN=R3’:</span><br><span class="line">  Issued certificate has expired.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1026503472 (979M) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm’</span><br><span class="line"></span><br><span class="line">100%[===============================================================================================================================================&gt;] 1,026,503,472 3.33MB/s   in 5m 28s </span><br><span class="line"></span><br><span class="line">2022-05-19 10:42:26 (2.98 MB/s) - ‘gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm’ saved [1026503472/1026503472]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#开始安装rpm包</span><br><span class="line">rpm -i gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>看到如下信息说明安装成功了</p><p><img src="https://s2.loli.net/2022/07/29/6fOL1HDY8BjpMKl.png"></p><p>安装好后还需对服务器进行简单的配置，使用vim命令打开文件找到图中 对应的地方修改成自己的域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#进行配置</span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">#配置</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/LQ79vNXbROdjFDM.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Gitlab Documentation: &lt;a href=&quot;https://about.gitlab.com/install/#centos-7&quot;&gt;https://about.gitlab.com/install/#centos-7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是和官网不一</summary>
      
    
    
    
    <category term="未分类" scheme="https://blog.jamiexu.cn/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>【Unidbg】模拟Android环境Hook Androlua</title>
    <link href="https://blog.jamiexu.cn/2022/04/01/%E3%80%90unidbg%E3%80%91%E6%A8%A1%E6%8B%9Fandroid%E7%8E%AF%E5%A2%83/"/>
    <id>https://blog.jamiexu.cn/2022/04/01/%E3%80%90unidbg%E3%80%91%E6%A8%A1%E6%8B%9Fandroid%E7%8E%AF%E5%A2%83/</id>
    <published>2022-04-01T09:21:14.000Z</published>
    <updated>2022-07-29T05:15:07.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unidbg的介绍"><a href="#Unidbg的介绍" class="headerlink" title="Unidbg的介绍"></a>Unidbg的介绍</h2><p>Allows you to emulate an Android native library, and an experimental iOS emulation.</p><p>This is an educational project to learn more about the ELF/MachO file format and ARM assembly.</p><p>Use it at your own risk !</p><p>官方Github: <a href="https://github.com/zhkl0228/unidbg">https://github.com/zhkl0228/unidbg</a></p><h2 id="下载Unidbg"><a href="#下载Unidbg" class="headerlink" title="下载Unidbg"></a>下载Unidbg</h2><p>下载有两种方式进行下载</p><ol><li> git clone <a href="https://github.com/zhkl0228/unidbg.git">https://github.com/zhkl0228/unidbg.git</a> 通过git命令clone到本地</li></ol><p><img src="https://s2.loli.net/2022/07/29/AfE7ZuwT9qrUWBG.png"></p><ol><li> 通过Github右上角的Code按钮下载zip文件</li></ol><p><img src="https://s2.loli.net/2022/07/29/mXdsBtPWNUubSo8.png"></p><h2 id="配置Unidbg"><a href="#配置Unidbg" class="headerlink" title="配置Unidbg"></a>配置Unidbg</h2><p>下载好之后我们使用Idea将其打开，发现是一个maven工程我们。进行一下简单的设置</p><p>首先新建一个Module用于编写我们自己的代码也可以不新建在原有的Module上新建java文件即可。这里因为方便区分自己的和模板的选择新建一个Module</p><ol><li> New =&gt; Module 新建模块，记得不要勾上那个复选框</li></ol><p><img src="https://s2.loli.net/2022/07/29/tfcNPJ8dpxrsbM2.png"></p><p><img src="https://s2.loli.net/2022/07/29/XUz8u6TRYs5DbNJ.png"></p><p><img src="https://s2.loli.net/2022/07/29/5HyIMO2CFkehdS7.png"></p><p>2. 修改模块的依赖选项File =&gt; Project structure =&gt; module 找到刚刚新建的模块把scope全部改成Compile默认是Test然后把需要用的依赖包添加进来保存</p><p><img src="https://s2.loli.net/2022/07/29/1dMHbTcJQsIqSVX.png"></p><p><img src="https://s2.loli.net/2022/07/29/FjJKBEgR4fHVQod.png"></p><h2 id="逆向分析Lua"><a href="#逆向分析Lua" class="headerlink" title="逆向分析Lua"></a>逆向分析Lua</h2><p>逆向分析Lua</p><p>首先我们使用jeb打开apk在androidmanifest文件中找到启动的activity，不难发现启动Act下有一个intent-filter标签在此注明了applicaiton启动的第一个Act “com.androlua.Welcome”</p><p><img src="https://s2.loli.net/2022/07/29/OQE2rzfiUcZHYyR.png"></p><p>来到Welcome的onCreate函数经过分析this.checkInfo()就是检查是否是第一次打开App如果是第一次打开就执行程序的初始化把需要运行Lua脚本复制到对应的/data/data/包名/files里面</p><p><img src="https://s2.loli.net/2022/07/29/v9J6AIOgQjNe1XW.png"></p><p>往下滑可以看到调用了startActivity跳转到了另一个Act “Main” 调用的时候传送了一些版本信息</p><p><img src="https://s2.loli.net/2022/07/29/eMqDW1tvFJ3YLGR.png"></p><p>来到Main的onCreate函数发现并没有什么可以的地方，只是获取了对应的Welcome传过来的数据。调用了this.runFunc经过分析不难发现没有我们想要的关键信息</p><p><img src="https://s2.loli.net/2022/07/29/oX91ADxdY6eNRp7.png"></p><p>猜测一下是不是继承了其他的Act，然后看一下顶部发现确实继承了其他的Act “LuaActivity”</p><p><img src="https://s2.loli.net/2022/07/29/fmCEHYxlGJN9gVk.png"></p><p>来到LuaActivity的onCreate发现它前面只是执行了一些窗口的设置</p><p><img src="https://s2.loli.net/2022/07/29/SR2XhM7pJUWIFNd.png"></p><p>往下滑发现了关键的信息</p><p><img src="https://s2.loli.net/2022/07/29/layTLoOjzGRbVNc.png"></p><p>双击this.k这个函数跳转到对应函数实现的地方发现这个函数只是初始化Lua解释器</p><p><img src="https://s2.loli.net/2022/07/29/Y6oV92IpGvfuNO4.png"></p><p>在这里发现也执行了this.doFile传入了两个参数，第一个是Lua脚本的路径，第二个是Intent参数。假设一下如果要运行一个脚本是不是得知道Lua的路径推断一下这个可能是关键地方</p><p><img src="https://s2.loli.net/2022/07/29/TEGAKaqHDsxi3Lo.png"></p><p>双击this.doFile打开交叉引用选择LuaActivity的doFile函数，因为他调用这个函数的时候传入了一个LuaPath所以我我们只关心哪里使用了个参数。不难发现蓝色框框的部分调用了this.j.LloadFile加载文件</p><p><img src="https://s2.loli.net/2022/07/29/wukOlWcAhbtp1Sg.png"></p><p>双击之后发现跳转到了LuaState 这个是Lua解释器接口，发现这个函数又调用了另一个函数双击进去发现调用了native的_LoadFile</p><p><img src="https://s2.loli.net/2022/07/29/zbGYmuIavCfd2i7.png"></p><p><img src="https://s2.loli.net/2022/07/29/EervNWK9xmOoM1q.png"></p><p>往上滑动来到顶部可以看到加载了一个Library “luajava”</p><p><img src="https://s2.loli.net/2022/07/29/hgdMJbkw5XvzGl9.png"></p><p>下面是我写的一个JNI函数不难看出要实现一个JNI函数必须要的参数是JNIEnv *, jclass, jobject</p><p><img src="https://s2.loli.net/2022/07/29/Lzu2f16CdkrZQgi.png"></p><p>使用对应的IDA打开对应架构的libluajava.so文件，在左边的Function names搜索loadfile发现只有一个JNI函数。点击一下int a1按键盘上的 Y 键把变量类型设置成JNIEnv *然后代码就一目了然了。因为JNI函数前面三个参数一般都是一些固定的信息，再从刚刚Java的分析不难发现a4,a5是Java层传过来的参数a4是一个LuaState接口。a5就是LuaPath。</p><p>从图中发现调用了GetStringUTFChars这个函数把a5的Java字符串（jstring）转换成C的字符串(cstring)，调用了j_luaL_loadfilex。传入了一个LuaState和LuaPath的cstring</p><p><img src="https://s2.loli.net/2022/07/29/ZBt2uUOqWJHx9yg.png"></p><p><img src="https://s2.loli.net/2022/07/29/m7sgcwkM1FNXnoA.png"></p><p>双击j__luaL_loadfilex跳转到了另一个函数再双击来到了，函数实现过程的地方。其中a2是LuaPath</p><p><img src="https://s2.loli.net/2022/07/29/x3do4lj6OJIzTcg.png"></p><p><img src="https://s2.loli.net/2022/07/29/7IUuftO9rcyoZTS.png"></p><p>点击参数中的a2，往下滑可以看到高亮的地方使用了a2。首先通过fopen打开Lua文件脚本文件把文件句柄赋值给v7=stream</p><p><img src="https://s2.loli.net/2022/07/29/LAXRrJbWTuVSUnq.png"></p><p>首先根据文件句柄获取Lua脚本的第一个字节判断该本属于哪个版本的。而我这个是最新版本的。最新版本的是“=”所以直接看判断”=’的地方</p><p><img src="https://s2.loli.net/2022/07/29/leV3U87wsrIuLBP.png"></p><p><img src="https://s2.loli.net/2022/07/29/aFUem8IXVhKQAj1.png"></p><p>进入到Sub子函数打开看一下判断是读取lua脚本，a3是一个指针在这个函数修改了a3=v7,而v7是lua脚本的长度，根据判断可以知道调用这个函数就是读取lua脚本然后返回，给v20,v36存放的就是文件的大小</p><p><img src="https://s2.loli.net/2022/07/29/6BSOCURs9jiFQvb.png"></p><p>然后调用了这个函数加载lua脚本j_luaL_loadbufferx，发现在这个函数进行解密，最后面返回了lua_load</p><p><img src="https://s2.loli.net/2022/07/29/9tukMigZlesomh2.png"></p><p><img src="https://s2.loli.net/2022/07/29/BNgtOEZ6FkbYnIe.png"></p><p>根据Github开源的可以发现调用了这个函数进行执行lua二进制文件，而解密后的二进制文件就是传过来的第三个参数</p><p><img src="https://s2.loli.net/2022/07/29/CGOI5T3tE9rHv8b.png"></p><h2 id="使用Unidbg-HOOk"><a href="#使用Unidbg-HOOk" class="headerlink" title="使用Unidbg HOOk"></a>使用Unidbg HOOk</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">package blog.jamiexu.cn;</span><br><span class="line"></span><br><span class="line">import com.github.unidbg.AndroidEmulator;</span><br><span class="line">import com.github.unidbg.Emulator;</span><br><span class="line">import com.github.unidbg.arm.HookStatus;</span><br><span class="line">import com.github.unidbg.file.FileResult;</span><br><span class="line">import com.github.unidbg.file.IOResolver;</span><br><span class="line">import com.github.unidbg.file.linux.AndroidFileIO;</span><br><span class="line">import com.github.unidbg.hook.HookContext;</span><br><span class="line">import com.github.unidbg.hook.ReplaceCallback;</span><br><span class="line">import com.github.unidbg.hook.hookzz.HookZz;</span><br><span class="line">import com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line">import com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.DvmClass;</span><br><span class="line">import com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line">import com.github.unidbg.memory.Memory;</span><br><span class="line">import com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Lua extends AbstractJni implements IOResolver&lt;AndroidFileIO&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private final AndroidEmulator androidEmulator;</span><br><span class="line">    private final VM vm;</span><br><span class="line">    private final Memory memory;</span><br><span class="line">    private final boolean debug;</span><br><span class="line"></span><br><span class="line">    private final String LUAJAVA_PATH = &quot;MyDebug/src/main/resources/Lua/APItest_1.0_sign/lib/armeabi-v7a/libluajava.so&quot;;</span><br><span class="line">    private final String LUA_APP = &quot;MyDebug/src/main/resources/Lua/APItest_1.0_sign.apk&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private final String LUA_INPUT = &quot;MyDebug/src/main/resources/Lua/APItest_1.0_sign/assets/main.lua&quot;;</span><br><span class="line">    private final String LUA_OUT = &quot;MyDebug/src/main/resources/Lua/out.lua&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Lua(boolean debug) &#123;</span><br><span class="line">        this.debug = debug;</span><br><span class="line">        this.androidEmulator = AndroidEmulatorBuilder.for32Bit() //创建一个32架构的模拟器</span><br><span class="line">                .setProcessName(&quot;blog.jamiexu.cn.lua&quot;).build();</span><br><span class="line">        this.memory = this.androidEmulator.getMemory();</span><br><span class="line">        this.memory.setLibraryResolver(new AndroidResolver(23));//设置Android的SDK版本</span><br><span class="line">        this.vm = this.androidEmulator.createDalvikVM(new File(this.LUA_APP));//创建虚拟机</span><br><span class="line">        this.vm.setVerbose(debug);//设置打印日志</span><br><span class="line">        this.vm.setJni(this);//设置JNI环境</span><br><span class="line">        this.androidEmulator.getSyscallHandler().addIOResolver(this);//添加IO用于打开文件</span><br><span class="line"></span><br><span class="line">//        if (this.debug) this.androidEmulator.attach(DebuggerType.ANDROID_SERVER_V7);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Lua lua = new Lua(true);//创建一个Android模拟环境</span><br><span class="line">        DalvikModule luajava = lua.getVm().loadLibrary(new File(lua.LUAJAVA_PATH), true);//加载Libso</span><br><span class="line">        luajava.callJNI_OnLoad(lua.getAndroidEmulator());//初始化调用On_Load</span><br><span class="line"></span><br><span class="line">        HookZz hookInstance = HookZz.getInstance(lua.getAndroidEmulator());//初始化一个Hook接口</span><br><span class="line">        hookInstance.replace(luajava.getModule().findSymbolByName(&quot;lua_load&quot;), new ReplaceCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HookStatus onCall(Emulator&lt;?&gt; emulator, HookContext context, long originFunction) &#123;</span><br><span class="line">                return HookStatus.LR(emulator, context.getIntArg(2));//反汇第三个参数data的数据</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DvmClass luaState = lua.getVm().resolveClass(&quot;com/luajava/LuaState&quot;);//实现一个类</span><br><span class="line">        long luaInstance = luaState.callStaticJniMethodLong(lua.getAndroidEmulator(), &quot;_newstate()J&quot;);//调用静态函数初始化接口</span><br><span class="line">        int i = luaState.callStaticJniMethodInt(lua.getAndroidEmulator(), &quot;_LloadFile(JLjava/lang/String;)I&quot;,//模拟调用_LloadFile函数</span><br><span class="line">                luaInstance, &quot;test.lua&quot;);//传入两个参数对应的</span><br><span class="line"></span><br><span class="line">        UnidbgPointer pointer = UnidbgPointer.pointer(lua.getAndroidEmulator(), i);//获取指针</span><br><span class="line">        if (pointer != null) &#123;//判断指针是否是空指针，若不是执行</span><br><span class="line"></span><br><span class="line">            int[] size = new int[1];</span><br><span class="line">            pointer.read(4, size, 0, size.length);//获取解密后文件大小</span><br><span class="line">            byte[] file = new byte[size[0]];</span><br><span class="line">            pointer.getPointer(0).read(0, file, 0, file.length);//把文件读取到buffer</span><br><span class="line">            try &#123;</span><br><span class="line">                FileUtils.writeByteArrayToFile(new File(lua.LUA_OUT), file);//保存文件</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lua.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public FileResult&lt;AndroidFileIO&gt; resolve(Emulator&lt;AndroidFileIO&gt; emulator, String pathname, int oflags) &#123;</span><br><span class="line">//        实现一个IO接口当模拟运行c的fopen函数的时候返回的就是，这个函数中的文件IO。判断fopen的文件名设置对应的文件</span><br><span class="line">        if (&quot;test.lua&quot;.equals(pathname)) &#123;</span><br><span class="line">            return FileResult.success(emulator.getFileSystem().createSimpleFileIO(new File(LUA_INPUT), oflags, pathname));</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public AndroidEmulator getAndroidEmulator() &#123;</span><br><span class="line">        return androidEmulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public VM getVm() &#123;</span><br><span class="line">        return vm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Memory getMemory() &#123;</span><br><span class="line">        return memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void close() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.androidEmulator.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比解密前和解密后的数据文件</p><p><img src="https://s2.loli.net/2022/07/29/pLQNChAKByYg8HR.png"></p><p><img src="https://s2.loli.net/2022/07/29/O1i3MhoYAuHcs6j.png"></p><p>可以用Unluac进行解密后的Lua文件反编译，只解密了整个Lua文件的加密，其中的字符串未被解密。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Unidbg的介绍&quot;&gt;&lt;a href=&quot;#Unidbg的介绍&quot; class=&quot;headerlink&quot; title=&quot;Unidbg的介绍&quot;&gt;&lt;/a&gt;Unidbg的介绍&lt;/h2&gt;&lt;p&gt;Allows you to emulate an Android native li</summary>
      
    
    
    
    <category term="程序设计" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="Android" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Android/"/>
    
    <category term="逆向分析" scheme="https://blog.jamiexu.cn/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="Java" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java/"/>
    
    <category term="Android逆向" scheme="https://blog.jamiexu.cn/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/Android%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>【CTF】CTF的一把梭Z3</title>
    <link href="https://blog.jamiexu.cn/2022/02/25/%E3%80%90ctf%E3%80%91ctf%E7%9A%84%E4%B8%80%E6%8A%8A%E6%A2%ADz3/"/>
    <id>https://blog.jamiexu.cn/2022/02/25/%E3%80%90ctf%E3%80%91ctf%E7%9A%84%E4%B8%80%E6%8A%8A%E6%A2%ADz3/</id>
    <published>2022-02-25T05:42:40.000Z</published>
    <updated>2022-07-29T04:24:54.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装z3"><a href="#安装z3" class="headerlink" title="安装z3"></a>安装z3</h2><p>Z3开源项目地址：<a href="https://github.com/z3prover">https://github.com/z3prover</a></p><p>Python文档翻译：<a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p><ul><li>  官方文档</li><li>  <a href="https://z3prover.github.io/api/html/group__cppapi.html">C++ API</a></li><li>  <a href="https://z3prover.github.io/api/html/namespace_microsoft_1_1_z3.html">.NET API</a></li><li>  <a href="https://z3prover.github.io/api/html/namespacecom_1_1microsoft_1_1z3.html">Java API</a></li><li>  <a href="https://z3prover.github.io/api/html/namespacez3py.html">Python API</a> (also available in <a href="https://z3prover.github.io/api/html/z3.html">pydoc format</a>)</li><li>  <a href="https://github.com/ahumenberger/Z3.jl">Julia</a></li></ul><p>首先访问<a href="https://pypi.org/project/z3-solver/#modal-close">Pypi</a>下载对应的架构的whl文件，下载的时候注意对应自己电脑的平台和Python对应的版本。下载好后打开cmd输入pip install 下载的文件路径进行z3的安装。如图所示</p><p><img src="https://s2.loli.net/2022/07/29/9TARSQqVo1LX6vO.png"></p><p><img src="https://s2.loli.net/2022/07/29/RHjTIKOB8CrwFJW.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装z3&quot;&gt;&lt;a href=&quot;#安装z3&quot; class=&quot;headerlink&quot; title=&quot;安装z3&quot;&gt;&lt;/a&gt;安装z3&lt;/h2&gt;&lt;p&gt;Z3开源项目地址：&lt;a href=&quot;https://github.com/z3prover&quot;&gt;https://github.</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.jamiexu.cn/tags/CTF/"/>
    
    <category term="Python" scheme="https://blog.jamiexu.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【CentOS  Linux  RHEL】Linux中安装MySQL</title>
    <link href="https://blog.jamiexu.cn/2022/02/25/%E3%80%90centos-linux-rhel%E3%80%91linux%E4%B8%AD%E5%AE%89%E8%A3%85mysql/"/>
    <id>https://blog.jamiexu.cn/2022/02/25/%E3%80%90centos-linux-rhel%E3%80%91linux%E4%B8%AD%E5%AE%89%E8%A3%85mysql/</id>
    <published>2022-02-25T05:40:17.000Z</published>
    <updated>2022-07-29T01:33:52.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近买了一个比较实惠的服务器，在迁移博客的时候发现这次比之前几次还麻烦原因就出现在了Mysql的安装中。在之前的运维部署中我写了一些关于nginx和php的安装唯独没有mysql的导致踩了不少的坑。所以特写本文章记录。本文记录了安装过程中能够所遇到的坑！本文中用CentOS为例其他Linux大同小异</p><h2 id="选择合适的MySQL"><a href="#选择合适的MySQL" class="headerlink" title="选择合适的MySQL"></a>选择合适的MySQL</h2><p>访问<a href="https://dev.mysql.com/downloads/mysql/">MySQL官网</a>，点击如图的链接可以安装之前的MySQL版本</p><p><img src="https://s2.loli.net/2022/07/29/QJVNalefw6XA5dY.png"></p><p>CentOS选择RedHat</p><p><img src="https://s2.loli.net/2022/07/29/HpiCzDPWUTJLwVm.png"></p><p>在Linux终端输入uname -a 查看系统架构。根据自己的Linux架构选择合适的版本滑倒最下面找到这一个按Download会跳转到一个页面根据图片所示</p><p><img src="https://blog.jamiexu.cn/wp-content/uploads/2022/02/image-3.png"></p><p><img src="https://s2.loli.net/2022/07/29/jvCVT5toaYd8xBk.png"></p><p><img src="https://s2.loli.net/2022/07/29/WbJal2zOZioNT4k.png"></p><p><img src="https://s2.loli.net/2022/07/29/uN3XLcboseB8r9Z.png"></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>在终端输入如下所示的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#下载MySQL后面的链接是刚刚复制的</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.28-el7-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#解压mysql.tar.gz</span><br><span class="line">tar -xzvf mysql-8.0.28-el7-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#移动到自己想存放的位置这里我存放到/usr/local/mysql</span><br><span class="line">mv mysql-8.0.28-el7-x86_64 /usr/local/mysql</span><br><span class="line"></span><br><span class="line">#创建一个不允许远程登录的用户用做mysql启动用户，不创建默认使用root可能会有安全问题</span><br><span class="line">#创建一个群组</span><br><span class="line">groupdadd www-data</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line">useradd -g www-data mysql -s /sbin/nologin</span><br><span class="line"></span><br><span class="line">#改变mysql目录拥有权</span><br><span class="line">chown -R mysql:www-data /usr/local/mysql</span><br><span class="line"></span><br><span class="line">#设置权限</span><br><span class="line">chmod 755 /usr/local/mysql</span><br><span class="line"></span><br><span class="line">#创建MySQL数据文件夹</span><br><span class="line">mkdir /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#初始化数据库，执行之后最后面的是临时密码如下图所示</span><br><span class="line">./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql</span><br><span class="line"></span><br><span class="line">#复制配置文件</span><br><span class="line">cp my-default.cnf /etc/my.cnf</span><br><span class="line"></span><br><span class="line">#修改文件如下图二所示</span><br><span class="line">vim /usr/local/mysql/support-files/mysql.server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#软链接到系统服务中可以直接使用service mysql (startrestartstop)控制mysql服务</span><br><span class="line">ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line"></span><br><span class="line">#软链接到/usr/bin否则如果不在当前目录使用mysql会提示-bash: mysql: command not found</span><br><span class="line"> ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置开机启动</span><br><span class="line">chmod 755 /etc/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --level 345 mysql on</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/aOF2zSNBLC8EMoX.png"></p><p>默认密码</p><p><img src="https://s2.loli.net/2022/07/29/jYZg1WBQwCzrqEf.png"></p><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#登录MySQL，默认root密码为前面步骤中生成的临时密码</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">#登陆后修改临时密码为test</span><br><span class="line">set password = password(&#x27;test&#x27;);</span><br><span class="line"></span><br><span class="line">#MySQL8.0设置密码</span><br><span class="line">set password=&#x27;test&#x27;;</span><br><span class="line"></span><br><span class="line">#设置数据库允许远程登录</span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>1、mysqld_safe error: log-error set to ‘/var/log/mariadb/mariadb.log’, however file don’t exists. Create writable for user ‘mysql’.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/log/mariadb</span><br><span class="line"></span><br><span class="line">touch /var/log/mariadb/mariadb.log</span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql /var/log/mariadb</span><br><span class="line"></span><br><span class="line">chmod 755 /var/log/mariadb</span><br></pre></td></tr></table></figure><p>2、 -bash: mysql: command not found</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</span><br></pre></td></tr></table></figure><p>3、Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql.sock</span><br><span class="line"></span><br><span class="line">结果：/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">cp /usr/local/mysql/mysql.sock /tmp/mysql.sock</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近买了一个比较实惠的服务器，在迁移博客的时候发现这次比之前几次还麻烦原因就出现在了Mysql的安装中。在之前的运维部署中我写了一些关于ng</summary>
      
    
    
    
    <category term="程序设计" scheme="https://blog.jamiexu.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="运营维护" scheme="https://blog.jamiexu.cn/categories/%E8%BF%90%E8%90%A5%E7%BB%B4%E6%8A%A4/"/>
    
    
    <category term="Linux" scheme="https://blog.jamiexu.cn/tags/Linux/"/>
    
    <category term="Web" scheme="https://blog.jamiexu.cn/tags/Web/"/>
    
    <category term="运维" scheme="https://blog.jamiexu.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【IDA】010EditorV11.0_x64逆向制作文件内存补丁</title>
    <link href="https://blog.jamiexu.cn/2021/07/30/%E3%80%90ida%E3%80%91010editorv11-0-x64%E9%80%86%E5%90%91%E5%88%B6%E4%BD%9C%E5%86%85%E5%AD%98%E8%A1%A5%E4%B8%81/"/>
    <id>https://blog.jamiexu.cn/2021/07/30/%E3%80%90ida%E3%80%91010editorv11-0-x64%E9%80%86%E5%90%91%E5%88%B6%E4%BD%9C%E5%86%85%E5%AD%98%E8%A1%A5%E4%B8%81/</id>
    <published>2021-07-30T05:24:15.000Z</published>
    <updated>2022-07-29T04:54:59.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、破解序列号"><a href="#1、破解序列号" class="headerlink" title="1、破解序列号"></a>1、破解序列号</h3><p>我们打开程序后会提示这个框框</p><p><img src="https://s2.loli.net/2022/07/29/xdmgyUP3shXaprA.png"></p><p>然后打开IDA使用IDA打开我们的程序</p><p>Shift+F12打开字符串引用表_，_Ctrl+F搜索我们干菜看到的提示内容</p><p><img src="https://s2.loli.net/2022/07/29/5cD7k8ZnMVKejU3.png"></p><p>搜索出一个结果我们双击进去，然后双击光标指向的位置。打开数据交叉引用。看到了我们引用的地方。</p><p><img src="https://s2.loli.net/2022/07/29/kH6Y5zrhnfEAJQW.png"></p><p><img src="https://s2.loli.net/2022/07/29/RU7lvfXNhB3TtpA.png"></p><p>按F5或Tab打开伪代码分析，发现调用了一个函数。然后判断函数的返回值来确定是否注册成功。双击黄色的地方进入函数分析。</p><p><img src="https://s2.loli.net/2022/07/29/Rd7w9aAmkZWEIoN.png"></p><p><img src="https://s2.loli.net/2022/07/29/nVyEWGvrSsmPD8N.png"></p><p>只有在v6返回值为0x2D的是都才会返回0xDB，继续进入到该函数。这个函数可能是注册码的算法，我们不管直接把return的值全部改成0x2D</p><p><img src="https://s2.loli.net/2022/07/29/R8UNfkmBQ2XVphg.png"></p><p>我们点击return关键字的发现有5个地方return了数据我们把这5个return都改成return 0x2D。在汇编中返回值是存放在我们的eax寄存器中的。我们只要把鼠标点击return的地方再按Tab就能快速定位到对应的汇编代码。使用keypatcher patch指令。改完后按F5重新加载伪代码看看都改完了。</p><p><img src="https://s2.loli.net/2022/07/29/OMWhPzQ8NFJlrLp.png"></p><p><img src="https://s2.loli.net/2022/07/29/bOUiYkEqDlNJBom.png"></p><p><img src="https://s2.loli.net/2022/07/29/kKfTomBjERtNuU5.png"></p><p>回到刚刚的函数发现有个地方判断了直接返回导致函数没被调用，这时候我们把0x113切换的汇编代码patch 为0xdb即可</p><p><img src="https://s2.loli.net/2022/07/29/bFB85yHk26DMirq.png"></p><h3 id="2、网络验证破解"><a href="#2、网络验证破解" class="headerlink" title="2、网络验证破解"></a>2、网络验证破解</h3><p>上面的改完后基本上是可以使用了，不过有时候使用途中会进行网络验证。所以需要把这个也去除</p><p>在字符串引用窗口（前面提到的Shift+F12）搜索Could not contact the webserver. Please check your internet connection.双击进来后，双击黄色的地方找到引用的位置</p><p><img src="https://s2.loli.net/2022/07/29/YmZliW7AbgkIKue.png"></p><p>在这个地方引用了这个字符串，只有当v13小于0的时候会提示。v13就是我们网络验证的函数我们直接把它patch，按tab切换到对应的汇编可以看到jns跳转，jns只有在符号位SF=1的时候才会跳转。可以看到test eax,eax这个指令会修改符号位SF。也就是说只有当eax为正数的时候会跳转，我们直接把call patch成mov eax,0x200即可</p><p><img src="https://s2.loli.net/2022/07/29/iGOJ849ZHeMpKlf.png"></p><p><img src="https://s2.loli.net/2022/07/29/R4F1IUwSVLXN3AZ.png"></p><p>破解完成我们需要把它导出exe，Edit-&gt;Patch Program-&gt;Apply patchs to input file…</p><p><img src="https://s2.loli.net/2022/07/29/5XeLCxH2QA9lm3o.png"></p><p>这样这个程序就是我们破解后的程序，可以直接打开使用</p><p><img src="https://s2.loli.net/2022/07/29/nEjPyRTWJ1VgqLt.png"></p><h3 id="3、文件补丁"><a href="#3、文件补丁" class="headerlink" title="3、文件补丁"></a>3、文件补丁</h3><p>用IDA修改是比较容易的，如果脱离了IDA该如何修改呢？其实在IDA中修改了反汇编的指令以后，对应的在文件的修改的是机器码。只要在文件中能定位到指令对应的机器码的位置，那么直接修改机器码就可以了，只要在文件中找到这个要修改的位置，进行文件读写修改指令即可。如何把内存中的地址定位到文件地址呢？只要把VA转换成FOA就好了。原理就是修改我们文件中代码块中地址对应的指令。我们用IDA打开一个PE程序可以看到我们每个指令所在的虚拟地址。虚拟地址就是我们加载到内存中的地址和我们文件中的地址是不对应的。在内存中的地址就是我们的VA，所以需要把我们的VA转换成FOV我们的文件偏移。</p><p>知道什么是VA，RVA，FOA，ImageBase懂得他们互相转换</p><p><strong>ImageBase</strong></p><p>意思是基址，指的是程序在虚拟空间中被装载的位置。一般为140000000h</p><p><strong>VA</strong></p><p><code>Virual Address</code>(VA)，意思是虚拟地址。指的是文件被载入虚拟空间后的地址。</p><p><strong>RVA</strong></p><p>Relatively Virtual Address(RVA)。偏移（又称“相对虚拟地址”）。相对 <strong>ImageBase</strong> 的偏移。</p><p><strong>FOA</strong></p><p><code>File Offset Address</code>(FOA)，意思是文件偏移地址。可以理解为文件在磁盘上存放时相对于文件开头的偏移。它的对齐方式一般是以200h为单位在硬盘中对齐的(512对齐)，具体对齐需要参照<code>IMAGE_OPTIONAL_HEADER</code>中的<code>FileAlignment</code>成员</p><p>PE文件格式的解析，我们只需要一小部分的知识就好了，不过我建议既然玩逆向把PE文件格式解析学好也是很必要的。如果你懂得PE文件格式更好。没了解过这边先建议谷歌学习一下。下面是我谷歌的一张图。这个图作者也是很厉害。</p><p><img src="https://s2.loli.net/2022/07/29/lqbwLA2IpacQW7Y.gif"></p><p>在这个工作中我们只需要了解以下那么几个就行了。</p><p><strong>结构体名称</strong></p><p><strong>成员</strong></p><p><strong>作用</strong></p><p>IMAGE_DOS_HEADER</p><p>e_lfanew</p><p>PE头部的偏移</p><p>IMAGE_OPTIONAL_HEADER</p><p>BaseOfCode</p><p>代码区块RVA</p><p>IMAGE_OPTIONAL_HEADER</p><p>ImageBase</p><p>文件在内存中首选装载的位置</p><p>IMAGE_SECTION_HEADER</p><p>PointerToRawData</p><p>区块在文件中的偏移</p><h4 id="VA-RVA-FOA相互转换"><a href="#VA-RVA-FOA相互转换" class="headerlink" title="VA,RVA,FOA相互转换"></a>VA,RVA,FOA相互转换</h4><p>只要记住下面两个公式即可实现它们之间的无脑转换</p><p>VA = ImageBase + RVA</p><p>FOA = 区块文件偏移+ (RVA - 区块RVA) =</p><p>我们现在进行实测转换试试，首先用IDA打开我们的程序</p><p><img src="https://s2.loli.net/2022/07/29/L9KhiJxvMaO3rXz.png"></p><p>可以看到这个指令的VA是0x1401E42BA现在我们需要转换成FOA</p><p><img src="https://s2.loli.net/2022/07/29/1ahTzedFUM9VEIc.png"></p><p><img src="https://s2.loli.net/2022/07/29/ChbFNUk1g2xanJL.png"></p><p>用010Editor打开分析可以发现我们的ImageBase为0x140000000，代码区块的RVA是0x1000,代码区块的文件偏移是0x400</p><p>通过上面的公式计算得</p><p>RVA = VA - ImageBase</p><p>FOA = 区块文件偏移+ (RVA - 区块RVA) = 区块文件偏移+ (VA - Image - 区块RVA) = 0x400 + ( 0x1401E42BA - 0x140000000 - 0x1000) = 1E36BA</p><p><img src="https://s2.loli.net/2022/07/29/gxoyvuAUhrq4sS5.png"></p><p>可以看到对应了我们IDA中的6个字节,这个指令可以通过上图IDA看到是JNZ到一个地址，假设这个是判断是否成功的指令我要要把他nop只需要把这6个字节改成0x90就好了，0x90对应的指令就是NOP。用编程实现我们的修改工作即可</p><h3 id="4、内存补丁"><a href="#4、内存补丁" class="headerlink" title="4、内存补丁"></a>4、内存补丁</h3><p>内存补丁相对来说比文件补丁简单许多，其原理是使用CreateProcess函数打开目标程序为子程序且暂停，使用WriteProcessMemory函数进行内存的指令写入修改原始指令，再继续运行子程序</p><p>但是也有一个问题如何获取程序的VA，因为程序打开后有些基址是不一样的所以我们需要获指令在内存中的VA地址</p><p>我们文件补丁讲过</p><p>VA = ImageBase + RVA</p><p>所以我们只需要获取RVA后+上我们的模块基址就可以得到我们的VA</p><p>ImageBase如何获取获取？一开始我想到了TlHelp32库中的CreateToolhelp32Snapshot获取发现返回-1无法获取到，后尝试EnumProcessModules返回299错误码也无法获取到。只能想到这么一个方法但不确保每台电脑加载的地址都是这个地址，如果有知道其他方法的还请告知谢谢。当我们IDA或者Xdbg64附加进程的时候可以看到基址这个就是ImageBase。前提是得确定在哪个模块中的指令</p><p><img src="https://s2.loli.net/2022/07/29/UifvIJ5AtwZ9uTl.png"></p><p>怎么获取RVA？一个一个算吗？其实不用在IDA中有个功能很强大就是Edit-&gt;Segments -&gt; ReBase programing..</p><p>这个功能是重新设置ImageBase我们只需要把ImageBase设置为0后，复制的地址就是我们的RVA</p><p><img src="https://s2.loli.net/2022/07/29/dPsi9qTBfXwpu12.png"></p><p><img src="https://s2.loli.net/2022/07/29/coaer2u8Q9FCdEf.png"></p><p><a href="https://github.com/Jamie793/010EditorPatch">参考源码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、破解序列号&quot;&gt;&lt;a href=&quot;#1、破解序列号&quot; class=&quot;headerlink&quot; title=&quot;1、破解序列号&quot;&gt;&lt;/a&gt;1、破解序列号&lt;/h3&gt;&lt;p&gt;我们打开程序后会提示这个框框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.ne</summary>
      
    
    
    
    <category term="逆向分析" scheme="https://blog.jamiexu.cn/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="PC逆向" scheme="https://blog.jamiexu.cn/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/PC%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://blog.jamiexu.cn/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="IDA" scheme="https://blog.jamiexu.cn/tags/IDA/"/>
    
    <category term="PC逆向" scheme="https://blog.jamiexu.cn/tags/PC%E9%80%86%E5%90%91/"/>
    
    <category term="内存补丁" scheme="https://blog.jamiexu.cn/tags/%E5%86%85%E5%AD%98%E8%A1%A5%E4%B8%81/"/>
    
    <category term="补丁" scheme="https://blog.jamiexu.cn/tags/%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>VS Code下LaTeX的配置</title>
    <link href="https://blog.jamiexu.cn/2021/07/07/vs-code%E4%B8%8Blatex%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.jamiexu.cn/2021/07/07/vs-code%E4%B8%8Blatex%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2021-07-07T11:49:52.000Z</published>
    <updated>2022-07-29T06:12:09.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MikTex安装"><a href="#MikTex安装" class="headerlink" title="MikTex安装"></a>MikTex安装</h2><p>官网下载MikTex: <a href="https://miktex.org/">https://miktex.org/</a> 的安装包，然后点击安装。安装完成有运行”Miktex console”进行配置(选择”以管理员身份运行”)。</p><p>点击”Packages”标签，然后依次安装ctex和CJK包等(或者<strong>待编译时再按需安装也可</strong>)， 以便支持中文。</p><p><img src="https://s2.loli.net/2022/07/29/6KDRjISnlTMEVAN.png"></p><p><img src="https://s2.loli.net/2022/07/29/ZsUVG5KkgSwL7Hu.png"></p><h2 id="VS-code-LaTeX-Workshop"><a href="#VS-code-LaTeX-Workshop" class="headerlink" title="VS code+LaTeX Workshop"></a>VS code+LaTeX Workshop</h2><p>官网下载VSCode安装包然后安装。<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>然后运行”vscode”, 安装其扩展Latex Workshop.</p><p>对于Miktex, 需要对Latex Workshop配置<strong>recipe</strong>和<strong>tool</strong>。</p><p><img src="https://s2.loli.net/2022/07/29/X7yTWuiYCpj9VqN.jpg"></p><h3 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.tools&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            // 编译工具和命令</span><br><span class="line">            &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-synctex=1&quot;,</span><br><span class="line">                &quot;-interaction=nonstopmode&quot;,</span><br><span class="line">                &quot;-file-line-error&quot;,</span><br><span class="line">                &quot;-pdf&quot;,</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;pdflatex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;pdflatex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-synctex=1&quot;,</span><br><span class="line">                &quot;-interaction=nonstopmode&quot;,</span><br><span class="line">                &quot;-file-line-error&quot;,</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bibtex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;bibtex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br></pre></td></tr></table></figure><h3 id="recipe"><a href="#recipe" class="headerlink" title="recipe"></a>recipe</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.recipes&quot;: [</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">          &quot;name&quot;: &quot;pdflatex&quot;,</span><br><span class="line">          &quot;tools&quot;: [</span><br><span class="line">          &quot;pdflatex&quot;</span><br><span class="line">                    ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">            &quot;pdflatex&quot;,</span><br><span class="line">            &quot;bibtex&quot;,</span><br><span class="line">            &quot;pdflatex&quot;,</span><br><span class="line">            &quot;pdflatex&quot;</span><br><span class="line">                      ]</span><br><span class="line">          &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">            &quot;xelatex&quot;</span><br><span class="line">                      ]</span><br><span class="line">                  &#125;,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      ], </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/bBRspvOqikCahlz.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MikTex安装&quot;&gt;&lt;a href=&quot;#MikTex安装&quot; class=&quot;headerlink&quot; title=&quot;MikTex安装&quot;&gt;&lt;/a&gt;MikTex安装&lt;/h2&gt;&lt;p&gt;官网下载MikTex: &lt;a href=&quot;https://miktex.org/&quot;&gt;http</summary>
      
    
    
    
    <category term="其他" scheme="https://blog.jamiexu.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="软件配置" scheme="https://blog.jamiexu.cn/categories/%E5%85%B6%E4%BB%96/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
</feed>
